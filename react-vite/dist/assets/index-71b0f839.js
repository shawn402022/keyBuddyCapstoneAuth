var _S=Object.defineProperty;var $S=(t,e,n)=>e in t?_S(t,e,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[e]=n;var cn=(t,e,n)=>($S(t,typeof e!="symbol"?e+"":e,n),n);function vE(t,e){for(var n=0;n<e.length;n++){const i=e[n];if(typeof i!="string"&&!Array.isArray(i)){for(const r in i)if(r!=="default"&&!(r in t)){const s=Object.getOwnPropertyDescriptor(i,r);s&&Object.defineProperty(t,r,s.get?s:{enumerable:!0,get:()=>i[r]})}}}return Object.freeze(Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}))}(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const r of document.querySelectorAll('link[rel="modulepreload"]'))i(r);new MutationObserver(r=>{for(const s of r)if(s.type==="childList")for(const o of s.addedNodes)o.tagName==="LINK"&&o.rel==="modulepreload"&&i(o)}).observe(document,{childList:!0,subtree:!0});function n(r){const s={};return r.integrity&&(s.integrity=r.integrity),r.referrerPolicy&&(s.referrerPolicy=r.referrerPolicy),r.crossOrigin==="use-credentials"?s.credentials="include":r.crossOrigin==="anonymous"?s.credentials="omit":s.credentials="same-origin",s}function i(r){if(r.ep)return;r.ep=!0;const s=n(r);fetch(r.href,s)}})();var Ws=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{};function CE(t){return t&&t.__esModule&&Object.prototype.hasOwnProperty.call(t,"default")?t.default:t}var wE={exports:{}},Uu={},DE={exports:{}},ge={};/**
 * @license React
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var Zo=Symbol.for("react.element"),eA=Symbol.for("react.portal"),tA=Symbol.for("react.fragment"),nA=Symbol.for("react.strict_mode"),iA=Symbol.for("react.profiler"),rA=Symbol.for("react.provider"),sA=Symbol.for("react.context"),oA=Symbol.for("react.forward_ref"),aA=Symbol.for("react.suspense"),uA=Symbol.for("react.memo"),lA=Symbol.for("react.lazy"),$f=Symbol.iterator;function cA(t){return t===null||typeof t!="object"?null:(t=$f&&t[$f]||t["@@iterator"],typeof t=="function"?t:null)}var xE={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},BE=Object.assign,TE={};function Bs(t,e,n){this.props=t,this.context=e,this.refs=TE,this.updater=n||xE}Bs.prototype.isReactComponent={};Bs.prototype.setState=function(t,e){if(typeof t!="object"&&typeof t!="function"&&t!=null)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,t,e,"setState")};Bs.prototype.forceUpdate=function(t){this.updater.enqueueForceUpdate(this,t,"forceUpdate")};function NE(){}NE.prototype=Bs.prototype;function eh(t,e,n){this.props=t,this.context=e,this.refs=TE,this.updater=n||xE}var th=eh.prototype=new NE;th.constructor=eh;BE(th,Bs.prototype);th.isPureReactComponent=!0;var em=Array.isArray,FE=Object.prototype.hasOwnProperty,nh={current:null},ME={key:!0,ref:!0,__self:!0,__source:!0};function PE(t,e,n){var i,r={},s=null,o=null;if(e!=null)for(i in e.ref!==void 0&&(o=e.ref),e.key!==void 0&&(s=""+e.key),e)FE.call(e,i)&&!ME.hasOwnProperty(i)&&(r[i]=e[i]);var a=arguments.length-2;if(a===1)r.children=n;else if(1<a){for(var l=Array(a),d=0;d<a;d++)l[d]=arguments[d+2];r.children=l}if(t&&t.defaultProps)for(i in a=t.defaultProps,a)r[i]===void 0&&(r[i]=a[i]);return{$$typeof:Zo,type:t,key:s,ref:o,props:r,_owner:nh.current}}function dA(t,e){return{$$typeof:Zo,type:t.type,key:e,ref:t.ref,props:t.props,_owner:t._owner}}function ih(t){return typeof t=="object"&&t!==null&&t.$$typeof===Zo}function hA(t){var e={"=":"=0",":":"=2"};return"$"+t.replace(/[=:]/g,function(n){return e[n]})}var tm=/\/+/g;function Kl(t,e){return typeof t=="object"&&t!==null&&t.key!=null?hA(""+t.key):e.toString(36)}function Ia(t,e,n,i,r){var s=typeof t;(s==="undefined"||s==="boolean")&&(t=null);var o=!1;if(t===null)o=!0;else switch(s){case"string":case"number":o=!0;break;case"object":switch(t.$$typeof){case Zo:case eA:o=!0}}if(o)return o=t,r=r(o),t=i===""?"."+Kl(o,0):i,em(r)?(n="",t!=null&&(n=t.replace(tm,"$&/")+"/"),Ia(r,e,n,"",function(d){return d})):r!=null&&(ih(r)&&(r=dA(r,n+(!r.key||o&&o.key===r.key?"":(""+r.key).replace(tm,"$&/")+"/")+t)),e.push(r)),1;if(o=0,i=i===""?".":i+":",em(t))for(var a=0;a<t.length;a++){s=t[a];var l=i+Kl(s,a);o+=Ia(s,e,n,l,r)}else if(l=cA(t),typeof l=="function")for(t=l.call(t),a=0;!(s=t.next()).done;)s=s.value,l=i+Kl(s,a++),o+=Ia(s,e,n,l,r);else if(s==="object")throw e=String(t),Error("Objects are not valid as a React child (found: "+(e==="[object Object]"?"object with keys {"+Object.keys(t).join(", ")+"}":e)+"). If you meant to render a collection of children, use an array instead.");return o}function ha(t,e,n){if(t==null)return t;var i=[],r=0;return Ia(t,i,"","",function(s){return e.call(n,s,r++)}),i}function fA(t){if(t._status===-1){var e=t._result;e=e(),e.then(function(n){(t._status===0||t._status===-1)&&(t._status=1,t._result=n)},function(n){(t._status===0||t._status===-1)&&(t._status=2,t._result=n)}),t._status===-1&&(t._status=0,t._result=e)}if(t._status===1)return t._result.default;throw t._result}var Ot={current:null},ja={transition:null},mA={ReactCurrentDispatcher:Ot,ReactCurrentBatchConfig:ja,ReactCurrentOwner:nh};ge.Children={map:ha,forEach:function(t,e,n){ha(t,function(){e.apply(this,arguments)},n)},count:function(t){var e=0;return ha(t,function(){e++}),e},toArray:function(t){return ha(t,function(e){return e})||[]},only:function(t){if(!ih(t))throw Error("React.Children.only expected to receive a single React element child.");return t}};ge.Component=Bs;ge.Fragment=tA;ge.Profiler=iA;ge.PureComponent=eh;ge.StrictMode=nA;ge.Suspense=aA;ge.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=mA;ge.cloneElement=function(t,e,n){if(t==null)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+t+".");var i=BE({},t.props),r=t.key,s=t.ref,o=t._owner;if(e!=null){if(e.ref!==void 0&&(s=e.ref,o=nh.current),e.key!==void 0&&(r=""+e.key),t.type&&t.type.defaultProps)var a=t.type.defaultProps;for(l in e)FE.call(e,l)&&!ME.hasOwnProperty(l)&&(i[l]=e[l]===void 0&&a!==void 0?a[l]:e[l])}var l=arguments.length-2;if(l===1)i.children=n;else if(1<l){a=Array(l);for(var d=0;d<l;d++)a[d]=arguments[d+2];i.children=a}return{$$typeof:Zo,type:t.type,key:r,ref:s,props:i,_owner:o}};ge.createContext=function(t){return t={$$typeof:sA,_currentValue:t,_currentValue2:t,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null},t.Provider={$$typeof:rA,_context:t},t.Consumer=t};ge.createElement=PE;ge.createFactory=function(t){var e=PE.bind(null,t);return e.type=t,e};ge.createRef=function(){return{current:null}};ge.forwardRef=function(t){return{$$typeof:oA,render:t}};ge.isValidElement=ih;ge.lazy=function(t){return{$$typeof:lA,_payload:{_status:-1,_result:t},_init:fA}};ge.memo=function(t,e){return{$$typeof:uA,type:t,compare:e===void 0?null:e}};ge.startTransition=function(t){var e=ja.transition;ja.transition={};try{t()}finally{ja.transition=e}};ge.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")};ge.useCallback=function(t,e){return Ot.current.useCallback(t,e)};ge.useContext=function(t){return Ot.current.useContext(t)};ge.useDebugValue=function(){};ge.useDeferredValue=function(t){return Ot.current.useDeferredValue(t)};ge.useEffect=function(t,e){return Ot.current.useEffect(t,e)};ge.useId=function(){return Ot.current.useId()};ge.useImperativeHandle=function(t,e,n){return Ot.current.useImperativeHandle(t,e,n)};ge.useInsertionEffect=function(t,e){return Ot.current.useInsertionEffect(t,e)};ge.useLayoutEffect=function(t,e){return Ot.current.useLayoutEffect(t,e)};ge.useMemo=function(t,e){return Ot.current.useMemo(t,e)};ge.useReducer=function(t,e,n){return Ot.current.useReducer(t,e,n)};ge.useRef=function(t){return Ot.current.useRef(t)};ge.useState=function(t){return Ot.current.useState(t)};ge.useSyncExternalStore=function(t,e,n){return Ot.current.useSyncExternalStore(t,e,n)};ge.useTransition=function(){return Ot.current.useTransition()};ge.version="18.2.0";DE.exports=ge;var B=DE.exports;const bi=CE(B),gA=vE({__proto__:null,default:bi},[B]);/**
 * @license React
 * react-jsx-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var EA=B,bA=Symbol.for("react.element"),pA=Symbol.for("react.fragment"),SA=Object.prototype.hasOwnProperty,AA=EA.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,vA={key:!0,ref:!0,__self:!0,__source:!0};function kE(t,e,n){var i,r={},s=null,o=null;n!==void 0&&(s=""+n),e.key!==void 0&&(s=""+e.key),e.ref!==void 0&&(o=e.ref);for(i in e)SA.call(e,i)&&!vA.hasOwnProperty(i)&&(r[i]=e[i]);if(t&&t.defaultProps)for(i in e=t.defaultProps,e)r[i]===void 0&&(r[i]=e[i]);return{$$typeof:bA,type:t,key:s,ref:o,props:r,_owner:AA.current}}Uu.Fragment=pA;Uu.jsx=kE;Uu.jsxs=kE;wE.exports=Uu;var v=wE.exports,Xc={},LE={exports:{}},on={},OE={exports:{}},yE={};/**
 * @license React
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */(function(t){function e(j,Y){var J=j.length;j.push(Y);e:for(;0<J;){var ie=J-1>>>1,ce=j[ie];if(0<r(ce,Y))j[ie]=Y,j[J]=ce,J=ie;else break e}}function n(j){return j.length===0?null:j[0]}function i(j){if(j.length===0)return null;var Y=j[0],J=j.pop();if(J!==Y){j[0]=J;e:for(var ie=0,ce=j.length,tt=ce>>>1;ie<tt;){var Re=2*(ie+1)-1,Qt=j[Re],lt=Re+1,Qn=j[lt];if(0>r(Qt,J))lt<ce&&0>r(Qn,Qt)?(j[ie]=Qn,j[lt]=J,ie=lt):(j[ie]=Qt,j[Re]=J,ie=Re);else if(lt<ce&&0>r(Qn,J))j[ie]=Qn,j[lt]=J,ie=lt;else break e}}return Y}function r(j,Y){var J=j.sortIndex-Y.sortIndex;return J!==0?J:j.id-Y.id}if(typeof performance=="object"&&typeof performance.now=="function"){var s=performance;t.unstable_now=function(){return s.now()}}else{var o=Date,a=o.now();t.unstable_now=function(){return o.now()-a}}var l=[],d=[],f=1,u=null,c=3,h=!1,g=!1,E=!1,p=typeof setTimeout=="function"?setTimeout:null,m=typeof clearTimeout=="function"?clearTimeout:null,b=typeof setImmediate<"u"?setImmediate:null;typeof navigator<"u"&&navigator.scheduling!==void 0&&navigator.scheduling.isInputPending!==void 0&&navigator.scheduling.isInputPending.bind(navigator.scheduling);function A(j){for(var Y=n(d);Y!==null;){if(Y.callback===null)i(d);else if(Y.startTime<=j)i(d),Y.sortIndex=Y.expirationTime,e(l,Y);else break;Y=n(d)}}function S(j){if(E=!1,A(j),!g)if(n(l)!==null)g=!0,xt(w);else{var Y=n(d);Y!==null&&mt(S,Y.startTime-j)}}function w(j,Y){g=!1,E&&(E=!1,m(F),F=-1),h=!0;var J=c;try{for(A(Y),u=n(l);u!==null&&(!(u.expirationTime>Y)||j&&!G());){var ie=u.callback;if(typeof ie=="function"){u.callback=null,c=u.priorityLevel;var ce=ie(u.expirationTime<=Y);Y=t.unstable_now(),typeof ce=="function"?u.callback=ce:u===n(l)&&i(l),A(Y)}else i(l);u=n(l)}if(u!==null)var tt=!0;else{var Re=n(d);Re!==null&&mt(S,Re.startTime-Y),tt=!1}return tt}finally{u=null,c=J,h=!1}}var D=!1,x=null,F=-1,y=5,X=-1;function G(){return!(t.unstable_now()-X<y)}function Ee(){if(x!==null){var j=t.unstable_now();X=j;var Y=!0;try{Y=x(!0,j)}finally{Y?re():(D=!1,x=null)}}else D=!1}var re;if(typeof b=="function")re=function(){b(Ee)};else if(typeof MessageChannel<"u"){var be=new MessageChannel,de=be.port2;be.port1.onmessage=Ee,re=function(){de.postMessage(null)}}else re=function(){p(Ee,0)};function xt(j){x=j,D||(D=!0,re())}function mt(j,Y){F=p(function(){j(t.unstable_now())},Y)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(j){j.callback=null},t.unstable_continueExecution=function(){g||h||(g=!0,xt(w))},t.unstable_forceFrameRate=function(j){0>j||125<j?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):y=0<j?Math.floor(1e3/j):5},t.unstable_getCurrentPriorityLevel=function(){return c},t.unstable_getFirstCallbackNode=function(){return n(l)},t.unstable_next=function(j){switch(c){case 1:case 2:case 3:var Y=3;break;default:Y=c}var J=c;c=Y;try{return j()}finally{c=J}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(j,Y){switch(j){case 1:case 2:case 3:case 4:case 5:break;default:j=3}var J=c;c=j;try{return Y()}finally{c=J}},t.unstable_scheduleCallback=function(j,Y,J){var ie=t.unstable_now();switch(typeof J=="object"&&J!==null?(J=J.delay,J=typeof J=="number"&&0<J?ie+J:ie):J=ie,j){case 1:var ce=-1;break;case 2:ce=250;break;case 5:ce=1073741823;break;case 4:ce=1e4;break;default:ce=5e3}return ce=J+ce,j={id:f++,callback:Y,priorityLevel:j,startTime:J,expirationTime:ce,sortIndex:-1},J>ie?(j.sortIndex=J,e(d,j),n(l)===null&&j===n(d)&&(E?(m(F),F=-1):E=!0,mt(S,J-ie))):(j.sortIndex=ce,e(l,j),g||h||(g=!0,xt(w))),j},t.unstable_shouldYield=G,t.unstable_wrapCallback=function(j){var Y=c;return function(){var J=c;c=Y;try{return j.apply(this,arguments)}finally{c=J}}}})(yE);OE.exports=yE;var CA=OE.exports;/**
 * @license React
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var RE=B,sn=CA;function R(t){for(var e="https://reactjs.org/docs/error-decoder.html?invariant="+t,n=1;n<arguments.length;n++)e+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+t+"; visit "+e+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var IE=new Set,Bo={};function Mr(t,e){hs(t,e),hs(t+"Capture",e)}function hs(t,e){for(Bo[t]=e,t=0;t<e.length;t++)IE.add(e[t])}var vi=!(typeof window>"u"||typeof window.document>"u"||typeof window.document.createElement>"u"),zc=Object.prototype.hasOwnProperty,wA=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,nm={},im={};function DA(t){return zc.call(im,t)?!0:zc.call(nm,t)?!1:wA.test(t)?im[t]=!0:(nm[t]=!0,!1)}function xA(t,e,n,i){if(n!==null&&n.type===0)return!1;switch(typeof e){case"function":case"symbol":return!0;case"boolean":return i?!1:n!==null?!n.acceptsBooleans:(t=t.toLowerCase().slice(0,5),t!=="data-"&&t!=="aria-");default:return!1}}function BA(t,e,n,i){if(e===null||typeof e>"u"||xA(t,e,n,i))return!0;if(i)return!1;if(n!==null)switch(n.type){case 3:return!e;case 4:return e===!1;case 5:return isNaN(e);case 6:return isNaN(e)||1>e}return!1}function yt(t,e,n,i,r,s,o){this.acceptsBooleans=e===2||e===3||e===4,this.attributeName=i,this.attributeNamespace=r,this.mustUseProperty=n,this.propertyName=t,this.type=e,this.sanitizeURL=s,this.removeEmptyString=o}var St={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(t){St[t]=new yt(t,0,!1,t,null,!1,!1)});[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(t){var e=t[0];St[e]=new yt(e,1,!1,t[1],null,!1,!1)});["contentEditable","draggable","spellCheck","value"].forEach(function(t){St[t]=new yt(t,2,!1,t.toLowerCase(),null,!1,!1)});["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(t){St[t]=new yt(t,2,!1,t,null,!1,!1)});"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(t){St[t]=new yt(t,3,!1,t.toLowerCase(),null,!1,!1)});["checked","multiple","muted","selected"].forEach(function(t){St[t]=new yt(t,3,!0,t,null,!1,!1)});["capture","download"].forEach(function(t){St[t]=new yt(t,4,!1,t,null,!1,!1)});["cols","rows","size","span"].forEach(function(t){St[t]=new yt(t,6,!1,t,null,!1,!1)});["rowSpan","start"].forEach(function(t){St[t]=new yt(t,5,!1,t.toLowerCase(),null,!1,!1)});var rh=/[\-:]([a-z])/g;function sh(t){return t[1].toUpperCase()}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(t){var e=t.replace(rh,sh);St[e]=new yt(e,1,!1,t,null,!1,!1)});"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(t){var e=t.replace(rh,sh);St[e]=new yt(e,1,!1,t,"http://www.w3.org/1999/xlink",!1,!1)});["xml:base","xml:lang","xml:space"].forEach(function(t){var e=t.replace(rh,sh);St[e]=new yt(e,1,!1,t,"http://www.w3.org/XML/1998/namespace",!1,!1)});["tabIndex","crossOrigin"].forEach(function(t){St[t]=new yt(t,1,!1,t.toLowerCase(),null,!1,!1)});St.xlinkHref=new yt("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1);["src","href","action","formAction"].forEach(function(t){St[t]=new yt(t,1,!1,t.toLowerCase(),null,!0,!0)});function oh(t,e,n,i){var r=St.hasOwnProperty(e)?St[e]:null;(r!==null?r.type!==0:i||!(2<e.length)||e[0]!=="o"&&e[0]!=="O"||e[1]!=="n"&&e[1]!=="N")&&(BA(e,n,r,i)&&(n=null),i||r===null?DA(e)&&(n===null?t.removeAttribute(e):t.setAttribute(e,""+n)):r.mustUseProperty?t[r.propertyName]=n===null?r.type===3?!1:"":n:(e=r.attributeName,i=r.attributeNamespace,n===null?t.removeAttribute(e):(r=r.type,n=r===3||r===4&&n===!0?"":""+n,i?t.setAttributeNS(i,e,n):t.setAttribute(e,n))))}var xi=RE.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,fa=Symbol.for("react.element"),Hr=Symbol.for("react.portal"),Wr=Symbol.for("react.fragment"),ah=Symbol.for("react.strict_mode"),Yc=Symbol.for("react.profiler"),jE=Symbol.for("react.provider"),UE=Symbol.for("react.context"),uh=Symbol.for("react.forward_ref"),Vc=Symbol.for("react.suspense"),qc=Symbol.for("react.suspense_list"),lh=Symbol.for("react.memo"),ki=Symbol.for("react.lazy"),HE=Symbol.for("react.offscreen"),rm=Symbol.iterator;function Xs(t){return t===null||typeof t!="object"?null:(t=rm&&t[rm]||t["@@iterator"],typeof t=="function"?t:null)}var qe=Object.assign,Ql;function no(t){if(Ql===void 0)try{throw Error()}catch(n){var e=n.stack.trim().match(/\n( *(at )?)/);Ql=e&&e[1]||""}return`
`+Ql+t}var Gl=!1;function _l(t,e){if(!t||Gl)return"";Gl=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(e)if(e=function(){throw Error()},Object.defineProperty(e.prototype,"props",{set:function(){throw Error()}}),typeof Reflect=="object"&&Reflect.construct){try{Reflect.construct(e,[])}catch(d){var i=d}Reflect.construct(t,[],e)}else{try{e.call()}catch(d){i=d}t.call(e.prototype)}else{try{throw Error()}catch(d){i=d}t()}}catch(d){if(d&&i&&typeof d.stack=="string"){for(var r=d.stack.split(`
`),s=i.stack.split(`
`),o=r.length-1,a=s.length-1;1<=o&&0<=a&&r[o]!==s[a];)a--;for(;1<=o&&0<=a;o--,a--)if(r[o]!==s[a]){if(o!==1||a!==1)do if(o--,a--,0>a||r[o]!==s[a]){var l=`
`+r[o].replace(" at new "," at ");return t.displayName&&l.includes("<anonymous>")&&(l=l.replace("<anonymous>",t.displayName)),l}while(1<=o&&0<=a);break}}}finally{Gl=!1,Error.prepareStackTrace=n}return(t=t?t.displayName||t.name:"")?no(t):""}function TA(t){switch(t.tag){case 5:return no(t.type);case 16:return no("Lazy");case 13:return no("Suspense");case 19:return no("SuspenseList");case 0:case 2:case 15:return t=_l(t.type,!1),t;case 11:return t=_l(t.type.render,!1),t;case 1:return t=_l(t.type,!0),t;default:return""}}function Jc(t){if(t==null)return null;if(typeof t=="function")return t.displayName||t.name||null;if(typeof t=="string")return t;switch(t){case Wr:return"Fragment";case Hr:return"Portal";case Yc:return"Profiler";case ah:return"StrictMode";case Vc:return"Suspense";case qc:return"SuspenseList"}if(typeof t=="object")switch(t.$$typeof){case UE:return(t.displayName||"Context")+".Consumer";case jE:return(t._context.displayName||"Context")+".Provider";case uh:var e=t.render;return t=t.displayName,t||(t=e.displayName||e.name||"",t=t!==""?"ForwardRef("+t+")":"ForwardRef"),t;case lh:return e=t.displayName||null,e!==null?e:Jc(t.type)||"Memo";case ki:e=t._payload,t=t._init;try{return Jc(t(e))}catch{}}return null}function NA(t){var e=t.type;switch(t.tag){case 24:return"Cache";case 9:return(e.displayName||"Context")+".Consumer";case 10:return(e._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return t=e.render,t=t.displayName||t.name||"",e.displayName||(t!==""?"ForwardRef("+t+")":"ForwardRef");case 7:return"Fragment";case 5:return e;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return Jc(e);case 8:return e===ah?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if(typeof e=="function")return e.displayName||e.name||null;if(typeof e=="string")return e}return null}function Qi(t){switch(typeof t){case"boolean":case"number":case"string":case"undefined":return t;case"object":return t;default:return""}}function WE(t){var e=t.type;return(t=t.nodeName)&&t.toLowerCase()==="input"&&(e==="checkbox"||e==="radio")}function FA(t){var e=WE(t)?"checked":"value",n=Object.getOwnPropertyDescriptor(t.constructor.prototype,e),i=""+t[e];if(!t.hasOwnProperty(e)&&typeof n<"u"&&typeof n.get=="function"&&typeof n.set=="function"){var r=n.get,s=n.set;return Object.defineProperty(t,e,{configurable:!0,get:function(){return r.call(this)},set:function(o){i=""+o,s.call(this,o)}}),Object.defineProperty(t,e,{enumerable:n.enumerable}),{getValue:function(){return i},setValue:function(o){i=""+o},stopTracking:function(){t._valueTracker=null,delete t[e]}}}}function ma(t){t._valueTracker||(t._valueTracker=FA(t))}function XE(t){if(!t)return!1;var e=t._valueTracker;if(!e)return!0;var n=e.getValue(),i="";return t&&(i=WE(t)?t.checked?"true":"false":t.value),t=i,t!==n?(e.setValue(t),!0):!1}function ru(t){if(t=t||(typeof document<"u"?document:void 0),typeof t>"u")return null;try{return t.activeElement||t.body}catch{return t.body}}function Zc(t,e){var n=e.checked;return qe({},e,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:n??t._wrapperState.initialChecked})}function sm(t,e){var n=e.defaultValue==null?"":e.defaultValue,i=e.checked!=null?e.checked:e.defaultChecked;n=Qi(e.value!=null?e.value:n),t._wrapperState={initialChecked:i,initialValue:n,controlled:e.type==="checkbox"||e.type==="radio"?e.checked!=null:e.value!=null}}function zE(t,e){e=e.checked,e!=null&&oh(t,"checked",e,!1)}function Kc(t,e){zE(t,e);var n=Qi(e.value),i=e.type;if(n!=null)i==="number"?(n===0&&t.value===""||t.value!=n)&&(t.value=""+n):t.value!==""+n&&(t.value=""+n);else if(i==="submit"||i==="reset"){t.removeAttribute("value");return}e.hasOwnProperty("value")?Qc(t,e.type,n):e.hasOwnProperty("defaultValue")&&Qc(t,e.type,Qi(e.defaultValue)),e.checked==null&&e.defaultChecked!=null&&(t.defaultChecked=!!e.defaultChecked)}function om(t,e,n){if(e.hasOwnProperty("value")||e.hasOwnProperty("defaultValue")){var i=e.type;if(!(i!=="submit"&&i!=="reset"||e.value!==void 0&&e.value!==null))return;e=""+t._wrapperState.initialValue,n||e===t.value||(t.value=e),t.defaultValue=e}n=t.name,n!==""&&(t.name=""),t.defaultChecked=!!t._wrapperState.initialChecked,n!==""&&(t.name=n)}function Qc(t,e,n){(e!=="number"||ru(t.ownerDocument)!==t)&&(n==null?t.defaultValue=""+t._wrapperState.initialValue:t.defaultValue!==""+n&&(t.defaultValue=""+n))}var io=Array.isArray;function ts(t,e,n,i){if(t=t.options,e){e={};for(var r=0;r<n.length;r++)e["$"+n[r]]=!0;for(n=0;n<t.length;n++)r=e.hasOwnProperty("$"+t[n].value),t[n].selected!==r&&(t[n].selected=r),r&&i&&(t[n].defaultSelected=!0)}else{for(n=""+Qi(n),e=null,r=0;r<t.length;r++){if(t[r].value===n){t[r].selected=!0,i&&(t[r].defaultSelected=!0);return}e!==null||t[r].disabled||(e=t[r])}e!==null&&(e.selected=!0)}}function Gc(t,e){if(e.dangerouslySetInnerHTML!=null)throw Error(R(91));return qe({},e,{value:void 0,defaultValue:void 0,children:""+t._wrapperState.initialValue})}function am(t,e){var n=e.value;if(n==null){if(n=e.children,e=e.defaultValue,n!=null){if(e!=null)throw Error(R(92));if(io(n)){if(1<n.length)throw Error(R(93));n=n[0]}e=n}e==null&&(e=""),n=e}t._wrapperState={initialValue:Qi(n)}}function YE(t,e){var n=Qi(e.value),i=Qi(e.defaultValue);n!=null&&(n=""+n,n!==t.value&&(t.value=n),e.defaultValue==null&&t.defaultValue!==n&&(t.defaultValue=n)),i!=null&&(t.defaultValue=""+i)}function um(t){var e=t.textContent;e===t._wrapperState.initialValue&&e!==""&&e!==null&&(t.value=e)}function VE(t){switch(t){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function _c(t,e){return t==null||t==="http://www.w3.org/1999/xhtml"?VE(e):t==="http://www.w3.org/2000/svg"&&e==="foreignObject"?"http://www.w3.org/1999/xhtml":t}var ga,qE=function(t){return typeof MSApp<"u"&&MSApp.execUnsafeLocalFunction?function(e,n,i,r){MSApp.execUnsafeLocalFunction(function(){return t(e,n,i,r)})}:t}(function(t,e){if(t.namespaceURI!=="http://www.w3.org/2000/svg"||"innerHTML"in t)t.innerHTML=e;else{for(ga=ga||document.createElement("div"),ga.innerHTML="<svg>"+e.valueOf().toString()+"</svg>",e=ga.firstChild;t.firstChild;)t.removeChild(t.firstChild);for(;e.firstChild;)t.appendChild(e.firstChild)}});function To(t,e){if(e){var n=t.firstChild;if(n&&n===t.lastChild&&n.nodeType===3){n.nodeValue=e;return}}t.textContent=e}var ho={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},MA=["Webkit","ms","Moz","O"];Object.keys(ho).forEach(function(t){MA.forEach(function(e){e=e+t.charAt(0).toUpperCase()+t.substring(1),ho[e]=ho[t]})});function JE(t,e,n){return e==null||typeof e=="boolean"||e===""?"":n||typeof e!="number"||e===0||ho.hasOwnProperty(t)&&ho[t]?(""+e).trim():e+"px"}function ZE(t,e){t=t.style;for(var n in e)if(e.hasOwnProperty(n)){var i=n.indexOf("--")===0,r=JE(n,e[n],i);n==="float"&&(n="cssFloat"),i?t.setProperty(n,r):t[n]=r}}var PA=qe({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function $c(t,e){if(e){if(PA[t]&&(e.children!=null||e.dangerouslySetInnerHTML!=null))throw Error(R(137,t));if(e.dangerouslySetInnerHTML!=null){if(e.children!=null)throw Error(R(60));if(typeof e.dangerouslySetInnerHTML!="object"||!("__html"in e.dangerouslySetInnerHTML))throw Error(R(61))}if(e.style!=null&&typeof e.style!="object")throw Error(R(62))}}function ed(t,e){if(t.indexOf("-")===-1)return typeof e.is=="string";switch(t){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var td=null;function ch(t){return t=t.target||t.srcElement||window,t.correspondingUseElement&&(t=t.correspondingUseElement),t.nodeType===3?t.parentNode:t}var nd=null,ns=null,is=null;function lm(t){if(t=Go(t)){if(typeof nd!="function")throw Error(R(280));var e=t.stateNode;e&&(e=Yu(e),nd(t.stateNode,t.type,e))}}function KE(t){ns?is?is.push(t):is=[t]:ns=t}function QE(){if(ns){var t=ns,e=is;if(is=ns=null,lm(t),e)for(t=0;t<e.length;t++)lm(e[t])}}function GE(t,e){return t(e)}function _E(){}var $l=!1;function $E(t,e,n){if($l)return t(e,n);$l=!0;try{return GE(t,e,n)}finally{$l=!1,(ns!==null||is!==null)&&(_E(),QE())}}function No(t,e){var n=t.stateNode;if(n===null)return null;var i=Yu(n);if(i===null)return null;n=i[e];e:switch(e){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(i=!i.disabled)||(t=t.type,i=!(t==="button"||t==="input"||t==="select"||t==="textarea")),t=!i;break e;default:t=!1}if(t)return null;if(n&&typeof n!="function")throw Error(R(231,e,typeof n));return n}var id=!1;if(vi)try{var zs={};Object.defineProperty(zs,"passive",{get:function(){id=!0}}),window.addEventListener("test",zs,zs),window.removeEventListener("test",zs,zs)}catch{id=!1}function kA(t,e,n,i,r,s,o,a,l){var d=Array.prototype.slice.call(arguments,3);try{e.apply(n,d)}catch(f){this.onError(f)}}var fo=!1,su=null,ou=!1,rd=null,LA={onError:function(t){fo=!0,su=t}};function OA(t,e,n,i,r,s,o,a,l){fo=!1,su=null,kA.apply(LA,arguments)}function yA(t,e,n,i,r,s,o,a,l){if(OA.apply(this,arguments),fo){if(fo){var d=su;fo=!1,su=null}else throw Error(R(198));ou||(ou=!0,rd=d)}}function Pr(t){var e=t,n=t;if(t.alternate)for(;e.return;)e=e.return;else{t=e;do e=t,e.flags&4098&&(n=e.return),t=e.return;while(t)}return e.tag===3?n:null}function eb(t){if(t.tag===13){var e=t.memoizedState;if(e===null&&(t=t.alternate,t!==null&&(e=t.memoizedState)),e!==null)return e.dehydrated}return null}function cm(t){if(Pr(t)!==t)throw Error(R(188))}function RA(t){var e=t.alternate;if(!e){if(e=Pr(t),e===null)throw Error(R(188));return e!==t?null:t}for(var n=t,i=e;;){var r=n.return;if(r===null)break;var s=r.alternate;if(s===null){if(i=r.return,i!==null){n=i;continue}break}if(r.child===s.child){for(s=r.child;s;){if(s===n)return cm(r),t;if(s===i)return cm(r),e;s=s.sibling}throw Error(R(188))}if(n.return!==i.return)n=r,i=s;else{for(var o=!1,a=r.child;a;){if(a===n){o=!0,n=r,i=s;break}if(a===i){o=!0,i=r,n=s;break}a=a.sibling}if(!o){for(a=s.child;a;){if(a===n){o=!0,n=s,i=r;break}if(a===i){o=!0,i=s,n=r;break}a=a.sibling}if(!o)throw Error(R(189))}}if(n.alternate!==i)throw Error(R(190))}if(n.tag!==3)throw Error(R(188));return n.stateNode.current===n?t:e}function tb(t){return t=RA(t),t!==null?nb(t):null}function nb(t){if(t.tag===5||t.tag===6)return t;for(t=t.child;t!==null;){var e=nb(t);if(e!==null)return e;t=t.sibling}return null}var ib=sn.unstable_scheduleCallback,dm=sn.unstable_cancelCallback,IA=sn.unstable_shouldYield,jA=sn.unstable_requestPaint,et=sn.unstable_now,UA=sn.unstable_getCurrentPriorityLevel,dh=sn.unstable_ImmediatePriority,rb=sn.unstable_UserBlockingPriority,au=sn.unstable_NormalPriority,HA=sn.unstable_LowPriority,sb=sn.unstable_IdlePriority,Hu=null,ni=null;function WA(t){if(ni&&typeof ni.onCommitFiberRoot=="function")try{ni.onCommitFiberRoot(Hu,t,void 0,(t.current.flags&128)===128)}catch{}}var Yn=Math.clz32?Math.clz32:YA,XA=Math.log,zA=Math.LN2;function YA(t){return t>>>=0,t===0?32:31-(XA(t)/zA|0)|0}var Ea=64,ba=4194304;function ro(t){switch(t&-t){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t&4194240;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return t&130023424;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return t}}function uu(t,e){var n=t.pendingLanes;if(n===0)return 0;var i=0,r=t.suspendedLanes,s=t.pingedLanes,o=n&268435455;if(o!==0){var a=o&~r;a!==0?i=ro(a):(s&=o,s!==0&&(i=ro(s)))}else o=n&~r,o!==0?i=ro(o):s!==0&&(i=ro(s));if(i===0)return 0;if(e!==0&&e!==i&&!(e&r)&&(r=i&-i,s=e&-e,r>=s||r===16&&(s&4194240)!==0))return e;if(i&4&&(i|=n&16),e=t.entangledLanes,e!==0)for(t=t.entanglements,e&=i;0<e;)n=31-Yn(e),r=1<<n,i|=t[n],e&=~r;return i}function VA(t,e){switch(t){case 1:case 2:case 4:return e+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return e+5e3;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return-1;case 134217728:case 268435456:case 536870912:case 1073741824:return-1;default:return-1}}function qA(t,e){for(var n=t.suspendedLanes,i=t.pingedLanes,r=t.expirationTimes,s=t.pendingLanes;0<s;){var o=31-Yn(s),a=1<<o,l=r[o];l===-1?(!(a&n)||a&i)&&(r[o]=VA(a,e)):l<=e&&(t.expiredLanes|=a),s&=~a}}function sd(t){return t=t.pendingLanes&-1073741825,t!==0?t:t&1073741824?1073741824:0}function ob(){var t=Ea;return Ea<<=1,!(Ea&4194240)&&(Ea=64),t}function ec(t){for(var e=[],n=0;31>n;n++)e.push(t);return e}function Ko(t,e,n){t.pendingLanes|=e,e!==536870912&&(t.suspendedLanes=0,t.pingedLanes=0),t=t.eventTimes,e=31-Yn(e),t[e]=n}function JA(t,e){var n=t.pendingLanes&~e;t.pendingLanes=e,t.suspendedLanes=0,t.pingedLanes=0,t.expiredLanes&=e,t.mutableReadLanes&=e,t.entangledLanes&=e,e=t.entanglements;var i=t.eventTimes;for(t=t.expirationTimes;0<n;){var r=31-Yn(n),s=1<<r;e[r]=0,i[r]=-1,t[r]=-1,n&=~s}}function hh(t,e){var n=t.entangledLanes|=e;for(t=t.entanglements;n;){var i=31-Yn(n),r=1<<i;r&e|t[i]&e&&(t[i]|=e),n&=~r}}var xe=0;function ab(t){return t&=-t,1<t?4<t?t&268435455?16:536870912:4:1}var ub,fh,lb,cb,db,od=!1,pa=[],Wi=null,Xi=null,zi=null,Fo=new Map,Mo=new Map,Oi=[],ZA="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function hm(t,e){switch(t){case"focusin":case"focusout":Wi=null;break;case"dragenter":case"dragleave":Xi=null;break;case"mouseover":case"mouseout":zi=null;break;case"pointerover":case"pointerout":Fo.delete(e.pointerId);break;case"gotpointercapture":case"lostpointercapture":Mo.delete(e.pointerId)}}function Ys(t,e,n,i,r,s){return t===null||t.nativeEvent!==s?(t={blockedOn:e,domEventName:n,eventSystemFlags:i,nativeEvent:s,targetContainers:[r]},e!==null&&(e=Go(e),e!==null&&fh(e)),t):(t.eventSystemFlags|=i,e=t.targetContainers,r!==null&&e.indexOf(r)===-1&&e.push(r),t)}function KA(t,e,n,i,r){switch(e){case"focusin":return Wi=Ys(Wi,t,e,n,i,r),!0;case"dragenter":return Xi=Ys(Xi,t,e,n,i,r),!0;case"mouseover":return zi=Ys(zi,t,e,n,i,r),!0;case"pointerover":var s=r.pointerId;return Fo.set(s,Ys(Fo.get(s)||null,t,e,n,i,r)),!0;case"gotpointercapture":return s=r.pointerId,Mo.set(s,Ys(Mo.get(s)||null,t,e,n,i,r)),!0}return!1}function hb(t){var e=lr(t.target);if(e!==null){var n=Pr(e);if(n!==null){if(e=n.tag,e===13){if(e=eb(n),e!==null){t.blockedOn=e,db(t.priority,function(){lb(n)});return}}else if(e===3&&n.stateNode.current.memoizedState.isDehydrated){t.blockedOn=n.tag===3?n.stateNode.containerInfo:null;return}}}t.blockedOn=null}function Ua(t){if(t.blockedOn!==null)return!1;for(var e=t.targetContainers;0<e.length;){var n=ad(t.domEventName,t.eventSystemFlags,e[0],t.nativeEvent);if(n===null){n=t.nativeEvent;var i=new n.constructor(n.type,n);td=i,n.target.dispatchEvent(i),td=null}else return e=Go(n),e!==null&&fh(e),t.blockedOn=n,!1;e.shift()}return!0}function fm(t,e,n){Ua(t)&&n.delete(e)}function QA(){od=!1,Wi!==null&&Ua(Wi)&&(Wi=null),Xi!==null&&Ua(Xi)&&(Xi=null),zi!==null&&Ua(zi)&&(zi=null),Fo.forEach(fm),Mo.forEach(fm)}function Vs(t,e){t.blockedOn===e&&(t.blockedOn=null,od||(od=!0,sn.unstable_scheduleCallback(sn.unstable_NormalPriority,QA)))}function Po(t){function e(r){return Vs(r,t)}if(0<pa.length){Vs(pa[0],t);for(var n=1;n<pa.length;n++){var i=pa[n];i.blockedOn===t&&(i.blockedOn=null)}}for(Wi!==null&&Vs(Wi,t),Xi!==null&&Vs(Xi,t),zi!==null&&Vs(zi,t),Fo.forEach(e),Mo.forEach(e),n=0;n<Oi.length;n++)i=Oi[n],i.blockedOn===t&&(i.blockedOn=null);for(;0<Oi.length&&(n=Oi[0],n.blockedOn===null);)hb(n),n.blockedOn===null&&Oi.shift()}var rs=xi.ReactCurrentBatchConfig,lu=!0;function GA(t,e,n,i){var r=xe,s=rs.transition;rs.transition=null;try{xe=1,mh(t,e,n,i)}finally{xe=r,rs.transition=s}}function _A(t,e,n,i){var r=xe,s=rs.transition;rs.transition=null;try{xe=4,mh(t,e,n,i)}finally{xe=r,rs.transition=s}}function mh(t,e,n,i){if(lu){var r=ad(t,e,n,i);if(r===null)cc(t,e,i,cu,n),hm(t,i);else if(KA(r,t,e,n,i))i.stopPropagation();else if(hm(t,i),e&4&&-1<ZA.indexOf(t)){for(;r!==null;){var s=Go(r);if(s!==null&&ub(s),s=ad(t,e,n,i),s===null&&cc(t,e,i,cu,n),s===r)break;r=s}r!==null&&i.stopPropagation()}else cc(t,e,i,null,n)}}var cu=null;function ad(t,e,n,i){if(cu=null,t=ch(i),t=lr(t),t!==null)if(e=Pr(t),e===null)t=null;else if(n=e.tag,n===13){if(t=eb(e),t!==null)return t;t=null}else if(n===3){if(e.stateNode.current.memoizedState.isDehydrated)return e.tag===3?e.stateNode.containerInfo:null;t=null}else e!==t&&(t=null);return cu=t,null}function fb(t){switch(t){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(UA()){case dh:return 1;case rb:return 4;case au:case HA:return 16;case sb:return 536870912;default:return 16}default:return 16}}var Ii=null,gh=null,Ha=null;function mb(){if(Ha)return Ha;var t,e=gh,n=e.length,i,r="value"in Ii?Ii.value:Ii.textContent,s=r.length;for(t=0;t<n&&e[t]===r[t];t++);var o=n-t;for(i=1;i<=o&&e[n-i]===r[s-i];i++);return Ha=r.slice(t,1<i?1-i:void 0)}function Wa(t){var e=t.keyCode;return"charCode"in t?(t=t.charCode,t===0&&e===13&&(t=13)):t=e,t===10&&(t=13),32<=t||t===13?t:0}function Sa(){return!0}function mm(){return!1}function an(t){function e(n,i,r,s,o){this._reactName=n,this._targetInst=r,this.type=i,this.nativeEvent=s,this.target=o,this.currentTarget=null;for(var a in t)t.hasOwnProperty(a)&&(n=t[a],this[a]=n?n(s):s[a]);return this.isDefaultPrevented=(s.defaultPrevented!=null?s.defaultPrevented:s.returnValue===!1)?Sa:mm,this.isPropagationStopped=mm,this}return qe(e.prototype,{preventDefault:function(){this.defaultPrevented=!0;var n=this.nativeEvent;n&&(n.preventDefault?n.preventDefault():typeof n.returnValue!="unknown"&&(n.returnValue=!1),this.isDefaultPrevented=Sa)},stopPropagation:function(){var n=this.nativeEvent;n&&(n.stopPropagation?n.stopPropagation():typeof n.cancelBubble!="unknown"&&(n.cancelBubble=!0),this.isPropagationStopped=Sa)},persist:function(){},isPersistent:Sa}),e}var Ts={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(t){return t.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},Eh=an(Ts),Qo=qe({},Ts,{view:0,detail:0}),$A=an(Qo),tc,nc,qs,Wu=qe({},Qo,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:bh,button:0,buttons:0,relatedTarget:function(t){return t.relatedTarget===void 0?t.fromElement===t.srcElement?t.toElement:t.fromElement:t.relatedTarget},movementX:function(t){return"movementX"in t?t.movementX:(t!==qs&&(qs&&t.type==="mousemove"?(tc=t.screenX-qs.screenX,nc=t.screenY-qs.screenY):nc=tc=0,qs=t),tc)},movementY:function(t){return"movementY"in t?t.movementY:nc}}),gm=an(Wu),ev=qe({},Wu,{dataTransfer:0}),tv=an(ev),nv=qe({},Qo,{relatedTarget:0}),ic=an(nv),iv=qe({},Ts,{animationName:0,elapsedTime:0,pseudoElement:0}),rv=an(iv),sv=qe({},Ts,{clipboardData:function(t){return"clipboardData"in t?t.clipboardData:window.clipboardData}}),ov=an(sv),av=qe({},Ts,{data:0}),Em=an(av),uv={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},lv={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},cv={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function dv(t){var e=this.nativeEvent;return e.getModifierState?e.getModifierState(t):(t=cv[t])?!!e[t]:!1}function bh(){return dv}var hv=qe({},Qo,{key:function(t){if(t.key){var e=uv[t.key]||t.key;if(e!=="Unidentified")return e}return t.type==="keypress"?(t=Wa(t),t===13?"Enter":String.fromCharCode(t)):t.type==="keydown"||t.type==="keyup"?lv[t.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:bh,charCode:function(t){return t.type==="keypress"?Wa(t):0},keyCode:function(t){return t.type==="keydown"||t.type==="keyup"?t.keyCode:0},which:function(t){return t.type==="keypress"?Wa(t):t.type==="keydown"||t.type==="keyup"?t.keyCode:0}}),fv=an(hv),mv=qe({},Wu,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0}),bm=an(mv),gv=qe({},Qo,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:bh}),Ev=an(gv),bv=qe({},Ts,{propertyName:0,elapsedTime:0,pseudoElement:0}),pv=an(bv),Sv=qe({},Wu,{deltaX:function(t){return"deltaX"in t?t.deltaX:"wheelDeltaX"in t?-t.wheelDeltaX:0},deltaY:function(t){return"deltaY"in t?t.deltaY:"wheelDeltaY"in t?-t.wheelDeltaY:"wheelDelta"in t?-t.wheelDelta:0},deltaZ:0,deltaMode:0}),Av=an(Sv),vv=[9,13,27,32],ph=vi&&"CompositionEvent"in window,mo=null;vi&&"documentMode"in document&&(mo=document.documentMode);var Cv=vi&&"TextEvent"in window&&!mo,gb=vi&&(!ph||mo&&8<mo&&11>=mo),pm=String.fromCharCode(32),Sm=!1;function Eb(t,e){switch(t){case"keyup":return vv.indexOf(e.keyCode)!==-1;case"keydown":return e.keyCode!==229;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function bb(t){return t=t.detail,typeof t=="object"&&"data"in t?t.data:null}var Xr=!1;function wv(t,e){switch(t){case"compositionend":return bb(e);case"keypress":return e.which!==32?null:(Sm=!0,pm);case"textInput":return t=e.data,t===pm&&Sm?null:t;default:return null}}function Dv(t,e){if(Xr)return t==="compositionend"||!ph&&Eb(t,e)?(t=mb(),Ha=gh=Ii=null,Xr=!1,t):null;switch(t){case"paste":return null;case"keypress":if(!(e.ctrlKey||e.altKey||e.metaKey)||e.ctrlKey&&e.altKey){if(e.char&&1<e.char.length)return e.char;if(e.which)return String.fromCharCode(e.which)}return null;case"compositionend":return gb&&e.locale!=="ko"?null:e.data;default:return null}}var xv={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Am(t){var e=t&&t.nodeName&&t.nodeName.toLowerCase();return e==="input"?!!xv[t.type]:e==="textarea"}function pb(t,e,n,i){KE(i),e=du(e,"onChange"),0<e.length&&(n=new Eh("onChange","change",null,n,i),t.push({event:n,listeners:e}))}var go=null,ko=null;function Bv(t){Fb(t,0)}function Xu(t){var e=Vr(t);if(XE(e))return t}function Tv(t,e){if(t==="change")return e}var Sb=!1;if(vi){var rc;if(vi){var sc="oninput"in document;if(!sc){var vm=document.createElement("div");vm.setAttribute("oninput","return;"),sc=typeof vm.oninput=="function"}rc=sc}else rc=!1;Sb=rc&&(!document.documentMode||9<document.documentMode)}function Cm(){go&&(go.detachEvent("onpropertychange",Ab),ko=go=null)}function Ab(t){if(t.propertyName==="value"&&Xu(ko)){var e=[];pb(e,ko,t,ch(t)),$E(Bv,e)}}function Nv(t,e,n){t==="focusin"?(Cm(),go=e,ko=n,go.attachEvent("onpropertychange",Ab)):t==="focusout"&&Cm()}function Fv(t){if(t==="selectionchange"||t==="keyup"||t==="keydown")return Xu(ko)}function Mv(t,e){if(t==="click")return Xu(e)}function Pv(t,e){if(t==="input"||t==="change")return Xu(e)}function kv(t,e){return t===e&&(t!==0||1/t===1/e)||t!==t&&e!==e}var Jn=typeof Object.is=="function"?Object.is:kv;function Lo(t,e){if(Jn(t,e))return!0;if(typeof t!="object"||t===null||typeof e!="object"||e===null)return!1;var n=Object.keys(t),i=Object.keys(e);if(n.length!==i.length)return!1;for(i=0;i<n.length;i++){var r=n[i];if(!zc.call(e,r)||!Jn(t[r],e[r]))return!1}return!0}function wm(t){for(;t&&t.firstChild;)t=t.firstChild;return t}function Dm(t,e){var n=wm(t);t=0;for(var i;n;){if(n.nodeType===3){if(i=t+n.textContent.length,t<=e&&i>=e)return{node:n,offset:e-t};t=i}e:{for(;n;){if(n.nextSibling){n=n.nextSibling;break e}n=n.parentNode}n=void 0}n=wm(n)}}function vb(t,e){return t&&e?t===e?!0:t&&t.nodeType===3?!1:e&&e.nodeType===3?vb(t,e.parentNode):"contains"in t?t.contains(e):t.compareDocumentPosition?!!(t.compareDocumentPosition(e)&16):!1:!1}function Cb(){for(var t=window,e=ru();e instanceof t.HTMLIFrameElement;){try{var n=typeof e.contentWindow.location.href=="string"}catch{n=!1}if(n)t=e.contentWindow;else break;e=ru(t.document)}return e}function Sh(t){var e=t&&t.nodeName&&t.nodeName.toLowerCase();return e&&(e==="input"&&(t.type==="text"||t.type==="search"||t.type==="tel"||t.type==="url"||t.type==="password")||e==="textarea"||t.contentEditable==="true")}function Lv(t){var e=Cb(),n=t.focusedElem,i=t.selectionRange;if(e!==n&&n&&n.ownerDocument&&vb(n.ownerDocument.documentElement,n)){if(i!==null&&Sh(n)){if(e=i.start,t=i.end,t===void 0&&(t=e),"selectionStart"in n)n.selectionStart=e,n.selectionEnd=Math.min(t,n.value.length);else if(t=(e=n.ownerDocument||document)&&e.defaultView||window,t.getSelection){t=t.getSelection();var r=n.textContent.length,s=Math.min(i.start,r);i=i.end===void 0?s:Math.min(i.end,r),!t.extend&&s>i&&(r=i,i=s,s=r),r=Dm(n,s);var o=Dm(n,i);r&&o&&(t.rangeCount!==1||t.anchorNode!==r.node||t.anchorOffset!==r.offset||t.focusNode!==o.node||t.focusOffset!==o.offset)&&(e=e.createRange(),e.setStart(r.node,r.offset),t.removeAllRanges(),s>i?(t.addRange(e),t.extend(o.node,o.offset)):(e.setEnd(o.node,o.offset),t.addRange(e)))}}for(e=[],t=n;t=t.parentNode;)t.nodeType===1&&e.push({element:t,left:t.scrollLeft,top:t.scrollTop});for(typeof n.focus=="function"&&n.focus(),n=0;n<e.length;n++)t=e[n],t.element.scrollLeft=t.left,t.element.scrollTop=t.top}}var Ov=vi&&"documentMode"in document&&11>=document.documentMode,zr=null,ud=null,Eo=null,ld=!1;function xm(t,e,n){var i=n.window===n?n.document:n.nodeType===9?n:n.ownerDocument;ld||zr==null||zr!==ru(i)||(i=zr,"selectionStart"in i&&Sh(i)?i={start:i.selectionStart,end:i.selectionEnd}:(i=(i.ownerDocument&&i.ownerDocument.defaultView||window).getSelection(),i={anchorNode:i.anchorNode,anchorOffset:i.anchorOffset,focusNode:i.focusNode,focusOffset:i.focusOffset}),Eo&&Lo(Eo,i)||(Eo=i,i=du(ud,"onSelect"),0<i.length&&(e=new Eh("onSelect","select",null,e,n),t.push({event:e,listeners:i}),e.target=zr)))}function Aa(t,e){var n={};return n[t.toLowerCase()]=e.toLowerCase(),n["Webkit"+t]="webkit"+e,n["Moz"+t]="moz"+e,n}var Yr={animationend:Aa("Animation","AnimationEnd"),animationiteration:Aa("Animation","AnimationIteration"),animationstart:Aa("Animation","AnimationStart"),transitionend:Aa("Transition","TransitionEnd")},oc={},wb={};vi&&(wb=document.createElement("div").style,"AnimationEvent"in window||(delete Yr.animationend.animation,delete Yr.animationiteration.animation,delete Yr.animationstart.animation),"TransitionEvent"in window||delete Yr.transitionend.transition);function zu(t){if(oc[t])return oc[t];if(!Yr[t])return t;var e=Yr[t],n;for(n in e)if(e.hasOwnProperty(n)&&n in wb)return oc[t]=e[n];return t}var Db=zu("animationend"),xb=zu("animationiteration"),Bb=zu("animationstart"),Tb=zu("transitionend"),Nb=new Map,Bm="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function tr(t,e){Nb.set(t,e),Mr(e,[t])}for(var ac=0;ac<Bm.length;ac++){var uc=Bm[ac],yv=uc.toLowerCase(),Rv=uc[0].toUpperCase()+uc.slice(1);tr(yv,"on"+Rv)}tr(Db,"onAnimationEnd");tr(xb,"onAnimationIteration");tr(Bb,"onAnimationStart");tr("dblclick","onDoubleClick");tr("focusin","onFocus");tr("focusout","onBlur");tr(Tb,"onTransitionEnd");hs("onMouseEnter",["mouseout","mouseover"]);hs("onMouseLeave",["mouseout","mouseover"]);hs("onPointerEnter",["pointerout","pointerover"]);hs("onPointerLeave",["pointerout","pointerover"]);Mr("onChange","change click focusin focusout input keydown keyup selectionchange".split(" "));Mr("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));Mr("onBeforeInput",["compositionend","keypress","textInput","paste"]);Mr("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" "));Mr("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" "));Mr("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var so="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Iv=new Set("cancel close invalid load scroll toggle".split(" ").concat(so));function Tm(t,e,n){var i=t.type||"unknown-event";t.currentTarget=n,yA(i,e,void 0,t),t.currentTarget=null}function Fb(t,e){e=(e&4)!==0;for(var n=0;n<t.length;n++){var i=t[n],r=i.event;i=i.listeners;e:{var s=void 0;if(e)for(var o=i.length-1;0<=o;o--){var a=i[o],l=a.instance,d=a.currentTarget;if(a=a.listener,l!==s&&r.isPropagationStopped())break e;Tm(r,a,d),s=l}else for(o=0;o<i.length;o++){if(a=i[o],l=a.instance,d=a.currentTarget,a=a.listener,l!==s&&r.isPropagationStopped())break e;Tm(r,a,d),s=l}}}if(ou)throw t=rd,ou=!1,rd=null,t}function Ie(t,e){var n=e[md];n===void 0&&(n=e[md]=new Set);var i=t+"__bubble";n.has(i)||(Mb(e,t,2,!1),n.add(i))}function lc(t,e,n){var i=0;e&&(i|=4),Mb(n,t,i,e)}var va="_reactListening"+Math.random().toString(36).slice(2);function Oo(t){if(!t[va]){t[va]=!0,IE.forEach(function(n){n!=="selectionchange"&&(Iv.has(n)||lc(n,!1,t),lc(n,!0,t))});var e=t.nodeType===9?t:t.ownerDocument;e===null||e[va]||(e[va]=!0,lc("selectionchange",!1,e))}}function Mb(t,e,n,i){switch(fb(e)){case 1:var r=GA;break;case 4:r=_A;break;default:r=mh}n=r.bind(null,e,n,t),r=void 0,!id||e!=="touchstart"&&e!=="touchmove"&&e!=="wheel"||(r=!0),i?r!==void 0?t.addEventListener(e,n,{capture:!0,passive:r}):t.addEventListener(e,n,!0):r!==void 0?t.addEventListener(e,n,{passive:r}):t.addEventListener(e,n,!1)}function cc(t,e,n,i,r){var s=i;if(!(e&1)&&!(e&2)&&i!==null)e:for(;;){if(i===null)return;var o=i.tag;if(o===3||o===4){var a=i.stateNode.containerInfo;if(a===r||a.nodeType===8&&a.parentNode===r)break;if(o===4)for(o=i.return;o!==null;){var l=o.tag;if((l===3||l===4)&&(l=o.stateNode.containerInfo,l===r||l.nodeType===8&&l.parentNode===r))return;o=o.return}for(;a!==null;){if(o=lr(a),o===null)return;if(l=o.tag,l===5||l===6){i=s=o;continue e}a=a.parentNode}}i=i.return}$E(function(){var d=s,f=ch(n),u=[];e:{var c=Nb.get(t);if(c!==void 0){var h=Eh,g=t;switch(t){case"keypress":if(Wa(n)===0)break e;case"keydown":case"keyup":h=fv;break;case"focusin":g="focus",h=ic;break;case"focusout":g="blur",h=ic;break;case"beforeblur":case"afterblur":h=ic;break;case"click":if(n.button===2)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":h=gm;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":h=tv;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":h=Ev;break;case Db:case xb:case Bb:h=rv;break;case Tb:h=pv;break;case"scroll":h=$A;break;case"wheel":h=Av;break;case"copy":case"cut":case"paste":h=ov;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":h=bm}var E=(e&4)!==0,p=!E&&t==="scroll",m=E?c!==null?c+"Capture":null:c;E=[];for(var b=d,A;b!==null;){A=b;var S=A.stateNode;if(A.tag===5&&S!==null&&(A=S,m!==null&&(S=No(b,m),S!=null&&E.push(yo(b,S,A)))),p)break;b=b.return}0<E.length&&(c=new h(c,g,null,n,f),u.push({event:c,listeners:E}))}}if(!(e&7)){e:{if(c=t==="mouseover"||t==="pointerover",h=t==="mouseout"||t==="pointerout",c&&n!==td&&(g=n.relatedTarget||n.fromElement)&&(lr(g)||g[Ci]))break e;if((h||c)&&(c=f.window===f?f:(c=f.ownerDocument)?c.defaultView||c.parentWindow:window,h?(g=n.relatedTarget||n.toElement,h=d,g=g?lr(g):null,g!==null&&(p=Pr(g),g!==p||g.tag!==5&&g.tag!==6)&&(g=null)):(h=null,g=d),h!==g)){if(E=gm,S="onMouseLeave",m="onMouseEnter",b="mouse",(t==="pointerout"||t==="pointerover")&&(E=bm,S="onPointerLeave",m="onPointerEnter",b="pointer"),p=h==null?c:Vr(h),A=g==null?c:Vr(g),c=new E(S,b+"leave",h,n,f),c.target=p,c.relatedTarget=A,S=null,lr(f)===d&&(E=new E(m,b+"enter",g,n,f),E.target=A,E.relatedTarget=p,S=E),p=S,h&&g)t:{for(E=h,m=g,b=0,A=E;A;A=Ir(A))b++;for(A=0,S=m;S;S=Ir(S))A++;for(;0<b-A;)E=Ir(E),b--;for(;0<A-b;)m=Ir(m),A--;for(;b--;){if(E===m||m!==null&&E===m.alternate)break t;E=Ir(E),m=Ir(m)}E=null}else E=null;h!==null&&Nm(u,c,h,E,!1),g!==null&&p!==null&&Nm(u,p,g,E,!0)}}e:{if(c=d?Vr(d):window,h=c.nodeName&&c.nodeName.toLowerCase(),h==="select"||h==="input"&&c.type==="file")var w=Tv;else if(Am(c))if(Sb)w=Pv;else{w=Fv;var D=Nv}else(h=c.nodeName)&&h.toLowerCase()==="input"&&(c.type==="checkbox"||c.type==="radio")&&(w=Mv);if(w&&(w=w(t,d))){pb(u,w,n,f);break e}D&&D(t,c,d),t==="focusout"&&(D=c._wrapperState)&&D.controlled&&c.type==="number"&&Qc(c,"number",c.value)}switch(D=d?Vr(d):window,t){case"focusin":(Am(D)||D.contentEditable==="true")&&(zr=D,ud=d,Eo=null);break;case"focusout":Eo=ud=zr=null;break;case"mousedown":ld=!0;break;case"contextmenu":case"mouseup":case"dragend":ld=!1,xm(u,n,f);break;case"selectionchange":if(Ov)break;case"keydown":case"keyup":xm(u,n,f)}var x;if(ph)e:{switch(t){case"compositionstart":var F="onCompositionStart";break e;case"compositionend":F="onCompositionEnd";break e;case"compositionupdate":F="onCompositionUpdate";break e}F=void 0}else Xr?Eb(t,n)&&(F="onCompositionEnd"):t==="keydown"&&n.keyCode===229&&(F="onCompositionStart");F&&(gb&&n.locale!=="ko"&&(Xr||F!=="onCompositionStart"?F==="onCompositionEnd"&&Xr&&(x=mb()):(Ii=f,gh="value"in Ii?Ii.value:Ii.textContent,Xr=!0)),D=du(d,F),0<D.length&&(F=new Em(F,t,null,n,f),u.push({event:F,listeners:D}),x?F.data=x:(x=bb(n),x!==null&&(F.data=x)))),(x=Cv?wv(t,n):Dv(t,n))&&(d=du(d,"onBeforeInput"),0<d.length&&(f=new Em("onBeforeInput","beforeinput",null,n,f),u.push({event:f,listeners:d}),f.data=x))}Fb(u,e)})}function yo(t,e,n){return{instance:t,listener:e,currentTarget:n}}function du(t,e){for(var n=e+"Capture",i=[];t!==null;){var r=t,s=r.stateNode;r.tag===5&&s!==null&&(r=s,s=No(t,n),s!=null&&i.unshift(yo(t,s,r)),s=No(t,e),s!=null&&i.push(yo(t,s,r))),t=t.return}return i}function Ir(t){if(t===null)return null;do t=t.return;while(t&&t.tag!==5);return t||null}function Nm(t,e,n,i,r){for(var s=e._reactName,o=[];n!==null&&n!==i;){var a=n,l=a.alternate,d=a.stateNode;if(l!==null&&l===i)break;a.tag===5&&d!==null&&(a=d,r?(l=No(n,s),l!=null&&o.unshift(yo(n,l,a))):r||(l=No(n,s),l!=null&&o.push(yo(n,l,a)))),n=n.return}o.length!==0&&t.push({event:e,listeners:o})}var jv=/\r\n?/g,Uv=/\u0000|\uFFFD/g;function Fm(t){return(typeof t=="string"?t:""+t).replace(jv,`
`).replace(Uv,"")}function Ca(t,e,n){if(e=Fm(e),Fm(t)!==e&&n)throw Error(R(425))}function hu(){}var cd=null,dd=null;function hd(t,e){return t==="textarea"||t==="noscript"||typeof e.children=="string"||typeof e.children=="number"||typeof e.dangerouslySetInnerHTML=="object"&&e.dangerouslySetInnerHTML!==null&&e.dangerouslySetInnerHTML.__html!=null}var fd=typeof setTimeout=="function"?setTimeout:void 0,Hv=typeof clearTimeout=="function"?clearTimeout:void 0,Mm=typeof Promise=="function"?Promise:void 0,Wv=typeof queueMicrotask=="function"?queueMicrotask:typeof Mm<"u"?function(t){return Mm.resolve(null).then(t).catch(Xv)}:fd;function Xv(t){setTimeout(function(){throw t})}function dc(t,e){var n=e,i=0;do{var r=n.nextSibling;if(t.removeChild(n),r&&r.nodeType===8)if(n=r.data,n==="/$"){if(i===0){t.removeChild(r),Po(e);return}i--}else n!=="$"&&n!=="$?"&&n!=="$!"||i++;n=r}while(n);Po(e)}function Yi(t){for(;t!=null;t=t.nextSibling){var e=t.nodeType;if(e===1||e===3)break;if(e===8){if(e=t.data,e==="$"||e==="$!"||e==="$?")break;if(e==="/$")return null}}return t}function Pm(t){t=t.previousSibling;for(var e=0;t;){if(t.nodeType===8){var n=t.data;if(n==="$"||n==="$!"||n==="$?"){if(e===0)return t;e--}else n==="/$"&&e++}t=t.previousSibling}return null}var Ns=Math.random().toString(36).slice(2),ti="__reactFiber$"+Ns,Ro="__reactProps$"+Ns,Ci="__reactContainer$"+Ns,md="__reactEvents$"+Ns,zv="__reactListeners$"+Ns,Yv="__reactHandles$"+Ns;function lr(t){var e=t[ti];if(e)return e;for(var n=t.parentNode;n;){if(e=n[Ci]||n[ti]){if(n=e.alternate,e.child!==null||n!==null&&n.child!==null)for(t=Pm(t);t!==null;){if(n=t[ti])return n;t=Pm(t)}return e}t=n,n=t.parentNode}return null}function Go(t){return t=t[ti]||t[Ci],!t||t.tag!==5&&t.tag!==6&&t.tag!==13&&t.tag!==3?null:t}function Vr(t){if(t.tag===5||t.tag===6)return t.stateNode;throw Error(R(33))}function Yu(t){return t[Ro]||null}var gd=[],qr=-1;function nr(t){return{current:t}}function Ue(t){0>qr||(t.current=gd[qr],gd[qr]=null,qr--)}function ye(t,e){qr++,gd[qr]=t.current,t.current=e}var Gi={},Dt=nr(Gi),Vt=nr(!1),pr=Gi;function fs(t,e){var n=t.type.contextTypes;if(!n)return Gi;var i=t.stateNode;if(i&&i.__reactInternalMemoizedUnmaskedChildContext===e)return i.__reactInternalMemoizedMaskedChildContext;var r={},s;for(s in n)r[s]=e[s];return i&&(t=t.stateNode,t.__reactInternalMemoizedUnmaskedChildContext=e,t.__reactInternalMemoizedMaskedChildContext=r),r}function qt(t){return t=t.childContextTypes,t!=null}function fu(){Ue(Vt),Ue(Dt)}function km(t,e,n){if(Dt.current!==Gi)throw Error(R(168));ye(Dt,e),ye(Vt,n)}function Pb(t,e,n){var i=t.stateNode;if(e=e.childContextTypes,typeof i.getChildContext!="function")return n;i=i.getChildContext();for(var r in i)if(!(r in e))throw Error(R(108,NA(t)||"Unknown",r));return qe({},n,i)}function mu(t){return t=(t=t.stateNode)&&t.__reactInternalMemoizedMergedChildContext||Gi,pr=Dt.current,ye(Dt,t),ye(Vt,Vt.current),!0}function Lm(t,e,n){var i=t.stateNode;if(!i)throw Error(R(169));n?(t=Pb(t,e,pr),i.__reactInternalMemoizedMergedChildContext=t,Ue(Vt),Ue(Dt),ye(Dt,t)):Ue(Vt),ye(Vt,n)}var fi=null,Vu=!1,hc=!1;function kb(t){fi===null?fi=[t]:fi.push(t)}function Vv(t){Vu=!0,kb(t)}function ir(){if(!hc&&fi!==null){hc=!0;var t=0,e=xe;try{var n=fi;for(xe=1;t<n.length;t++){var i=n[t];do i=i(!0);while(i!==null)}fi=null,Vu=!1}catch(r){throw fi!==null&&(fi=fi.slice(t+1)),ib(dh,ir),r}finally{xe=e,hc=!1}}return null}var Jr=[],Zr=0,gu=null,Eu=0,gn=[],En=0,Sr=null,gi=1,Ei="";function or(t,e){Jr[Zr++]=Eu,Jr[Zr++]=gu,gu=t,Eu=e}function Lb(t,e,n){gn[En++]=gi,gn[En++]=Ei,gn[En++]=Sr,Sr=t;var i=gi;t=Ei;var r=32-Yn(i)-1;i&=~(1<<r),n+=1;var s=32-Yn(e)+r;if(30<s){var o=r-r%5;s=(i&(1<<o)-1).toString(32),i>>=o,r-=o,gi=1<<32-Yn(e)+r|n<<r|i,Ei=s+t}else gi=1<<s|n<<r|i,Ei=t}function Ah(t){t.return!==null&&(or(t,1),Lb(t,1,0))}function vh(t){for(;t===gu;)gu=Jr[--Zr],Jr[Zr]=null,Eu=Jr[--Zr],Jr[Zr]=null;for(;t===Sr;)Sr=gn[--En],gn[En]=null,Ei=gn[--En],gn[En]=null,gi=gn[--En],gn[En]=null}var rn=null,tn=null,We=!1,Hn=null;function Ob(t,e){var n=An(5,null,null,0);n.elementType="DELETED",n.stateNode=e,n.return=t,e=t.deletions,e===null?(t.deletions=[n],t.flags|=16):e.push(n)}function Om(t,e){switch(t.tag){case 5:var n=t.type;return e=e.nodeType!==1||n.toLowerCase()!==e.nodeName.toLowerCase()?null:e,e!==null?(t.stateNode=e,rn=t,tn=Yi(e.firstChild),!0):!1;case 6:return e=t.pendingProps===""||e.nodeType!==3?null:e,e!==null?(t.stateNode=e,rn=t,tn=null,!0):!1;case 13:return e=e.nodeType!==8?null:e,e!==null?(n=Sr!==null?{id:gi,overflow:Ei}:null,t.memoizedState={dehydrated:e,treeContext:n,retryLane:1073741824},n=An(18,null,null,0),n.stateNode=e,n.return=t,t.child=n,rn=t,tn=null,!0):!1;default:return!1}}function Ed(t){return(t.mode&1)!==0&&(t.flags&128)===0}function bd(t){if(We){var e=tn;if(e){var n=e;if(!Om(t,e)){if(Ed(t))throw Error(R(418));e=Yi(n.nextSibling);var i=rn;e&&Om(t,e)?Ob(i,n):(t.flags=t.flags&-4097|2,We=!1,rn=t)}}else{if(Ed(t))throw Error(R(418));t.flags=t.flags&-4097|2,We=!1,rn=t}}}function ym(t){for(t=t.return;t!==null&&t.tag!==5&&t.tag!==3&&t.tag!==13;)t=t.return;rn=t}function wa(t){if(t!==rn)return!1;if(!We)return ym(t),We=!0,!1;var e;if((e=t.tag!==3)&&!(e=t.tag!==5)&&(e=t.type,e=e!=="head"&&e!=="body"&&!hd(t.type,t.memoizedProps)),e&&(e=tn)){if(Ed(t))throw yb(),Error(R(418));for(;e;)Ob(t,e),e=Yi(e.nextSibling)}if(ym(t),t.tag===13){if(t=t.memoizedState,t=t!==null?t.dehydrated:null,!t)throw Error(R(317));e:{for(t=t.nextSibling,e=0;t;){if(t.nodeType===8){var n=t.data;if(n==="/$"){if(e===0){tn=Yi(t.nextSibling);break e}e--}else n!=="$"&&n!=="$!"&&n!=="$?"||e++}t=t.nextSibling}tn=null}}else tn=rn?Yi(t.stateNode.nextSibling):null;return!0}function yb(){for(var t=tn;t;)t=Yi(t.nextSibling)}function ms(){tn=rn=null,We=!1}function Ch(t){Hn===null?Hn=[t]:Hn.push(t)}var qv=xi.ReactCurrentBatchConfig;function Ln(t,e){if(t&&t.defaultProps){e=qe({},e),t=t.defaultProps;for(var n in t)e[n]===void 0&&(e[n]=t[n]);return e}return e}var bu=nr(null),pu=null,Kr=null,wh=null;function Dh(){wh=Kr=pu=null}function xh(t){var e=bu.current;Ue(bu),t._currentValue=e}function pd(t,e,n){for(;t!==null;){var i=t.alternate;if((t.childLanes&e)!==e?(t.childLanes|=e,i!==null&&(i.childLanes|=e)):i!==null&&(i.childLanes&e)!==e&&(i.childLanes|=e),t===n)break;t=t.return}}function ss(t,e){pu=t,wh=Kr=null,t=t.dependencies,t!==null&&t.firstContext!==null&&(t.lanes&e&&(Xt=!0),t.firstContext=null)}function Dn(t){var e=t._currentValue;if(wh!==t)if(t={context:t,memoizedValue:e,next:null},Kr===null){if(pu===null)throw Error(R(308));Kr=t,pu.dependencies={lanes:0,firstContext:t}}else Kr=Kr.next=t;return e}var cr=null;function Bh(t){cr===null?cr=[t]:cr.push(t)}function Rb(t,e,n,i){var r=e.interleaved;return r===null?(n.next=n,Bh(e)):(n.next=r.next,r.next=n),e.interleaved=n,wi(t,i)}function wi(t,e){t.lanes|=e;var n=t.alternate;for(n!==null&&(n.lanes|=e),n=t,t=t.return;t!==null;)t.childLanes|=e,n=t.alternate,n!==null&&(n.childLanes|=e),n=t,t=t.return;return n.tag===3?n.stateNode:null}var Li=!1;function Th(t){t.updateQueue={baseState:t.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function Ib(t,e){t=t.updateQueue,e.updateQueue===t&&(e.updateQueue={baseState:t.baseState,firstBaseUpdate:t.firstBaseUpdate,lastBaseUpdate:t.lastBaseUpdate,shared:t.shared,effects:t.effects})}function pi(t,e){return{eventTime:t,lane:e,tag:0,payload:null,callback:null,next:null}}function Vi(t,e,n){var i=t.updateQueue;if(i===null)return null;if(i=i.shared,Se&2){var r=i.pending;return r===null?e.next=e:(e.next=r.next,r.next=e),i.pending=e,wi(t,n)}return r=i.interleaved,r===null?(e.next=e,Bh(i)):(e.next=r.next,r.next=e),i.interleaved=e,wi(t,n)}function Xa(t,e,n){if(e=e.updateQueue,e!==null&&(e=e.shared,(n&4194240)!==0)){var i=e.lanes;i&=t.pendingLanes,n|=i,e.lanes=n,hh(t,n)}}function Rm(t,e){var n=t.updateQueue,i=t.alternate;if(i!==null&&(i=i.updateQueue,n===i)){var r=null,s=null;if(n=n.firstBaseUpdate,n!==null){do{var o={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};s===null?r=s=o:s=s.next=o,n=n.next}while(n!==null);s===null?r=s=e:s=s.next=e}else r=s=e;n={baseState:i.baseState,firstBaseUpdate:r,lastBaseUpdate:s,shared:i.shared,effects:i.effects},t.updateQueue=n;return}t=n.lastBaseUpdate,t===null?n.firstBaseUpdate=e:t.next=e,n.lastBaseUpdate=e}function Su(t,e,n,i){var r=t.updateQueue;Li=!1;var s=r.firstBaseUpdate,o=r.lastBaseUpdate,a=r.shared.pending;if(a!==null){r.shared.pending=null;var l=a,d=l.next;l.next=null,o===null?s=d:o.next=d,o=l;var f=t.alternate;f!==null&&(f=f.updateQueue,a=f.lastBaseUpdate,a!==o&&(a===null?f.firstBaseUpdate=d:a.next=d,f.lastBaseUpdate=l))}if(s!==null){var u=r.baseState;o=0,f=d=l=null,a=s;do{var c=a.lane,h=a.eventTime;if((i&c)===c){f!==null&&(f=f.next={eventTime:h,lane:0,tag:a.tag,payload:a.payload,callback:a.callback,next:null});e:{var g=t,E=a;switch(c=e,h=n,E.tag){case 1:if(g=E.payload,typeof g=="function"){u=g.call(h,u,c);break e}u=g;break e;case 3:g.flags=g.flags&-65537|128;case 0:if(g=E.payload,c=typeof g=="function"?g.call(h,u,c):g,c==null)break e;u=qe({},u,c);break e;case 2:Li=!0}}a.callback!==null&&a.lane!==0&&(t.flags|=64,c=r.effects,c===null?r.effects=[a]:c.push(a))}else h={eventTime:h,lane:c,tag:a.tag,payload:a.payload,callback:a.callback,next:null},f===null?(d=f=h,l=u):f=f.next=h,o|=c;if(a=a.next,a===null){if(a=r.shared.pending,a===null)break;c=a,a=c.next,c.next=null,r.lastBaseUpdate=c,r.shared.pending=null}}while(1);if(f===null&&(l=u),r.baseState=l,r.firstBaseUpdate=d,r.lastBaseUpdate=f,e=r.shared.interleaved,e!==null){r=e;do o|=r.lane,r=r.next;while(r!==e)}else s===null&&(r.shared.lanes=0);vr|=o,t.lanes=o,t.memoizedState=u}}function Im(t,e,n){if(t=e.effects,e.effects=null,t!==null)for(e=0;e<t.length;e++){var i=t[e],r=i.callback;if(r!==null){if(i.callback=null,i=n,typeof r!="function")throw Error(R(191,r));r.call(i)}}}var jb=new RE.Component().refs;function Sd(t,e,n,i){e=t.memoizedState,n=n(i,e),n=n==null?e:qe({},e,n),t.memoizedState=n,t.lanes===0&&(t.updateQueue.baseState=n)}var qu={isMounted:function(t){return(t=t._reactInternals)?Pr(t)===t:!1},enqueueSetState:function(t,e,n){t=t._reactInternals;var i=kt(),r=Ji(t),s=pi(i,r);s.payload=e,n!=null&&(s.callback=n),e=Vi(t,s,r),e!==null&&(Vn(e,t,r,i),Xa(e,t,r))},enqueueReplaceState:function(t,e,n){t=t._reactInternals;var i=kt(),r=Ji(t),s=pi(i,r);s.tag=1,s.payload=e,n!=null&&(s.callback=n),e=Vi(t,s,r),e!==null&&(Vn(e,t,r,i),Xa(e,t,r))},enqueueForceUpdate:function(t,e){t=t._reactInternals;var n=kt(),i=Ji(t),r=pi(n,i);r.tag=2,e!=null&&(r.callback=e),e=Vi(t,r,i),e!==null&&(Vn(e,t,i,n),Xa(e,t,i))}};function jm(t,e,n,i,r,s,o){return t=t.stateNode,typeof t.shouldComponentUpdate=="function"?t.shouldComponentUpdate(i,s,o):e.prototype&&e.prototype.isPureReactComponent?!Lo(n,i)||!Lo(r,s):!0}function Ub(t,e,n){var i=!1,r=Gi,s=e.contextType;return typeof s=="object"&&s!==null?s=Dn(s):(r=qt(e)?pr:Dt.current,i=e.contextTypes,s=(i=i!=null)?fs(t,r):Gi),e=new e(n,s),t.memoizedState=e.state!==null&&e.state!==void 0?e.state:null,e.updater=qu,t.stateNode=e,e._reactInternals=t,i&&(t=t.stateNode,t.__reactInternalMemoizedUnmaskedChildContext=r,t.__reactInternalMemoizedMaskedChildContext=s),e}function Um(t,e,n,i){t=e.state,typeof e.componentWillReceiveProps=="function"&&e.componentWillReceiveProps(n,i),typeof e.UNSAFE_componentWillReceiveProps=="function"&&e.UNSAFE_componentWillReceiveProps(n,i),e.state!==t&&qu.enqueueReplaceState(e,e.state,null)}function Ad(t,e,n,i){var r=t.stateNode;r.props=n,r.state=t.memoizedState,r.refs=jb,Th(t);var s=e.contextType;typeof s=="object"&&s!==null?r.context=Dn(s):(s=qt(e)?pr:Dt.current,r.context=fs(t,s)),r.state=t.memoizedState,s=e.getDerivedStateFromProps,typeof s=="function"&&(Sd(t,e,s,n),r.state=t.memoizedState),typeof e.getDerivedStateFromProps=="function"||typeof r.getSnapshotBeforeUpdate=="function"||typeof r.UNSAFE_componentWillMount!="function"&&typeof r.componentWillMount!="function"||(e=r.state,typeof r.componentWillMount=="function"&&r.componentWillMount(),typeof r.UNSAFE_componentWillMount=="function"&&r.UNSAFE_componentWillMount(),e!==r.state&&qu.enqueueReplaceState(r,r.state,null),Su(t,n,r,i),r.state=t.memoizedState),typeof r.componentDidMount=="function"&&(t.flags|=4194308)}function Js(t,e,n){if(t=n.ref,t!==null&&typeof t!="function"&&typeof t!="object"){if(n._owner){if(n=n._owner,n){if(n.tag!==1)throw Error(R(309));var i=n.stateNode}if(!i)throw Error(R(147,t));var r=i,s=""+t;return e!==null&&e.ref!==null&&typeof e.ref=="function"&&e.ref._stringRef===s?e.ref:(e=function(o){var a=r.refs;a===jb&&(a=r.refs={}),o===null?delete a[s]:a[s]=o},e._stringRef=s,e)}if(typeof t!="string")throw Error(R(284));if(!n._owner)throw Error(R(290,t))}return t}function Da(t,e){throw t=Object.prototype.toString.call(e),Error(R(31,t==="[object Object]"?"object with keys {"+Object.keys(e).join(", ")+"}":t))}function Hm(t){var e=t._init;return e(t._payload)}function Hb(t){function e(m,b){if(t){var A=m.deletions;A===null?(m.deletions=[b],m.flags|=16):A.push(b)}}function n(m,b){if(!t)return null;for(;b!==null;)e(m,b),b=b.sibling;return null}function i(m,b){for(m=new Map;b!==null;)b.key!==null?m.set(b.key,b):m.set(b.index,b),b=b.sibling;return m}function r(m,b){return m=Zi(m,b),m.index=0,m.sibling=null,m}function s(m,b,A){return m.index=A,t?(A=m.alternate,A!==null?(A=A.index,A<b?(m.flags|=2,b):A):(m.flags|=2,b)):(m.flags|=1048576,b)}function o(m){return t&&m.alternate===null&&(m.flags|=2),m}function a(m,b,A,S){return b===null||b.tag!==6?(b=Sc(A,m.mode,S),b.return=m,b):(b=r(b,A),b.return=m,b)}function l(m,b,A,S){var w=A.type;return w===Wr?f(m,b,A.props.children,S,A.key):b!==null&&(b.elementType===w||typeof w=="object"&&w!==null&&w.$$typeof===ki&&Hm(w)===b.type)?(S=r(b,A.props),S.ref=Js(m,b,A),S.return=m,S):(S=Za(A.type,A.key,A.props,null,m.mode,S),S.ref=Js(m,b,A),S.return=m,S)}function d(m,b,A,S){return b===null||b.tag!==4||b.stateNode.containerInfo!==A.containerInfo||b.stateNode.implementation!==A.implementation?(b=Ac(A,m.mode,S),b.return=m,b):(b=r(b,A.children||[]),b.return=m,b)}function f(m,b,A,S,w){return b===null||b.tag!==7?(b=gr(A,m.mode,S,w),b.return=m,b):(b=r(b,A),b.return=m,b)}function u(m,b,A){if(typeof b=="string"&&b!==""||typeof b=="number")return b=Sc(""+b,m.mode,A),b.return=m,b;if(typeof b=="object"&&b!==null){switch(b.$$typeof){case fa:return A=Za(b.type,b.key,b.props,null,m.mode,A),A.ref=Js(m,null,b),A.return=m,A;case Hr:return b=Ac(b,m.mode,A),b.return=m,b;case ki:var S=b._init;return u(m,S(b._payload),A)}if(io(b)||Xs(b))return b=gr(b,m.mode,A,null),b.return=m,b;Da(m,b)}return null}function c(m,b,A,S){var w=b!==null?b.key:null;if(typeof A=="string"&&A!==""||typeof A=="number")return w!==null?null:a(m,b,""+A,S);if(typeof A=="object"&&A!==null){switch(A.$$typeof){case fa:return A.key===w?l(m,b,A,S):null;case Hr:return A.key===w?d(m,b,A,S):null;case ki:return w=A._init,c(m,b,w(A._payload),S)}if(io(A)||Xs(A))return w!==null?null:f(m,b,A,S,null);Da(m,A)}return null}function h(m,b,A,S,w){if(typeof S=="string"&&S!==""||typeof S=="number")return m=m.get(A)||null,a(b,m,""+S,w);if(typeof S=="object"&&S!==null){switch(S.$$typeof){case fa:return m=m.get(S.key===null?A:S.key)||null,l(b,m,S,w);case Hr:return m=m.get(S.key===null?A:S.key)||null,d(b,m,S,w);case ki:var D=S._init;return h(m,b,A,D(S._payload),w)}if(io(S)||Xs(S))return m=m.get(A)||null,f(b,m,S,w,null);Da(b,S)}return null}function g(m,b,A,S){for(var w=null,D=null,x=b,F=b=0,y=null;x!==null&&F<A.length;F++){x.index>F?(y=x,x=null):y=x.sibling;var X=c(m,x,A[F],S);if(X===null){x===null&&(x=y);break}t&&x&&X.alternate===null&&e(m,x),b=s(X,b,F),D===null?w=X:D.sibling=X,D=X,x=y}if(F===A.length)return n(m,x),We&&or(m,F),w;if(x===null){for(;F<A.length;F++)x=u(m,A[F],S),x!==null&&(b=s(x,b,F),D===null?w=x:D.sibling=x,D=x);return We&&or(m,F),w}for(x=i(m,x);F<A.length;F++)y=h(x,m,F,A[F],S),y!==null&&(t&&y.alternate!==null&&x.delete(y.key===null?F:y.key),b=s(y,b,F),D===null?w=y:D.sibling=y,D=y);return t&&x.forEach(function(G){return e(m,G)}),We&&or(m,F),w}function E(m,b,A,S){var w=Xs(A);if(typeof w!="function")throw Error(R(150));if(A=w.call(A),A==null)throw Error(R(151));for(var D=w=null,x=b,F=b=0,y=null,X=A.next();x!==null&&!X.done;F++,X=A.next()){x.index>F?(y=x,x=null):y=x.sibling;var G=c(m,x,X.value,S);if(G===null){x===null&&(x=y);break}t&&x&&G.alternate===null&&e(m,x),b=s(G,b,F),D===null?w=G:D.sibling=G,D=G,x=y}if(X.done)return n(m,x),We&&or(m,F),w;if(x===null){for(;!X.done;F++,X=A.next())X=u(m,X.value,S),X!==null&&(b=s(X,b,F),D===null?w=X:D.sibling=X,D=X);return We&&or(m,F),w}for(x=i(m,x);!X.done;F++,X=A.next())X=h(x,m,F,X.value,S),X!==null&&(t&&X.alternate!==null&&x.delete(X.key===null?F:X.key),b=s(X,b,F),D===null?w=X:D.sibling=X,D=X);return t&&x.forEach(function(Ee){return e(m,Ee)}),We&&or(m,F),w}function p(m,b,A,S){if(typeof A=="object"&&A!==null&&A.type===Wr&&A.key===null&&(A=A.props.children),typeof A=="object"&&A!==null){switch(A.$$typeof){case fa:e:{for(var w=A.key,D=b;D!==null;){if(D.key===w){if(w=A.type,w===Wr){if(D.tag===7){n(m,D.sibling),b=r(D,A.props.children),b.return=m,m=b;break e}}else if(D.elementType===w||typeof w=="object"&&w!==null&&w.$$typeof===ki&&Hm(w)===D.type){n(m,D.sibling),b=r(D,A.props),b.ref=Js(m,D,A),b.return=m,m=b;break e}n(m,D);break}else e(m,D);D=D.sibling}A.type===Wr?(b=gr(A.props.children,m.mode,S,A.key),b.return=m,m=b):(S=Za(A.type,A.key,A.props,null,m.mode,S),S.ref=Js(m,b,A),S.return=m,m=S)}return o(m);case Hr:e:{for(D=A.key;b!==null;){if(b.key===D)if(b.tag===4&&b.stateNode.containerInfo===A.containerInfo&&b.stateNode.implementation===A.implementation){n(m,b.sibling),b=r(b,A.children||[]),b.return=m,m=b;break e}else{n(m,b);break}else e(m,b);b=b.sibling}b=Ac(A,m.mode,S),b.return=m,m=b}return o(m);case ki:return D=A._init,p(m,b,D(A._payload),S)}if(io(A))return g(m,b,A,S);if(Xs(A))return E(m,b,A,S);Da(m,A)}return typeof A=="string"&&A!==""||typeof A=="number"?(A=""+A,b!==null&&b.tag===6?(n(m,b.sibling),b=r(b,A),b.return=m,m=b):(n(m,b),b=Sc(A,m.mode,S),b.return=m,m=b),o(m)):n(m,b)}return p}var gs=Hb(!0),Wb=Hb(!1),_o={},ii=nr(_o),Io=nr(_o),jo=nr(_o);function dr(t){if(t===_o)throw Error(R(174));return t}function Nh(t,e){switch(ye(jo,e),ye(Io,t),ye(ii,_o),t=e.nodeType,t){case 9:case 11:e=(e=e.documentElement)?e.namespaceURI:_c(null,"");break;default:t=t===8?e.parentNode:e,e=t.namespaceURI||null,t=t.tagName,e=_c(e,t)}Ue(ii),ye(ii,e)}function Es(){Ue(ii),Ue(Io),Ue(jo)}function Xb(t){dr(jo.current);var e=dr(ii.current),n=_c(e,t.type);e!==n&&(ye(Io,t),ye(ii,n))}function Fh(t){Io.current===t&&(Ue(ii),Ue(Io))}var Ye=nr(0);function Au(t){for(var e=t;e!==null;){if(e.tag===13){var n=e.memoizedState;if(n!==null&&(n=n.dehydrated,n===null||n.data==="$?"||n.data==="$!"))return e}else if(e.tag===19&&e.memoizedProps.revealOrder!==void 0){if(e.flags&128)return e}else if(e.child!==null){e.child.return=e,e=e.child;continue}if(e===t)break;for(;e.sibling===null;){if(e.return===null||e.return===t)return null;e=e.return}e.sibling.return=e.return,e=e.sibling}return null}var fc=[];function Mh(){for(var t=0;t<fc.length;t++)fc[t]._workInProgressVersionPrimary=null;fc.length=0}var za=xi.ReactCurrentDispatcher,mc=xi.ReactCurrentBatchConfig,Ar=0,Ve=null,at=null,dt=null,vu=!1,bo=!1,Uo=0,Jv=0;function At(){throw Error(R(321))}function Ph(t,e){if(e===null)return!1;for(var n=0;n<e.length&&n<t.length;n++)if(!Jn(t[n],e[n]))return!1;return!0}function kh(t,e,n,i,r,s){if(Ar=s,Ve=e,e.memoizedState=null,e.updateQueue=null,e.lanes=0,za.current=t===null||t.memoizedState===null?Gv:_v,t=n(i,r),bo){s=0;do{if(bo=!1,Uo=0,25<=s)throw Error(R(301));s+=1,dt=at=null,e.updateQueue=null,za.current=$v,t=n(i,r)}while(bo)}if(za.current=Cu,e=at!==null&&at.next!==null,Ar=0,dt=at=Ve=null,vu=!1,e)throw Error(R(300));return t}function Lh(){var t=Uo!==0;return Uo=0,t}function $n(){var t={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return dt===null?Ve.memoizedState=dt=t:dt=dt.next=t,dt}function xn(){if(at===null){var t=Ve.alternate;t=t!==null?t.memoizedState:null}else t=at.next;var e=dt===null?Ve.memoizedState:dt.next;if(e!==null)dt=e,at=t;else{if(t===null)throw Error(R(310));at=t,t={memoizedState:at.memoizedState,baseState:at.baseState,baseQueue:at.baseQueue,queue:at.queue,next:null},dt===null?Ve.memoizedState=dt=t:dt=dt.next=t}return dt}function Ho(t,e){return typeof e=="function"?e(t):e}function gc(t){var e=xn(),n=e.queue;if(n===null)throw Error(R(311));n.lastRenderedReducer=t;var i=at,r=i.baseQueue,s=n.pending;if(s!==null){if(r!==null){var o=r.next;r.next=s.next,s.next=o}i.baseQueue=r=s,n.pending=null}if(r!==null){s=r.next,i=i.baseState;var a=o=null,l=null,d=s;do{var f=d.lane;if((Ar&f)===f)l!==null&&(l=l.next={lane:0,action:d.action,hasEagerState:d.hasEagerState,eagerState:d.eagerState,next:null}),i=d.hasEagerState?d.eagerState:t(i,d.action);else{var u={lane:f,action:d.action,hasEagerState:d.hasEagerState,eagerState:d.eagerState,next:null};l===null?(a=l=u,o=i):l=l.next=u,Ve.lanes|=f,vr|=f}d=d.next}while(d!==null&&d!==s);l===null?o=i:l.next=a,Jn(i,e.memoizedState)||(Xt=!0),e.memoizedState=i,e.baseState=o,e.baseQueue=l,n.lastRenderedState=i}if(t=n.interleaved,t!==null){r=t;do s=r.lane,Ve.lanes|=s,vr|=s,r=r.next;while(r!==t)}else r===null&&(n.lanes=0);return[e.memoizedState,n.dispatch]}function Ec(t){var e=xn(),n=e.queue;if(n===null)throw Error(R(311));n.lastRenderedReducer=t;var i=n.dispatch,r=n.pending,s=e.memoizedState;if(r!==null){n.pending=null;var o=r=r.next;do s=t(s,o.action),o=o.next;while(o!==r);Jn(s,e.memoizedState)||(Xt=!0),e.memoizedState=s,e.baseQueue===null&&(e.baseState=s),n.lastRenderedState=s}return[s,i]}function zb(){}function Yb(t,e){var n=Ve,i=xn(),r=e(),s=!Jn(i.memoizedState,r);if(s&&(i.memoizedState=r,Xt=!0),i=i.queue,Oh(Jb.bind(null,n,i,t),[t]),i.getSnapshot!==e||s||dt!==null&&dt.memoizedState.tag&1){if(n.flags|=2048,Wo(9,qb.bind(null,n,i,r,e),void 0,null),ht===null)throw Error(R(349));Ar&30||Vb(n,e,r)}return r}function Vb(t,e,n){t.flags|=16384,t={getSnapshot:e,value:n},e=Ve.updateQueue,e===null?(e={lastEffect:null,stores:null},Ve.updateQueue=e,e.stores=[t]):(n=e.stores,n===null?e.stores=[t]:n.push(t))}function qb(t,e,n,i){e.value=n,e.getSnapshot=i,Zb(e)&&Kb(t)}function Jb(t,e,n){return n(function(){Zb(e)&&Kb(t)})}function Zb(t){var e=t.getSnapshot;t=t.value;try{var n=e();return!Jn(t,n)}catch{return!0}}function Kb(t){var e=wi(t,1);e!==null&&Vn(e,t,1,-1)}function Wm(t){var e=$n();return typeof t=="function"&&(t=t()),e.memoizedState=e.baseState=t,t={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:Ho,lastRenderedState:t},e.queue=t,t=t.dispatch=Qv.bind(null,Ve,t),[e.memoizedState,t]}function Wo(t,e,n,i){return t={tag:t,create:e,destroy:n,deps:i,next:null},e=Ve.updateQueue,e===null?(e={lastEffect:null,stores:null},Ve.updateQueue=e,e.lastEffect=t.next=t):(n=e.lastEffect,n===null?e.lastEffect=t.next=t:(i=n.next,n.next=t,t.next=i,e.lastEffect=t)),t}function Qb(){return xn().memoizedState}function Ya(t,e,n,i){var r=$n();Ve.flags|=t,r.memoizedState=Wo(1|e,n,void 0,i===void 0?null:i)}function Ju(t,e,n,i){var r=xn();i=i===void 0?null:i;var s=void 0;if(at!==null){var o=at.memoizedState;if(s=o.destroy,i!==null&&Ph(i,o.deps)){r.memoizedState=Wo(e,n,s,i);return}}Ve.flags|=t,r.memoizedState=Wo(1|e,n,s,i)}function Xm(t,e){return Ya(8390656,8,t,e)}function Oh(t,e){return Ju(2048,8,t,e)}function Gb(t,e){return Ju(4,2,t,e)}function _b(t,e){return Ju(4,4,t,e)}function $b(t,e){if(typeof e=="function")return t=t(),e(t),function(){e(null)};if(e!=null)return t=t(),e.current=t,function(){e.current=null}}function ep(t,e,n){return n=n!=null?n.concat([t]):null,Ju(4,4,$b.bind(null,e,t),n)}function yh(){}function tp(t,e){var n=xn();e=e===void 0?null:e;var i=n.memoizedState;return i!==null&&e!==null&&Ph(e,i[1])?i[0]:(n.memoizedState=[t,e],t)}function np(t,e){var n=xn();e=e===void 0?null:e;var i=n.memoizedState;return i!==null&&e!==null&&Ph(e,i[1])?i[0]:(t=t(),n.memoizedState=[t,e],t)}function ip(t,e,n){return Ar&21?(Jn(n,e)||(n=ob(),Ve.lanes|=n,vr|=n,t.baseState=!0),e):(t.baseState&&(t.baseState=!1,Xt=!0),t.memoizedState=n)}function Zv(t,e){var n=xe;xe=n!==0&&4>n?n:4,t(!0);var i=mc.transition;mc.transition={};try{t(!1),e()}finally{xe=n,mc.transition=i}}function rp(){return xn().memoizedState}function Kv(t,e,n){var i=Ji(t);if(n={lane:i,action:n,hasEagerState:!1,eagerState:null,next:null},sp(t))op(e,n);else if(n=Rb(t,e,n,i),n!==null){var r=kt();Vn(n,t,i,r),ap(n,e,i)}}function Qv(t,e,n){var i=Ji(t),r={lane:i,action:n,hasEagerState:!1,eagerState:null,next:null};if(sp(t))op(e,r);else{var s=t.alternate;if(t.lanes===0&&(s===null||s.lanes===0)&&(s=e.lastRenderedReducer,s!==null))try{var o=e.lastRenderedState,a=s(o,n);if(r.hasEagerState=!0,r.eagerState=a,Jn(a,o)){var l=e.interleaved;l===null?(r.next=r,Bh(e)):(r.next=l.next,l.next=r),e.interleaved=r;return}}catch{}finally{}n=Rb(t,e,r,i),n!==null&&(r=kt(),Vn(n,t,i,r),ap(n,e,i))}}function sp(t){var e=t.alternate;return t===Ve||e!==null&&e===Ve}function op(t,e){bo=vu=!0;var n=t.pending;n===null?e.next=e:(e.next=n.next,n.next=e),t.pending=e}function ap(t,e,n){if(n&4194240){var i=e.lanes;i&=t.pendingLanes,n|=i,e.lanes=n,hh(t,n)}}var Cu={readContext:Dn,useCallback:At,useContext:At,useEffect:At,useImperativeHandle:At,useInsertionEffect:At,useLayoutEffect:At,useMemo:At,useReducer:At,useRef:At,useState:At,useDebugValue:At,useDeferredValue:At,useTransition:At,useMutableSource:At,useSyncExternalStore:At,useId:At,unstable_isNewReconciler:!1},Gv={readContext:Dn,useCallback:function(t,e){return $n().memoizedState=[t,e===void 0?null:e],t},useContext:Dn,useEffect:Xm,useImperativeHandle:function(t,e,n){return n=n!=null?n.concat([t]):null,Ya(4194308,4,$b.bind(null,e,t),n)},useLayoutEffect:function(t,e){return Ya(4194308,4,t,e)},useInsertionEffect:function(t,e){return Ya(4,2,t,e)},useMemo:function(t,e){var n=$n();return e=e===void 0?null:e,t=t(),n.memoizedState=[t,e],t},useReducer:function(t,e,n){var i=$n();return e=n!==void 0?n(e):e,i.memoizedState=i.baseState=e,t={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:t,lastRenderedState:e},i.queue=t,t=t.dispatch=Kv.bind(null,Ve,t),[i.memoizedState,t]},useRef:function(t){var e=$n();return t={current:t},e.memoizedState=t},useState:Wm,useDebugValue:yh,useDeferredValue:function(t){return $n().memoizedState=t},useTransition:function(){var t=Wm(!1),e=t[0];return t=Zv.bind(null,t[1]),$n().memoizedState=t,[e,t]},useMutableSource:function(){},useSyncExternalStore:function(t,e,n){var i=Ve,r=$n();if(We){if(n===void 0)throw Error(R(407));n=n()}else{if(n=e(),ht===null)throw Error(R(349));Ar&30||Vb(i,e,n)}r.memoizedState=n;var s={value:n,getSnapshot:e};return r.queue=s,Xm(Jb.bind(null,i,s,t),[t]),i.flags|=2048,Wo(9,qb.bind(null,i,s,n,e),void 0,null),n},useId:function(){var t=$n(),e=ht.identifierPrefix;if(We){var n=Ei,i=gi;n=(i&~(1<<32-Yn(i)-1)).toString(32)+n,e=":"+e+"R"+n,n=Uo++,0<n&&(e+="H"+n.toString(32)),e+=":"}else n=Jv++,e=":"+e+"r"+n.toString(32)+":";return t.memoizedState=e},unstable_isNewReconciler:!1},_v={readContext:Dn,useCallback:tp,useContext:Dn,useEffect:Oh,useImperativeHandle:ep,useInsertionEffect:Gb,useLayoutEffect:_b,useMemo:np,useReducer:gc,useRef:Qb,useState:function(){return gc(Ho)},useDebugValue:yh,useDeferredValue:function(t){var e=xn();return ip(e,at.memoizedState,t)},useTransition:function(){var t=gc(Ho)[0],e=xn().memoizedState;return[t,e]},useMutableSource:zb,useSyncExternalStore:Yb,useId:rp,unstable_isNewReconciler:!1},$v={readContext:Dn,useCallback:tp,useContext:Dn,useEffect:Oh,useImperativeHandle:ep,useInsertionEffect:Gb,useLayoutEffect:_b,useMemo:np,useReducer:Ec,useRef:Qb,useState:function(){return Ec(Ho)},useDebugValue:yh,useDeferredValue:function(t){var e=xn();return at===null?e.memoizedState=t:ip(e,at.memoizedState,t)},useTransition:function(){var t=Ec(Ho)[0],e=xn().memoizedState;return[t,e]},useMutableSource:zb,useSyncExternalStore:Yb,useId:rp,unstable_isNewReconciler:!1};function bs(t,e){try{var n="",i=e;do n+=TA(i),i=i.return;while(i);var r=n}catch(s){r=`
Error generating stack: `+s.message+`
`+s.stack}return{value:t,source:e,stack:r,digest:null}}function bc(t,e,n){return{value:t,source:null,stack:n??null,digest:e??null}}function vd(t,e){try{console.error(e.value)}catch(n){setTimeout(function(){throw n})}}var eC=typeof WeakMap=="function"?WeakMap:Map;function up(t,e,n){n=pi(-1,n),n.tag=3,n.payload={element:null};var i=e.value;return n.callback=function(){Du||(Du=!0,Pd=i),vd(t,e)},n}function lp(t,e,n){n=pi(-1,n),n.tag=3;var i=t.type.getDerivedStateFromError;if(typeof i=="function"){var r=e.value;n.payload=function(){return i(r)},n.callback=function(){vd(t,e)}}var s=t.stateNode;return s!==null&&typeof s.componentDidCatch=="function"&&(n.callback=function(){vd(t,e),typeof i!="function"&&(qi===null?qi=new Set([this]):qi.add(this));var o=e.stack;this.componentDidCatch(e.value,{componentStack:o!==null?o:""})}),n}function zm(t,e,n){var i=t.pingCache;if(i===null){i=t.pingCache=new eC;var r=new Set;i.set(e,r)}else r=i.get(e),r===void 0&&(r=new Set,i.set(e,r));r.has(n)||(r.add(n),t=mC.bind(null,t,e,n),e.then(t,t))}function Ym(t){do{var e;if((e=t.tag===13)&&(e=t.memoizedState,e=e!==null?e.dehydrated!==null:!0),e)return t;t=t.return}while(t!==null);return null}function Vm(t,e,n,i,r){return t.mode&1?(t.flags|=65536,t.lanes=r,t):(t===e?t.flags|=65536:(t.flags|=128,n.flags|=131072,n.flags&=-52805,n.tag===1&&(n.alternate===null?n.tag=17:(e=pi(-1,1),e.tag=2,Vi(n,e,1))),n.lanes|=1),t)}var tC=xi.ReactCurrentOwner,Xt=!1;function Tt(t,e,n,i){e.child=t===null?Wb(e,null,n,i):gs(e,t.child,n,i)}function qm(t,e,n,i,r){n=n.render;var s=e.ref;return ss(e,r),i=kh(t,e,n,i,s,r),n=Lh(),t!==null&&!Xt?(e.updateQueue=t.updateQueue,e.flags&=-2053,t.lanes&=~r,Di(t,e,r)):(We&&n&&Ah(e),e.flags|=1,Tt(t,e,i,r),e.child)}function Jm(t,e,n,i,r){if(t===null){var s=n.type;return typeof s=="function"&&!zh(s)&&s.defaultProps===void 0&&n.compare===null&&n.defaultProps===void 0?(e.tag=15,e.type=s,cp(t,e,s,i,r)):(t=Za(n.type,null,i,e,e.mode,r),t.ref=e.ref,t.return=e,e.child=t)}if(s=t.child,!(t.lanes&r)){var o=s.memoizedProps;if(n=n.compare,n=n!==null?n:Lo,n(o,i)&&t.ref===e.ref)return Di(t,e,r)}return e.flags|=1,t=Zi(s,i),t.ref=e.ref,t.return=e,e.child=t}function cp(t,e,n,i,r){if(t!==null){var s=t.memoizedProps;if(Lo(s,i)&&t.ref===e.ref)if(Xt=!1,e.pendingProps=i=s,(t.lanes&r)!==0)t.flags&131072&&(Xt=!0);else return e.lanes=t.lanes,Di(t,e,r)}return Cd(t,e,n,i,r)}function dp(t,e,n){var i=e.pendingProps,r=i.children,s=t!==null?t.memoizedState:null;if(i.mode==="hidden")if(!(e.mode&1))e.memoizedState={baseLanes:0,cachePool:null,transitions:null},ye(Gr,en),en|=n;else{if(!(n&1073741824))return t=s!==null?s.baseLanes|n:n,e.lanes=e.childLanes=1073741824,e.memoizedState={baseLanes:t,cachePool:null,transitions:null},e.updateQueue=null,ye(Gr,en),en|=t,null;e.memoizedState={baseLanes:0,cachePool:null,transitions:null},i=s!==null?s.baseLanes:n,ye(Gr,en),en|=i}else s!==null?(i=s.baseLanes|n,e.memoizedState=null):i=n,ye(Gr,en),en|=i;return Tt(t,e,r,n),e.child}function hp(t,e){var n=e.ref;(t===null&&n!==null||t!==null&&t.ref!==n)&&(e.flags|=512,e.flags|=2097152)}function Cd(t,e,n,i,r){var s=qt(n)?pr:Dt.current;return s=fs(e,s),ss(e,r),n=kh(t,e,n,i,s,r),i=Lh(),t!==null&&!Xt?(e.updateQueue=t.updateQueue,e.flags&=-2053,t.lanes&=~r,Di(t,e,r)):(We&&i&&Ah(e),e.flags|=1,Tt(t,e,n,r),e.child)}function Zm(t,e,n,i,r){if(qt(n)){var s=!0;mu(e)}else s=!1;if(ss(e,r),e.stateNode===null)Va(t,e),Ub(e,n,i),Ad(e,n,i,r),i=!0;else if(t===null){var o=e.stateNode,a=e.memoizedProps;o.props=a;var l=o.context,d=n.contextType;typeof d=="object"&&d!==null?d=Dn(d):(d=qt(n)?pr:Dt.current,d=fs(e,d));var f=n.getDerivedStateFromProps,u=typeof f=="function"||typeof o.getSnapshotBeforeUpdate=="function";u||typeof o.UNSAFE_componentWillReceiveProps!="function"&&typeof o.componentWillReceiveProps!="function"||(a!==i||l!==d)&&Um(e,o,i,d),Li=!1;var c=e.memoizedState;o.state=c,Su(e,i,o,r),l=e.memoizedState,a!==i||c!==l||Vt.current||Li?(typeof f=="function"&&(Sd(e,n,f,i),l=e.memoizedState),(a=Li||jm(e,n,a,i,c,l,d))?(u||typeof o.UNSAFE_componentWillMount!="function"&&typeof o.componentWillMount!="function"||(typeof o.componentWillMount=="function"&&o.componentWillMount(),typeof o.UNSAFE_componentWillMount=="function"&&o.UNSAFE_componentWillMount()),typeof o.componentDidMount=="function"&&(e.flags|=4194308)):(typeof o.componentDidMount=="function"&&(e.flags|=4194308),e.memoizedProps=i,e.memoizedState=l),o.props=i,o.state=l,o.context=d,i=a):(typeof o.componentDidMount=="function"&&(e.flags|=4194308),i=!1)}else{o=e.stateNode,Ib(t,e),a=e.memoizedProps,d=e.type===e.elementType?a:Ln(e.type,a),o.props=d,u=e.pendingProps,c=o.context,l=n.contextType,typeof l=="object"&&l!==null?l=Dn(l):(l=qt(n)?pr:Dt.current,l=fs(e,l));var h=n.getDerivedStateFromProps;(f=typeof h=="function"||typeof o.getSnapshotBeforeUpdate=="function")||typeof o.UNSAFE_componentWillReceiveProps!="function"&&typeof o.componentWillReceiveProps!="function"||(a!==u||c!==l)&&Um(e,o,i,l),Li=!1,c=e.memoizedState,o.state=c,Su(e,i,o,r);var g=e.memoizedState;a!==u||c!==g||Vt.current||Li?(typeof h=="function"&&(Sd(e,n,h,i),g=e.memoizedState),(d=Li||jm(e,n,d,i,c,g,l)||!1)?(f||typeof o.UNSAFE_componentWillUpdate!="function"&&typeof o.componentWillUpdate!="function"||(typeof o.componentWillUpdate=="function"&&o.componentWillUpdate(i,g,l),typeof o.UNSAFE_componentWillUpdate=="function"&&o.UNSAFE_componentWillUpdate(i,g,l)),typeof o.componentDidUpdate=="function"&&(e.flags|=4),typeof o.getSnapshotBeforeUpdate=="function"&&(e.flags|=1024)):(typeof o.componentDidUpdate!="function"||a===t.memoizedProps&&c===t.memoizedState||(e.flags|=4),typeof o.getSnapshotBeforeUpdate!="function"||a===t.memoizedProps&&c===t.memoizedState||(e.flags|=1024),e.memoizedProps=i,e.memoizedState=g),o.props=i,o.state=g,o.context=l,i=d):(typeof o.componentDidUpdate!="function"||a===t.memoizedProps&&c===t.memoizedState||(e.flags|=4),typeof o.getSnapshotBeforeUpdate!="function"||a===t.memoizedProps&&c===t.memoizedState||(e.flags|=1024),i=!1)}return wd(t,e,n,i,s,r)}function wd(t,e,n,i,r,s){hp(t,e);var o=(e.flags&128)!==0;if(!i&&!o)return r&&Lm(e,n,!1),Di(t,e,s);i=e.stateNode,tC.current=e;var a=o&&typeof n.getDerivedStateFromError!="function"?null:i.render();return e.flags|=1,t!==null&&o?(e.child=gs(e,t.child,null,s),e.child=gs(e,null,a,s)):Tt(t,e,a,s),e.memoizedState=i.state,r&&Lm(e,n,!0),e.child}function fp(t){var e=t.stateNode;e.pendingContext?km(t,e.pendingContext,e.pendingContext!==e.context):e.context&&km(t,e.context,!1),Nh(t,e.containerInfo)}function Km(t,e,n,i,r){return ms(),Ch(r),e.flags|=256,Tt(t,e,n,i),e.child}var Dd={dehydrated:null,treeContext:null,retryLane:0};function xd(t){return{baseLanes:t,cachePool:null,transitions:null}}function mp(t,e,n){var i=e.pendingProps,r=Ye.current,s=!1,o=(e.flags&128)!==0,a;if((a=o)||(a=t!==null&&t.memoizedState===null?!1:(r&2)!==0),a?(s=!0,e.flags&=-129):(t===null||t.memoizedState!==null)&&(r|=1),ye(Ye,r&1),t===null)return bd(e),t=e.memoizedState,t!==null&&(t=t.dehydrated,t!==null)?(e.mode&1?t.data==="$!"?e.lanes=8:e.lanes=1073741824:e.lanes=1,null):(o=i.children,t=i.fallback,s?(i=e.mode,s=e.child,o={mode:"hidden",children:o},!(i&1)&&s!==null?(s.childLanes=0,s.pendingProps=o):s=Qu(o,i,0,null),t=gr(t,i,n,null),s.return=e,t.return=e,s.sibling=t,e.child=s,e.child.memoizedState=xd(n),e.memoizedState=Dd,t):Rh(e,o));if(r=t.memoizedState,r!==null&&(a=r.dehydrated,a!==null))return nC(t,e,o,i,a,r,n);if(s){s=i.fallback,o=e.mode,r=t.child,a=r.sibling;var l={mode:"hidden",children:i.children};return!(o&1)&&e.child!==r?(i=e.child,i.childLanes=0,i.pendingProps=l,e.deletions=null):(i=Zi(r,l),i.subtreeFlags=r.subtreeFlags&14680064),a!==null?s=Zi(a,s):(s=gr(s,o,n,null),s.flags|=2),s.return=e,i.return=e,i.sibling=s,e.child=i,i=s,s=e.child,o=t.child.memoizedState,o=o===null?xd(n):{baseLanes:o.baseLanes|n,cachePool:null,transitions:o.transitions},s.memoizedState=o,s.childLanes=t.childLanes&~n,e.memoizedState=Dd,i}return s=t.child,t=s.sibling,i=Zi(s,{mode:"visible",children:i.children}),!(e.mode&1)&&(i.lanes=n),i.return=e,i.sibling=null,t!==null&&(n=e.deletions,n===null?(e.deletions=[t],e.flags|=16):n.push(t)),e.child=i,e.memoizedState=null,i}function Rh(t,e){return e=Qu({mode:"visible",children:e},t.mode,0,null),e.return=t,t.child=e}function xa(t,e,n,i){return i!==null&&Ch(i),gs(e,t.child,null,n),t=Rh(e,e.pendingProps.children),t.flags|=2,e.memoizedState=null,t}function nC(t,e,n,i,r,s,o){if(n)return e.flags&256?(e.flags&=-257,i=bc(Error(R(422))),xa(t,e,o,i)):e.memoizedState!==null?(e.child=t.child,e.flags|=128,null):(s=i.fallback,r=e.mode,i=Qu({mode:"visible",children:i.children},r,0,null),s=gr(s,r,o,null),s.flags|=2,i.return=e,s.return=e,i.sibling=s,e.child=i,e.mode&1&&gs(e,t.child,null,o),e.child.memoizedState=xd(o),e.memoizedState=Dd,s);if(!(e.mode&1))return xa(t,e,o,null);if(r.data==="$!"){if(i=r.nextSibling&&r.nextSibling.dataset,i)var a=i.dgst;return i=a,s=Error(R(419)),i=bc(s,i,void 0),xa(t,e,o,i)}if(a=(o&t.childLanes)!==0,Xt||a){if(i=ht,i!==null){switch(o&-o){case 4:r=2;break;case 16:r=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:r=32;break;case 536870912:r=268435456;break;default:r=0}r=r&(i.suspendedLanes|o)?0:r,r!==0&&r!==s.retryLane&&(s.retryLane=r,wi(t,r),Vn(i,t,r,-1))}return Xh(),i=bc(Error(R(421))),xa(t,e,o,i)}return r.data==="$?"?(e.flags|=128,e.child=t.child,e=gC.bind(null,t),r._reactRetry=e,null):(t=s.treeContext,tn=Yi(r.nextSibling),rn=e,We=!0,Hn=null,t!==null&&(gn[En++]=gi,gn[En++]=Ei,gn[En++]=Sr,gi=t.id,Ei=t.overflow,Sr=e),e=Rh(e,i.children),e.flags|=4096,e)}function Qm(t,e,n){t.lanes|=e;var i=t.alternate;i!==null&&(i.lanes|=e),pd(t.return,e,n)}function pc(t,e,n,i,r){var s=t.memoizedState;s===null?t.memoizedState={isBackwards:e,rendering:null,renderingStartTime:0,last:i,tail:n,tailMode:r}:(s.isBackwards=e,s.rendering=null,s.renderingStartTime=0,s.last=i,s.tail=n,s.tailMode=r)}function gp(t,e,n){var i=e.pendingProps,r=i.revealOrder,s=i.tail;if(Tt(t,e,i.children,n),i=Ye.current,i&2)i=i&1|2,e.flags|=128;else{if(t!==null&&t.flags&128)e:for(t=e.child;t!==null;){if(t.tag===13)t.memoizedState!==null&&Qm(t,n,e);else if(t.tag===19)Qm(t,n,e);else if(t.child!==null){t.child.return=t,t=t.child;continue}if(t===e)break e;for(;t.sibling===null;){if(t.return===null||t.return===e)break e;t=t.return}t.sibling.return=t.return,t=t.sibling}i&=1}if(ye(Ye,i),!(e.mode&1))e.memoizedState=null;else switch(r){case"forwards":for(n=e.child,r=null;n!==null;)t=n.alternate,t!==null&&Au(t)===null&&(r=n),n=n.sibling;n=r,n===null?(r=e.child,e.child=null):(r=n.sibling,n.sibling=null),pc(e,!1,r,n,s);break;case"backwards":for(n=null,r=e.child,e.child=null;r!==null;){if(t=r.alternate,t!==null&&Au(t)===null){e.child=r;break}t=r.sibling,r.sibling=n,n=r,r=t}pc(e,!0,n,null,s);break;case"together":pc(e,!1,null,null,void 0);break;default:e.memoizedState=null}return e.child}function Va(t,e){!(e.mode&1)&&t!==null&&(t.alternate=null,e.alternate=null,e.flags|=2)}function Di(t,e,n){if(t!==null&&(e.dependencies=t.dependencies),vr|=e.lanes,!(n&e.childLanes))return null;if(t!==null&&e.child!==t.child)throw Error(R(153));if(e.child!==null){for(t=e.child,n=Zi(t,t.pendingProps),e.child=n,n.return=e;t.sibling!==null;)t=t.sibling,n=n.sibling=Zi(t,t.pendingProps),n.return=e;n.sibling=null}return e.child}function iC(t,e,n){switch(e.tag){case 3:fp(e),ms();break;case 5:Xb(e);break;case 1:qt(e.type)&&mu(e);break;case 4:Nh(e,e.stateNode.containerInfo);break;case 10:var i=e.type._context,r=e.memoizedProps.value;ye(bu,i._currentValue),i._currentValue=r;break;case 13:if(i=e.memoizedState,i!==null)return i.dehydrated!==null?(ye(Ye,Ye.current&1),e.flags|=128,null):n&e.child.childLanes?mp(t,e,n):(ye(Ye,Ye.current&1),t=Di(t,e,n),t!==null?t.sibling:null);ye(Ye,Ye.current&1);break;case 19:if(i=(n&e.childLanes)!==0,t.flags&128){if(i)return gp(t,e,n);e.flags|=128}if(r=e.memoizedState,r!==null&&(r.rendering=null,r.tail=null,r.lastEffect=null),ye(Ye,Ye.current),i)break;return null;case 22:case 23:return e.lanes=0,dp(t,e,n)}return Di(t,e,n)}var Ep,Bd,bp,pp;Ep=function(t,e){for(var n=e.child;n!==null;){if(n.tag===5||n.tag===6)t.appendChild(n.stateNode);else if(n.tag!==4&&n.child!==null){n.child.return=n,n=n.child;continue}if(n===e)break;for(;n.sibling===null;){if(n.return===null||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}};Bd=function(){};bp=function(t,e,n,i){var r=t.memoizedProps;if(r!==i){t=e.stateNode,dr(ii.current);var s=null;switch(n){case"input":r=Zc(t,r),i=Zc(t,i),s=[];break;case"select":r=qe({},r,{value:void 0}),i=qe({},i,{value:void 0}),s=[];break;case"textarea":r=Gc(t,r),i=Gc(t,i),s=[];break;default:typeof r.onClick!="function"&&typeof i.onClick=="function"&&(t.onclick=hu)}$c(n,i);var o;n=null;for(d in r)if(!i.hasOwnProperty(d)&&r.hasOwnProperty(d)&&r[d]!=null)if(d==="style"){var a=r[d];for(o in a)a.hasOwnProperty(o)&&(n||(n={}),n[o]="")}else d!=="dangerouslySetInnerHTML"&&d!=="children"&&d!=="suppressContentEditableWarning"&&d!=="suppressHydrationWarning"&&d!=="autoFocus"&&(Bo.hasOwnProperty(d)?s||(s=[]):(s=s||[]).push(d,null));for(d in i){var l=i[d];if(a=r!=null?r[d]:void 0,i.hasOwnProperty(d)&&l!==a&&(l!=null||a!=null))if(d==="style")if(a){for(o in a)!a.hasOwnProperty(o)||l&&l.hasOwnProperty(o)||(n||(n={}),n[o]="");for(o in l)l.hasOwnProperty(o)&&a[o]!==l[o]&&(n||(n={}),n[o]=l[o])}else n||(s||(s=[]),s.push(d,n)),n=l;else d==="dangerouslySetInnerHTML"?(l=l?l.__html:void 0,a=a?a.__html:void 0,l!=null&&a!==l&&(s=s||[]).push(d,l)):d==="children"?typeof l!="string"&&typeof l!="number"||(s=s||[]).push(d,""+l):d!=="suppressContentEditableWarning"&&d!=="suppressHydrationWarning"&&(Bo.hasOwnProperty(d)?(l!=null&&d==="onScroll"&&Ie("scroll",t),s||a===l||(s=[])):(s=s||[]).push(d,l))}n&&(s=s||[]).push("style",n);var d=s;(e.updateQueue=d)&&(e.flags|=4)}};pp=function(t,e,n,i){n!==i&&(e.flags|=4)};function Zs(t,e){if(!We)switch(t.tailMode){case"hidden":e=t.tail;for(var n=null;e!==null;)e.alternate!==null&&(n=e),e=e.sibling;n===null?t.tail=null:n.sibling=null;break;case"collapsed":n=t.tail;for(var i=null;n!==null;)n.alternate!==null&&(i=n),n=n.sibling;i===null?e||t.tail===null?t.tail=null:t.tail.sibling=null:i.sibling=null}}function vt(t){var e=t.alternate!==null&&t.alternate.child===t.child,n=0,i=0;if(e)for(var r=t.child;r!==null;)n|=r.lanes|r.childLanes,i|=r.subtreeFlags&14680064,i|=r.flags&14680064,r.return=t,r=r.sibling;else for(r=t.child;r!==null;)n|=r.lanes|r.childLanes,i|=r.subtreeFlags,i|=r.flags,r.return=t,r=r.sibling;return t.subtreeFlags|=i,t.childLanes=n,e}function rC(t,e,n){var i=e.pendingProps;switch(vh(e),e.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return vt(e),null;case 1:return qt(e.type)&&fu(),vt(e),null;case 3:return i=e.stateNode,Es(),Ue(Vt),Ue(Dt),Mh(),i.pendingContext&&(i.context=i.pendingContext,i.pendingContext=null),(t===null||t.child===null)&&(wa(e)?e.flags|=4:t===null||t.memoizedState.isDehydrated&&!(e.flags&256)||(e.flags|=1024,Hn!==null&&(Od(Hn),Hn=null))),Bd(t,e),vt(e),null;case 5:Fh(e);var r=dr(jo.current);if(n=e.type,t!==null&&e.stateNode!=null)bp(t,e,n,i,r),t.ref!==e.ref&&(e.flags|=512,e.flags|=2097152);else{if(!i){if(e.stateNode===null)throw Error(R(166));return vt(e),null}if(t=dr(ii.current),wa(e)){i=e.stateNode,n=e.type;var s=e.memoizedProps;switch(i[ti]=e,i[Ro]=s,t=(e.mode&1)!==0,n){case"dialog":Ie("cancel",i),Ie("close",i);break;case"iframe":case"object":case"embed":Ie("load",i);break;case"video":case"audio":for(r=0;r<so.length;r++)Ie(so[r],i);break;case"source":Ie("error",i);break;case"img":case"image":case"link":Ie("error",i),Ie("load",i);break;case"details":Ie("toggle",i);break;case"input":sm(i,s),Ie("invalid",i);break;case"select":i._wrapperState={wasMultiple:!!s.multiple},Ie("invalid",i);break;case"textarea":am(i,s),Ie("invalid",i)}$c(n,s),r=null;for(var o in s)if(s.hasOwnProperty(o)){var a=s[o];o==="children"?typeof a=="string"?i.textContent!==a&&(s.suppressHydrationWarning!==!0&&Ca(i.textContent,a,t),r=["children",a]):typeof a=="number"&&i.textContent!==""+a&&(s.suppressHydrationWarning!==!0&&Ca(i.textContent,a,t),r=["children",""+a]):Bo.hasOwnProperty(o)&&a!=null&&o==="onScroll"&&Ie("scroll",i)}switch(n){case"input":ma(i),om(i,s,!0);break;case"textarea":ma(i),um(i);break;case"select":case"option":break;default:typeof s.onClick=="function"&&(i.onclick=hu)}i=r,e.updateQueue=i,i!==null&&(e.flags|=4)}else{o=r.nodeType===9?r:r.ownerDocument,t==="http://www.w3.org/1999/xhtml"&&(t=VE(n)),t==="http://www.w3.org/1999/xhtml"?n==="script"?(t=o.createElement("div"),t.innerHTML="<script><\/script>",t=t.removeChild(t.firstChild)):typeof i.is=="string"?t=o.createElement(n,{is:i.is}):(t=o.createElement(n),n==="select"&&(o=t,i.multiple?o.multiple=!0:i.size&&(o.size=i.size))):t=o.createElementNS(t,n),t[ti]=e,t[Ro]=i,Ep(t,e,!1,!1),e.stateNode=t;e:{switch(o=ed(n,i),n){case"dialog":Ie("cancel",t),Ie("close",t),r=i;break;case"iframe":case"object":case"embed":Ie("load",t),r=i;break;case"video":case"audio":for(r=0;r<so.length;r++)Ie(so[r],t);r=i;break;case"source":Ie("error",t),r=i;break;case"img":case"image":case"link":Ie("error",t),Ie("load",t),r=i;break;case"details":Ie("toggle",t),r=i;break;case"input":sm(t,i),r=Zc(t,i),Ie("invalid",t);break;case"option":r=i;break;case"select":t._wrapperState={wasMultiple:!!i.multiple},r=qe({},i,{value:void 0}),Ie("invalid",t);break;case"textarea":am(t,i),r=Gc(t,i),Ie("invalid",t);break;default:r=i}$c(n,r),a=r;for(s in a)if(a.hasOwnProperty(s)){var l=a[s];s==="style"?ZE(t,l):s==="dangerouslySetInnerHTML"?(l=l?l.__html:void 0,l!=null&&qE(t,l)):s==="children"?typeof l=="string"?(n!=="textarea"||l!=="")&&To(t,l):typeof l=="number"&&To(t,""+l):s!=="suppressContentEditableWarning"&&s!=="suppressHydrationWarning"&&s!=="autoFocus"&&(Bo.hasOwnProperty(s)?l!=null&&s==="onScroll"&&Ie("scroll",t):l!=null&&oh(t,s,l,o))}switch(n){case"input":ma(t),om(t,i,!1);break;case"textarea":ma(t),um(t);break;case"option":i.value!=null&&t.setAttribute("value",""+Qi(i.value));break;case"select":t.multiple=!!i.multiple,s=i.value,s!=null?ts(t,!!i.multiple,s,!1):i.defaultValue!=null&&ts(t,!!i.multiple,i.defaultValue,!0);break;default:typeof r.onClick=="function"&&(t.onclick=hu)}switch(n){case"button":case"input":case"select":case"textarea":i=!!i.autoFocus;break e;case"img":i=!0;break e;default:i=!1}}i&&(e.flags|=4)}e.ref!==null&&(e.flags|=512,e.flags|=2097152)}return vt(e),null;case 6:if(t&&e.stateNode!=null)pp(t,e,t.memoizedProps,i);else{if(typeof i!="string"&&e.stateNode===null)throw Error(R(166));if(n=dr(jo.current),dr(ii.current),wa(e)){if(i=e.stateNode,n=e.memoizedProps,i[ti]=e,(s=i.nodeValue!==n)&&(t=rn,t!==null))switch(t.tag){case 3:Ca(i.nodeValue,n,(t.mode&1)!==0);break;case 5:t.memoizedProps.suppressHydrationWarning!==!0&&Ca(i.nodeValue,n,(t.mode&1)!==0)}s&&(e.flags|=4)}else i=(n.nodeType===9?n:n.ownerDocument).createTextNode(i),i[ti]=e,e.stateNode=i}return vt(e),null;case 13:if(Ue(Ye),i=e.memoizedState,t===null||t.memoizedState!==null&&t.memoizedState.dehydrated!==null){if(We&&tn!==null&&e.mode&1&&!(e.flags&128))yb(),ms(),e.flags|=98560,s=!1;else if(s=wa(e),i!==null&&i.dehydrated!==null){if(t===null){if(!s)throw Error(R(318));if(s=e.memoizedState,s=s!==null?s.dehydrated:null,!s)throw Error(R(317));s[ti]=e}else ms(),!(e.flags&128)&&(e.memoizedState=null),e.flags|=4;vt(e),s=!1}else Hn!==null&&(Od(Hn),Hn=null),s=!0;if(!s)return e.flags&65536?e:null}return e.flags&128?(e.lanes=n,e):(i=i!==null,i!==(t!==null&&t.memoizedState!==null)&&i&&(e.child.flags|=8192,e.mode&1&&(t===null||Ye.current&1?ut===0&&(ut=3):Xh())),e.updateQueue!==null&&(e.flags|=4),vt(e),null);case 4:return Es(),Bd(t,e),t===null&&Oo(e.stateNode.containerInfo),vt(e),null;case 10:return xh(e.type._context),vt(e),null;case 17:return qt(e.type)&&fu(),vt(e),null;case 19:if(Ue(Ye),s=e.memoizedState,s===null)return vt(e),null;if(i=(e.flags&128)!==0,o=s.rendering,o===null)if(i)Zs(s,!1);else{if(ut!==0||t!==null&&t.flags&128)for(t=e.child;t!==null;){if(o=Au(t),o!==null){for(e.flags|=128,Zs(s,!1),i=o.updateQueue,i!==null&&(e.updateQueue=i,e.flags|=4),e.subtreeFlags=0,i=n,n=e.child;n!==null;)s=n,t=i,s.flags&=14680066,o=s.alternate,o===null?(s.childLanes=0,s.lanes=t,s.child=null,s.subtreeFlags=0,s.memoizedProps=null,s.memoizedState=null,s.updateQueue=null,s.dependencies=null,s.stateNode=null):(s.childLanes=o.childLanes,s.lanes=o.lanes,s.child=o.child,s.subtreeFlags=0,s.deletions=null,s.memoizedProps=o.memoizedProps,s.memoizedState=o.memoizedState,s.updateQueue=o.updateQueue,s.type=o.type,t=o.dependencies,s.dependencies=t===null?null:{lanes:t.lanes,firstContext:t.firstContext}),n=n.sibling;return ye(Ye,Ye.current&1|2),e.child}t=t.sibling}s.tail!==null&&et()>ps&&(e.flags|=128,i=!0,Zs(s,!1),e.lanes=4194304)}else{if(!i)if(t=Au(o),t!==null){if(e.flags|=128,i=!0,n=t.updateQueue,n!==null&&(e.updateQueue=n,e.flags|=4),Zs(s,!0),s.tail===null&&s.tailMode==="hidden"&&!o.alternate&&!We)return vt(e),null}else 2*et()-s.renderingStartTime>ps&&n!==1073741824&&(e.flags|=128,i=!0,Zs(s,!1),e.lanes=4194304);s.isBackwards?(o.sibling=e.child,e.child=o):(n=s.last,n!==null?n.sibling=o:e.child=o,s.last=o)}return s.tail!==null?(e=s.tail,s.rendering=e,s.tail=e.sibling,s.renderingStartTime=et(),e.sibling=null,n=Ye.current,ye(Ye,i?n&1|2:n&1),e):(vt(e),null);case 22:case 23:return Wh(),i=e.memoizedState!==null,t!==null&&t.memoizedState!==null!==i&&(e.flags|=8192),i&&e.mode&1?en&1073741824&&(vt(e),e.subtreeFlags&6&&(e.flags|=8192)):vt(e),null;case 24:return null;case 25:return null}throw Error(R(156,e.tag))}function sC(t,e){switch(vh(e),e.tag){case 1:return qt(e.type)&&fu(),t=e.flags,t&65536?(e.flags=t&-65537|128,e):null;case 3:return Es(),Ue(Vt),Ue(Dt),Mh(),t=e.flags,t&65536&&!(t&128)?(e.flags=t&-65537|128,e):null;case 5:return Fh(e),null;case 13:if(Ue(Ye),t=e.memoizedState,t!==null&&t.dehydrated!==null){if(e.alternate===null)throw Error(R(340));ms()}return t=e.flags,t&65536?(e.flags=t&-65537|128,e):null;case 19:return Ue(Ye),null;case 4:return Es(),null;case 10:return xh(e.type._context),null;case 22:case 23:return Wh(),null;case 24:return null;default:return null}}var Ba=!1,wt=!1,oC=typeof WeakSet=="function"?WeakSet:Set,V=null;function Qr(t,e){var n=t.ref;if(n!==null)if(typeof n=="function")try{n(null)}catch(i){Ke(t,e,i)}else n.current=null}function Td(t,e,n){try{n()}catch(i){Ke(t,e,i)}}var Gm=!1;function aC(t,e){if(cd=lu,t=Cb(),Sh(t)){if("selectionStart"in t)var n={start:t.selectionStart,end:t.selectionEnd};else e:{n=(n=t.ownerDocument)&&n.defaultView||window;var i=n.getSelection&&n.getSelection();if(i&&i.rangeCount!==0){n=i.anchorNode;var r=i.anchorOffset,s=i.focusNode;i=i.focusOffset;try{n.nodeType,s.nodeType}catch{n=null;break e}var o=0,a=-1,l=-1,d=0,f=0,u=t,c=null;t:for(;;){for(var h;u!==n||r!==0&&u.nodeType!==3||(a=o+r),u!==s||i!==0&&u.nodeType!==3||(l=o+i),u.nodeType===3&&(o+=u.nodeValue.length),(h=u.firstChild)!==null;)c=u,u=h;for(;;){if(u===t)break t;if(c===n&&++d===r&&(a=o),c===s&&++f===i&&(l=o),(h=u.nextSibling)!==null)break;u=c,c=u.parentNode}u=h}n=a===-1||l===-1?null:{start:a,end:l}}else n=null}n=n||{start:0,end:0}}else n=null;for(dd={focusedElem:t,selectionRange:n},lu=!1,V=e;V!==null;)if(e=V,t=e.child,(e.subtreeFlags&1028)!==0&&t!==null)t.return=e,V=t;else for(;V!==null;){e=V;try{var g=e.alternate;if(e.flags&1024)switch(e.tag){case 0:case 11:case 15:break;case 1:if(g!==null){var E=g.memoizedProps,p=g.memoizedState,m=e.stateNode,b=m.getSnapshotBeforeUpdate(e.elementType===e.type?E:Ln(e.type,E),p);m.__reactInternalSnapshotBeforeUpdate=b}break;case 3:var A=e.stateNode.containerInfo;A.nodeType===1?A.textContent="":A.nodeType===9&&A.documentElement&&A.removeChild(A.documentElement);break;case 5:case 6:case 4:case 17:break;default:throw Error(R(163))}}catch(S){Ke(e,e.return,S)}if(t=e.sibling,t!==null){t.return=e.return,V=t;break}V=e.return}return g=Gm,Gm=!1,g}function po(t,e,n){var i=e.updateQueue;if(i=i!==null?i.lastEffect:null,i!==null){var r=i=i.next;do{if((r.tag&t)===t){var s=r.destroy;r.destroy=void 0,s!==void 0&&Td(e,n,s)}r=r.next}while(r!==i)}}function Zu(t,e){if(e=e.updateQueue,e=e!==null?e.lastEffect:null,e!==null){var n=e=e.next;do{if((n.tag&t)===t){var i=n.create;n.destroy=i()}n=n.next}while(n!==e)}}function Nd(t){var e=t.ref;if(e!==null){var n=t.stateNode;switch(t.tag){case 5:t=n;break;default:t=n}typeof e=="function"?e(t):e.current=t}}function Sp(t){var e=t.alternate;e!==null&&(t.alternate=null,Sp(e)),t.child=null,t.deletions=null,t.sibling=null,t.tag===5&&(e=t.stateNode,e!==null&&(delete e[ti],delete e[Ro],delete e[md],delete e[zv],delete e[Yv])),t.stateNode=null,t.return=null,t.dependencies=null,t.memoizedProps=null,t.memoizedState=null,t.pendingProps=null,t.stateNode=null,t.updateQueue=null}function Ap(t){return t.tag===5||t.tag===3||t.tag===4}function _m(t){e:for(;;){for(;t.sibling===null;){if(t.return===null||Ap(t.return))return null;t=t.return}for(t.sibling.return=t.return,t=t.sibling;t.tag!==5&&t.tag!==6&&t.tag!==18;){if(t.flags&2||t.child===null||t.tag===4)continue e;t.child.return=t,t=t.child}if(!(t.flags&2))return t.stateNode}}function Fd(t,e,n){var i=t.tag;if(i===5||i===6)t=t.stateNode,e?n.nodeType===8?n.parentNode.insertBefore(t,e):n.insertBefore(t,e):(n.nodeType===8?(e=n.parentNode,e.insertBefore(t,n)):(e=n,e.appendChild(t)),n=n._reactRootContainer,n!=null||e.onclick!==null||(e.onclick=hu));else if(i!==4&&(t=t.child,t!==null))for(Fd(t,e,n),t=t.sibling;t!==null;)Fd(t,e,n),t=t.sibling}function Md(t,e,n){var i=t.tag;if(i===5||i===6)t=t.stateNode,e?n.insertBefore(t,e):n.appendChild(t);else if(i!==4&&(t=t.child,t!==null))for(Md(t,e,n),t=t.sibling;t!==null;)Md(t,e,n),t=t.sibling}var bt=null,In=!1;function Mi(t,e,n){for(n=n.child;n!==null;)vp(t,e,n),n=n.sibling}function vp(t,e,n){if(ni&&typeof ni.onCommitFiberUnmount=="function")try{ni.onCommitFiberUnmount(Hu,n)}catch{}switch(n.tag){case 5:wt||Qr(n,e);case 6:var i=bt,r=In;bt=null,Mi(t,e,n),bt=i,In=r,bt!==null&&(In?(t=bt,n=n.stateNode,t.nodeType===8?t.parentNode.removeChild(n):t.removeChild(n)):bt.removeChild(n.stateNode));break;case 18:bt!==null&&(In?(t=bt,n=n.stateNode,t.nodeType===8?dc(t.parentNode,n):t.nodeType===1&&dc(t,n),Po(t)):dc(bt,n.stateNode));break;case 4:i=bt,r=In,bt=n.stateNode.containerInfo,In=!0,Mi(t,e,n),bt=i,In=r;break;case 0:case 11:case 14:case 15:if(!wt&&(i=n.updateQueue,i!==null&&(i=i.lastEffect,i!==null))){r=i=i.next;do{var s=r,o=s.destroy;s=s.tag,o!==void 0&&(s&2||s&4)&&Td(n,e,o),r=r.next}while(r!==i)}Mi(t,e,n);break;case 1:if(!wt&&(Qr(n,e),i=n.stateNode,typeof i.componentWillUnmount=="function"))try{i.props=n.memoizedProps,i.state=n.memoizedState,i.componentWillUnmount()}catch(a){Ke(n,e,a)}Mi(t,e,n);break;case 21:Mi(t,e,n);break;case 22:n.mode&1?(wt=(i=wt)||n.memoizedState!==null,Mi(t,e,n),wt=i):Mi(t,e,n);break;default:Mi(t,e,n)}}function $m(t){var e=t.updateQueue;if(e!==null){t.updateQueue=null;var n=t.stateNode;n===null&&(n=t.stateNode=new oC),e.forEach(function(i){var r=EC.bind(null,t,i);n.has(i)||(n.add(i),i.then(r,r))})}}function Mn(t,e){var n=e.deletions;if(n!==null)for(var i=0;i<n.length;i++){var r=n[i];try{var s=t,o=e,a=o;e:for(;a!==null;){switch(a.tag){case 5:bt=a.stateNode,In=!1;break e;case 3:bt=a.stateNode.containerInfo,In=!0;break e;case 4:bt=a.stateNode.containerInfo,In=!0;break e}a=a.return}if(bt===null)throw Error(R(160));vp(s,o,r),bt=null,In=!1;var l=r.alternate;l!==null&&(l.return=null),r.return=null}catch(d){Ke(r,e,d)}}if(e.subtreeFlags&12854)for(e=e.child;e!==null;)Cp(e,t),e=e.sibling}function Cp(t,e){var n=t.alternate,i=t.flags;switch(t.tag){case 0:case 11:case 14:case 15:if(Mn(e,t),_n(t),i&4){try{po(3,t,t.return),Zu(3,t)}catch(E){Ke(t,t.return,E)}try{po(5,t,t.return)}catch(E){Ke(t,t.return,E)}}break;case 1:Mn(e,t),_n(t),i&512&&n!==null&&Qr(n,n.return);break;case 5:if(Mn(e,t),_n(t),i&512&&n!==null&&Qr(n,n.return),t.flags&32){var r=t.stateNode;try{To(r,"")}catch(E){Ke(t,t.return,E)}}if(i&4&&(r=t.stateNode,r!=null)){var s=t.memoizedProps,o=n!==null?n.memoizedProps:s,a=t.type,l=t.updateQueue;if(t.updateQueue=null,l!==null)try{a==="input"&&s.type==="radio"&&s.name!=null&&zE(r,s),ed(a,o);var d=ed(a,s);for(o=0;o<l.length;o+=2){var f=l[o],u=l[o+1];f==="style"?ZE(r,u):f==="dangerouslySetInnerHTML"?qE(r,u):f==="children"?To(r,u):oh(r,f,u,d)}switch(a){case"input":Kc(r,s);break;case"textarea":YE(r,s);break;case"select":var c=r._wrapperState.wasMultiple;r._wrapperState.wasMultiple=!!s.multiple;var h=s.value;h!=null?ts(r,!!s.multiple,h,!1):c!==!!s.multiple&&(s.defaultValue!=null?ts(r,!!s.multiple,s.defaultValue,!0):ts(r,!!s.multiple,s.multiple?[]:"",!1))}r[Ro]=s}catch(E){Ke(t,t.return,E)}}break;case 6:if(Mn(e,t),_n(t),i&4){if(t.stateNode===null)throw Error(R(162));r=t.stateNode,s=t.memoizedProps;try{r.nodeValue=s}catch(E){Ke(t,t.return,E)}}break;case 3:if(Mn(e,t),_n(t),i&4&&n!==null&&n.memoizedState.isDehydrated)try{Po(e.containerInfo)}catch(E){Ke(t,t.return,E)}break;case 4:Mn(e,t),_n(t);break;case 13:Mn(e,t),_n(t),r=t.child,r.flags&8192&&(s=r.memoizedState!==null,r.stateNode.isHidden=s,!s||r.alternate!==null&&r.alternate.memoizedState!==null||(Uh=et())),i&4&&$m(t);break;case 22:if(f=n!==null&&n.memoizedState!==null,t.mode&1?(wt=(d=wt)||f,Mn(e,t),wt=d):Mn(e,t),_n(t),i&8192){if(d=t.memoizedState!==null,(t.stateNode.isHidden=d)&&!f&&t.mode&1)for(V=t,f=t.child;f!==null;){for(u=V=f;V!==null;){switch(c=V,h=c.child,c.tag){case 0:case 11:case 14:case 15:po(4,c,c.return);break;case 1:Qr(c,c.return);var g=c.stateNode;if(typeof g.componentWillUnmount=="function"){i=c,n=c.return;try{e=i,g.props=e.memoizedProps,g.state=e.memoizedState,g.componentWillUnmount()}catch(E){Ke(i,n,E)}}break;case 5:Qr(c,c.return);break;case 22:if(c.memoizedState!==null){tg(u);continue}}h!==null?(h.return=c,V=h):tg(u)}f=f.sibling}e:for(f=null,u=t;;){if(u.tag===5){if(f===null){f=u;try{r=u.stateNode,d?(s=r.style,typeof s.setProperty=="function"?s.setProperty("display","none","important"):s.display="none"):(a=u.stateNode,l=u.memoizedProps.style,o=l!=null&&l.hasOwnProperty("display")?l.display:null,a.style.display=JE("display",o))}catch(E){Ke(t,t.return,E)}}}else if(u.tag===6){if(f===null)try{u.stateNode.nodeValue=d?"":u.memoizedProps}catch(E){Ke(t,t.return,E)}}else if((u.tag!==22&&u.tag!==23||u.memoizedState===null||u===t)&&u.child!==null){u.child.return=u,u=u.child;continue}if(u===t)break e;for(;u.sibling===null;){if(u.return===null||u.return===t)break e;f===u&&(f=null),u=u.return}f===u&&(f=null),u.sibling.return=u.return,u=u.sibling}}break;case 19:Mn(e,t),_n(t),i&4&&$m(t);break;case 21:break;default:Mn(e,t),_n(t)}}function _n(t){var e=t.flags;if(e&2){try{e:{for(var n=t.return;n!==null;){if(Ap(n)){var i=n;break e}n=n.return}throw Error(R(160))}switch(i.tag){case 5:var r=i.stateNode;i.flags&32&&(To(r,""),i.flags&=-33);var s=_m(t);Md(t,s,r);break;case 3:case 4:var o=i.stateNode.containerInfo,a=_m(t);Fd(t,a,o);break;default:throw Error(R(161))}}catch(l){Ke(t,t.return,l)}t.flags&=-3}e&4096&&(t.flags&=-4097)}function uC(t,e,n){V=t,wp(t)}function wp(t,e,n){for(var i=(t.mode&1)!==0;V!==null;){var r=V,s=r.child;if(r.tag===22&&i){var o=r.memoizedState!==null||Ba;if(!o){var a=r.alternate,l=a!==null&&a.memoizedState!==null||wt;a=Ba;var d=wt;if(Ba=o,(wt=l)&&!d)for(V=r;V!==null;)o=V,l=o.child,o.tag===22&&o.memoizedState!==null?ng(r):l!==null?(l.return=o,V=l):ng(r);for(;s!==null;)V=s,wp(s),s=s.sibling;V=r,Ba=a,wt=d}eg(t)}else r.subtreeFlags&8772&&s!==null?(s.return=r,V=s):eg(t)}}function eg(t){for(;V!==null;){var e=V;if(e.flags&8772){var n=e.alternate;try{if(e.flags&8772)switch(e.tag){case 0:case 11:case 15:wt||Zu(5,e);break;case 1:var i=e.stateNode;if(e.flags&4&&!wt)if(n===null)i.componentDidMount();else{var r=e.elementType===e.type?n.memoizedProps:Ln(e.type,n.memoizedProps);i.componentDidUpdate(r,n.memoizedState,i.__reactInternalSnapshotBeforeUpdate)}var s=e.updateQueue;s!==null&&Im(e,s,i);break;case 3:var o=e.updateQueue;if(o!==null){if(n=null,e.child!==null)switch(e.child.tag){case 5:n=e.child.stateNode;break;case 1:n=e.child.stateNode}Im(e,o,n)}break;case 5:var a=e.stateNode;if(n===null&&e.flags&4){n=a;var l=e.memoizedProps;switch(e.type){case"button":case"input":case"select":case"textarea":l.autoFocus&&n.focus();break;case"img":l.src&&(n.src=l.src)}}break;case 6:break;case 4:break;case 12:break;case 13:if(e.memoizedState===null){var d=e.alternate;if(d!==null){var f=d.memoizedState;if(f!==null){var u=f.dehydrated;u!==null&&Po(u)}}}break;case 19:case 17:case 21:case 22:case 23:case 25:break;default:throw Error(R(163))}wt||e.flags&512&&Nd(e)}catch(c){Ke(e,e.return,c)}}if(e===t){V=null;break}if(n=e.sibling,n!==null){n.return=e.return,V=n;break}V=e.return}}function tg(t){for(;V!==null;){var e=V;if(e===t){V=null;break}var n=e.sibling;if(n!==null){n.return=e.return,V=n;break}V=e.return}}function ng(t){for(;V!==null;){var e=V;try{switch(e.tag){case 0:case 11:case 15:var n=e.return;try{Zu(4,e)}catch(l){Ke(e,n,l)}break;case 1:var i=e.stateNode;if(typeof i.componentDidMount=="function"){var r=e.return;try{i.componentDidMount()}catch(l){Ke(e,r,l)}}var s=e.return;try{Nd(e)}catch(l){Ke(e,s,l)}break;case 5:var o=e.return;try{Nd(e)}catch(l){Ke(e,o,l)}}}catch(l){Ke(e,e.return,l)}if(e===t){V=null;break}var a=e.sibling;if(a!==null){a.return=e.return,V=a;break}V=e.return}}var lC=Math.ceil,wu=xi.ReactCurrentDispatcher,Ih=xi.ReactCurrentOwner,Cn=xi.ReactCurrentBatchConfig,Se=0,ht=null,rt=null,pt=0,en=0,Gr=nr(0),ut=0,Xo=null,vr=0,Ku=0,jh=0,So=null,Ut=null,Uh=0,ps=1/0,hi=null,Du=!1,Pd=null,qi=null,Ta=!1,ji=null,xu=0,Ao=0,kd=null,qa=-1,Ja=0;function kt(){return Se&6?et():qa!==-1?qa:qa=et()}function Ji(t){return t.mode&1?Se&2&&pt!==0?pt&-pt:qv.transition!==null?(Ja===0&&(Ja=ob()),Ja):(t=xe,t!==0||(t=window.event,t=t===void 0?16:fb(t.type)),t):1}function Vn(t,e,n,i){if(50<Ao)throw Ao=0,kd=null,Error(R(185));Ko(t,n,i),(!(Se&2)||t!==ht)&&(t===ht&&(!(Se&2)&&(Ku|=n),ut===4&&yi(t,pt)),Jt(t,i),n===1&&Se===0&&!(e.mode&1)&&(ps=et()+500,Vu&&ir()))}function Jt(t,e){var n=t.callbackNode;qA(t,e);var i=uu(t,t===ht?pt:0);if(i===0)n!==null&&dm(n),t.callbackNode=null,t.callbackPriority=0;else if(e=i&-i,t.callbackPriority!==e){if(n!=null&&dm(n),e===1)t.tag===0?Vv(ig.bind(null,t)):kb(ig.bind(null,t)),Wv(function(){!(Se&6)&&ir()}),n=null;else{switch(ab(i)){case 1:n=dh;break;case 4:n=rb;break;case 16:n=au;break;case 536870912:n=sb;break;default:n=au}n=Pp(n,Dp.bind(null,t))}t.callbackPriority=e,t.callbackNode=n}}function Dp(t,e){if(qa=-1,Ja=0,Se&6)throw Error(R(327));var n=t.callbackNode;if(os()&&t.callbackNode!==n)return null;var i=uu(t,t===ht?pt:0);if(i===0)return null;if(i&30||i&t.expiredLanes||e)e=Bu(t,i);else{e=i;var r=Se;Se|=2;var s=Bp();(ht!==t||pt!==e)&&(hi=null,ps=et()+500,mr(t,e));do try{hC();break}catch(a){xp(t,a)}while(1);Dh(),wu.current=s,Se=r,rt!==null?e=0:(ht=null,pt=0,e=ut)}if(e!==0){if(e===2&&(r=sd(t),r!==0&&(i=r,e=Ld(t,r))),e===1)throw n=Xo,mr(t,0),yi(t,i),Jt(t,et()),n;if(e===6)yi(t,i);else{if(r=t.current.alternate,!(i&30)&&!cC(r)&&(e=Bu(t,i),e===2&&(s=sd(t),s!==0&&(i=s,e=Ld(t,s))),e===1))throw n=Xo,mr(t,0),yi(t,i),Jt(t,et()),n;switch(t.finishedWork=r,t.finishedLanes=i,e){case 0:case 1:throw Error(R(345));case 2:ar(t,Ut,hi);break;case 3:if(yi(t,i),(i&130023424)===i&&(e=Uh+500-et(),10<e)){if(uu(t,0)!==0)break;if(r=t.suspendedLanes,(r&i)!==i){kt(),t.pingedLanes|=t.suspendedLanes&r;break}t.timeoutHandle=fd(ar.bind(null,t,Ut,hi),e);break}ar(t,Ut,hi);break;case 4:if(yi(t,i),(i&4194240)===i)break;for(e=t.eventTimes,r=-1;0<i;){var o=31-Yn(i);s=1<<o,o=e[o],o>r&&(r=o),i&=~s}if(i=r,i=et()-i,i=(120>i?120:480>i?480:1080>i?1080:1920>i?1920:3e3>i?3e3:4320>i?4320:1960*lC(i/1960))-i,10<i){t.timeoutHandle=fd(ar.bind(null,t,Ut,hi),i);break}ar(t,Ut,hi);break;case 5:ar(t,Ut,hi);break;default:throw Error(R(329))}}}return Jt(t,et()),t.callbackNode===n?Dp.bind(null,t):null}function Ld(t,e){var n=So;return t.current.memoizedState.isDehydrated&&(mr(t,e).flags|=256),t=Bu(t,e),t!==2&&(e=Ut,Ut=n,e!==null&&Od(e)),t}function Od(t){Ut===null?Ut=t:Ut.push.apply(Ut,t)}function cC(t){for(var e=t;;){if(e.flags&16384){var n=e.updateQueue;if(n!==null&&(n=n.stores,n!==null))for(var i=0;i<n.length;i++){var r=n[i],s=r.getSnapshot;r=r.value;try{if(!Jn(s(),r))return!1}catch{return!1}}}if(n=e.child,e.subtreeFlags&16384&&n!==null)n.return=e,e=n;else{if(e===t)break;for(;e.sibling===null;){if(e.return===null||e.return===t)return!0;e=e.return}e.sibling.return=e.return,e=e.sibling}}return!0}function yi(t,e){for(e&=~jh,e&=~Ku,t.suspendedLanes|=e,t.pingedLanes&=~e,t=t.expirationTimes;0<e;){var n=31-Yn(e),i=1<<n;t[n]=-1,e&=~i}}function ig(t){if(Se&6)throw Error(R(327));os();var e=uu(t,0);if(!(e&1))return Jt(t,et()),null;var n=Bu(t,e);if(t.tag!==0&&n===2){var i=sd(t);i!==0&&(e=i,n=Ld(t,i))}if(n===1)throw n=Xo,mr(t,0),yi(t,e),Jt(t,et()),n;if(n===6)throw Error(R(345));return t.finishedWork=t.current.alternate,t.finishedLanes=e,ar(t,Ut,hi),Jt(t,et()),null}function Hh(t,e){var n=Se;Se|=1;try{return t(e)}finally{Se=n,Se===0&&(ps=et()+500,Vu&&ir())}}function Cr(t){ji!==null&&ji.tag===0&&!(Se&6)&&os();var e=Se;Se|=1;var n=Cn.transition,i=xe;try{if(Cn.transition=null,xe=1,t)return t()}finally{xe=i,Cn.transition=n,Se=e,!(Se&6)&&ir()}}function Wh(){en=Gr.current,Ue(Gr)}function mr(t,e){t.finishedWork=null,t.finishedLanes=0;var n=t.timeoutHandle;if(n!==-1&&(t.timeoutHandle=-1,Hv(n)),rt!==null)for(n=rt.return;n!==null;){var i=n;switch(vh(i),i.tag){case 1:i=i.type.childContextTypes,i!=null&&fu();break;case 3:Es(),Ue(Vt),Ue(Dt),Mh();break;case 5:Fh(i);break;case 4:Es();break;case 13:Ue(Ye);break;case 19:Ue(Ye);break;case 10:xh(i.type._context);break;case 22:case 23:Wh()}n=n.return}if(ht=t,rt=t=Zi(t.current,null),pt=en=e,ut=0,Xo=null,jh=Ku=vr=0,Ut=So=null,cr!==null){for(e=0;e<cr.length;e++)if(n=cr[e],i=n.interleaved,i!==null){n.interleaved=null;var r=i.next,s=n.pending;if(s!==null){var o=s.next;s.next=r,i.next=o}n.pending=i}cr=null}return t}function xp(t,e){do{var n=rt;try{if(Dh(),za.current=Cu,vu){for(var i=Ve.memoizedState;i!==null;){var r=i.queue;r!==null&&(r.pending=null),i=i.next}vu=!1}if(Ar=0,dt=at=Ve=null,bo=!1,Uo=0,Ih.current=null,n===null||n.return===null){ut=1,Xo=e,rt=null;break}e:{var s=t,o=n.return,a=n,l=e;if(e=pt,a.flags|=32768,l!==null&&typeof l=="object"&&typeof l.then=="function"){var d=l,f=a,u=f.tag;if(!(f.mode&1)&&(u===0||u===11||u===15)){var c=f.alternate;c?(f.updateQueue=c.updateQueue,f.memoizedState=c.memoizedState,f.lanes=c.lanes):(f.updateQueue=null,f.memoizedState=null)}var h=Ym(o);if(h!==null){h.flags&=-257,Vm(h,o,a,s,e),h.mode&1&&zm(s,d,e),e=h,l=d;var g=e.updateQueue;if(g===null){var E=new Set;E.add(l),e.updateQueue=E}else g.add(l);break e}else{if(!(e&1)){zm(s,d,e),Xh();break e}l=Error(R(426))}}else if(We&&a.mode&1){var p=Ym(o);if(p!==null){!(p.flags&65536)&&(p.flags|=256),Vm(p,o,a,s,e),Ch(bs(l,a));break e}}s=l=bs(l,a),ut!==4&&(ut=2),So===null?So=[s]:So.push(s),s=o;do{switch(s.tag){case 3:s.flags|=65536,e&=-e,s.lanes|=e;var m=up(s,l,e);Rm(s,m);break e;case 1:a=l;var b=s.type,A=s.stateNode;if(!(s.flags&128)&&(typeof b.getDerivedStateFromError=="function"||A!==null&&typeof A.componentDidCatch=="function"&&(qi===null||!qi.has(A)))){s.flags|=65536,e&=-e,s.lanes|=e;var S=lp(s,a,e);Rm(s,S);break e}}s=s.return}while(s!==null)}Np(n)}catch(w){e=w,rt===n&&n!==null&&(rt=n=n.return);continue}break}while(1)}function Bp(){var t=wu.current;return wu.current=Cu,t===null?Cu:t}function Xh(){(ut===0||ut===3||ut===2)&&(ut=4),ht===null||!(vr&268435455)&&!(Ku&268435455)||yi(ht,pt)}function Bu(t,e){var n=Se;Se|=2;var i=Bp();(ht!==t||pt!==e)&&(hi=null,mr(t,e));do try{dC();break}catch(r){xp(t,r)}while(1);if(Dh(),Se=n,wu.current=i,rt!==null)throw Error(R(261));return ht=null,pt=0,ut}function dC(){for(;rt!==null;)Tp(rt)}function hC(){for(;rt!==null&&!IA();)Tp(rt)}function Tp(t){var e=Mp(t.alternate,t,en);t.memoizedProps=t.pendingProps,e===null?Np(t):rt=e,Ih.current=null}function Np(t){var e=t;do{var n=e.alternate;if(t=e.return,e.flags&32768){if(n=sC(n,e),n!==null){n.flags&=32767,rt=n;return}if(t!==null)t.flags|=32768,t.subtreeFlags=0,t.deletions=null;else{ut=6,rt=null;return}}else if(n=rC(n,e,en),n!==null){rt=n;return}if(e=e.sibling,e!==null){rt=e;return}rt=e=t}while(e!==null);ut===0&&(ut=5)}function ar(t,e,n){var i=xe,r=Cn.transition;try{Cn.transition=null,xe=1,fC(t,e,n,i)}finally{Cn.transition=r,xe=i}return null}function fC(t,e,n,i){do os();while(ji!==null);if(Se&6)throw Error(R(327));n=t.finishedWork;var r=t.finishedLanes;if(n===null)return null;if(t.finishedWork=null,t.finishedLanes=0,n===t.current)throw Error(R(177));t.callbackNode=null,t.callbackPriority=0;var s=n.lanes|n.childLanes;if(JA(t,s),t===ht&&(rt=ht=null,pt=0),!(n.subtreeFlags&2064)&&!(n.flags&2064)||Ta||(Ta=!0,Pp(au,function(){return os(),null})),s=(n.flags&15990)!==0,n.subtreeFlags&15990||s){s=Cn.transition,Cn.transition=null;var o=xe;xe=1;var a=Se;Se|=4,Ih.current=null,aC(t,n),Cp(n,t),Lv(dd),lu=!!cd,dd=cd=null,t.current=n,uC(n),jA(),Se=a,xe=o,Cn.transition=s}else t.current=n;if(Ta&&(Ta=!1,ji=t,xu=r),s=t.pendingLanes,s===0&&(qi=null),WA(n.stateNode),Jt(t,et()),e!==null)for(i=t.onRecoverableError,n=0;n<e.length;n++)r=e[n],i(r.value,{componentStack:r.stack,digest:r.digest});if(Du)throw Du=!1,t=Pd,Pd=null,t;return xu&1&&t.tag!==0&&os(),s=t.pendingLanes,s&1?t===kd?Ao++:(Ao=0,kd=t):Ao=0,ir(),null}function os(){if(ji!==null){var t=ab(xu),e=Cn.transition,n=xe;try{if(Cn.transition=null,xe=16>t?16:t,ji===null)var i=!1;else{if(t=ji,ji=null,xu=0,Se&6)throw Error(R(331));var r=Se;for(Se|=4,V=t.current;V!==null;){var s=V,o=s.child;if(V.flags&16){var a=s.deletions;if(a!==null){for(var l=0;l<a.length;l++){var d=a[l];for(V=d;V!==null;){var f=V;switch(f.tag){case 0:case 11:case 15:po(8,f,s)}var u=f.child;if(u!==null)u.return=f,V=u;else for(;V!==null;){f=V;var c=f.sibling,h=f.return;if(Sp(f),f===d){V=null;break}if(c!==null){c.return=h,V=c;break}V=h}}}var g=s.alternate;if(g!==null){var E=g.child;if(E!==null){g.child=null;do{var p=E.sibling;E.sibling=null,E=p}while(E!==null)}}V=s}}if(s.subtreeFlags&2064&&o!==null)o.return=s,V=o;else e:for(;V!==null;){if(s=V,s.flags&2048)switch(s.tag){case 0:case 11:case 15:po(9,s,s.return)}var m=s.sibling;if(m!==null){m.return=s.return,V=m;break e}V=s.return}}var b=t.current;for(V=b;V!==null;){o=V;var A=o.child;if(o.subtreeFlags&2064&&A!==null)A.return=o,V=A;else e:for(o=b;V!==null;){if(a=V,a.flags&2048)try{switch(a.tag){case 0:case 11:case 15:Zu(9,a)}}catch(w){Ke(a,a.return,w)}if(a===o){V=null;break e}var S=a.sibling;if(S!==null){S.return=a.return,V=S;break e}V=a.return}}if(Se=r,ir(),ni&&typeof ni.onPostCommitFiberRoot=="function")try{ni.onPostCommitFiberRoot(Hu,t)}catch{}i=!0}return i}finally{xe=n,Cn.transition=e}}return!1}function rg(t,e,n){e=bs(n,e),e=up(t,e,1),t=Vi(t,e,1),e=kt(),t!==null&&(Ko(t,1,e),Jt(t,e))}function Ke(t,e,n){if(t.tag===3)rg(t,t,n);else for(;e!==null;){if(e.tag===3){rg(e,t,n);break}else if(e.tag===1){var i=e.stateNode;if(typeof e.type.getDerivedStateFromError=="function"||typeof i.componentDidCatch=="function"&&(qi===null||!qi.has(i))){t=bs(n,t),t=lp(e,t,1),e=Vi(e,t,1),t=kt(),e!==null&&(Ko(e,1,t),Jt(e,t));break}}e=e.return}}function mC(t,e,n){var i=t.pingCache;i!==null&&i.delete(e),e=kt(),t.pingedLanes|=t.suspendedLanes&n,ht===t&&(pt&n)===n&&(ut===4||ut===3&&(pt&130023424)===pt&&500>et()-Uh?mr(t,0):jh|=n),Jt(t,e)}function Fp(t,e){e===0&&(t.mode&1?(e=ba,ba<<=1,!(ba&130023424)&&(ba=4194304)):e=1);var n=kt();t=wi(t,e),t!==null&&(Ko(t,e,n),Jt(t,n))}function gC(t){var e=t.memoizedState,n=0;e!==null&&(n=e.retryLane),Fp(t,n)}function EC(t,e){var n=0;switch(t.tag){case 13:var i=t.stateNode,r=t.memoizedState;r!==null&&(n=r.retryLane);break;case 19:i=t.stateNode;break;default:throw Error(R(314))}i!==null&&i.delete(e),Fp(t,n)}var Mp;Mp=function(t,e,n){if(t!==null)if(t.memoizedProps!==e.pendingProps||Vt.current)Xt=!0;else{if(!(t.lanes&n)&&!(e.flags&128))return Xt=!1,iC(t,e,n);Xt=!!(t.flags&131072)}else Xt=!1,We&&e.flags&1048576&&Lb(e,Eu,e.index);switch(e.lanes=0,e.tag){case 2:var i=e.type;Va(t,e),t=e.pendingProps;var r=fs(e,Dt.current);ss(e,n),r=kh(null,e,i,t,r,n);var s=Lh();return e.flags|=1,typeof r=="object"&&r!==null&&typeof r.render=="function"&&r.$$typeof===void 0?(e.tag=1,e.memoizedState=null,e.updateQueue=null,qt(i)?(s=!0,mu(e)):s=!1,e.memoizedState=r.state!==null&&r.state!==void 0?r.state:null,Th(e),r.updater=qu,e.stateNode=r,r._reactInternals=e,Ad(e,i,t,n),e=wd(null,e,i,!0,s,n)):(e.tag=0,We&&s&&Ah(e),Tt(null,e,r,n),e=e.child),e;case 16:i=e.elementType;e:{switch(Va(t,e),t=e.pendingProps,r=i._init,i=r(i._payload),e.type=i,r=e.tag=pC(i),t=Ln(i,t),r){case 0:e=Cd(null,e,i,t,n);break e;case 1:e=Zm(null,e,i,t,n);break e;case 11:e=qm(null,e,i,t,n);break e;case 14:e=Jm(null,e,i,Ln(i.type,t),n);break e}throw Error(R(306,i,""))}return e;case 0:return i=e.type,r=e.pendingProps,r=e.elementType===i?r:Ln(i,r),Cd(t,e,i,r,n);case 1:return i=e.type,r=e.pendingProps,r=e.elementType===i?r:Ln(i,r),Zm(t,e,i,r,n);case 3:e:{if(fp(e),t===null)throw Error(R(387));i=e.pendingProps,s=e.memoizedState,r=s.element,Ib(t,e),Su(e,i,null,n);var o=e.memoizedState;if(i=o.element,s.isDehydrated)if(s={element:i,isDehydrated:!1,cache:o.cache,pendingSuspenseBoundaries:o.pendingSuspenseBoundaries,transitions:o.transitions},e.updateQueue.baseState=s,e.memoizedState=s,e.flags&256){r=bs(Error(R(423)),e),e=Km(t,e,i,n,r);break e}else if(i!==r){r=bs(Error(R(424)),e),e=Km(t,e,i,n,r);break e}else for(tn=Yi(e.stateNode.containerInfo.firstChild),rn=e,We=!0,Hn=null,n=Wb(e,null,i,n),e.child=n;n;)n.flags=n.flags&-3|4096,n=n.sibling;else{if(ms(),i===r){e=Di(t,e,n);break e}Tt(t,e,i,n)}e=e.child}return e;case 5:return Xb(e),t===null&&bd(e),i=e.type,r=e.pendingProps,s=t!==null?t.memoizedProps:null,o=r.children,hd(i,r)?o=null:s!==null&&hd(i,s)&&(e.flags|=32),hp(t,e),Tt(t,e,o,n),e.child;case 6:return t===null&&bd(e),null;case 13:return mp(t,e,n);case 4:return Nh(e,e.stateNode.containerInfo),i=e.pendingProps,t===null?e.child=gs(e,null,i,n):Tt(t,e,i,n),e.child;case 11:return i=e.type,r=e.pendingProps,r=e.elementType===i?r:Ln(i,r),qm(t,e,i,r,n);case 7:return Tt(t,e,e.pendingProps,n),e.child;case 8:return Tt(t,e,e.pendingProps.children,n),e.child;case 12:return Tt(t,e,e.pendingProps.children,n),e.child;case 10:e:{if(i=e.type._context,r=e.pendingProps,s=e.memoizedProps,o=r.value,ye(bu,i._currentValue),i._currentValue=o,s!==null)if(Jn(s.value,o)){if(s.children===r.children&&!Vt.current){e=Di(t,e,n);break e}}else for(s=e.child,s!==null&&(s.return=e);s!==null;){var a=s.dependencies;if(a!==null){o=s.child;for(var l=a.firstContext;l!==null;){if(l.context===i){if(s.tag===1){l=pi(-1,n&-n),l.tag=2;var d=s.updateQueue;if(d!==null){d=d.shared;var f=d.pending;f===null?l.next=l:(l.next=f.next,f.next=l),d.pending=l}}s.lanes|=n,l=s.alternate,l!==null&&(l.lanes|=n),pd(s.return,n,e),a.lanes|=n;break}l=l.next}}else if(s.tag===10)o=s.type===e.type?null:s.child;else if(s.tag===18){if(o=s.return,o===null)throw Error(R(341));o.lanes|=n,a=o.alternate,a!==null&&(a.lanes|=n),pd(o,n,e),o=s.sibling}else o=s.child;if(o!==null)o.return=s;else for(o=s;o!==null;){if(o===e){o=null;break}if(s=o.sibling,s!==null){s.return=o.return,o=s;break}o=o.return}s=o}Tt(t,e,r.children,n),e=e.child}return e;case 9:return r=e.type,i=e.pendingProps.children,ss(e,n),r=Dn(r),i=i(r),e.flags|=1,Tt(t,e,i,n),e.child;case 14:return i=e.type,r=Ln(i,e.pendingProps),r=Ln(i.type,r),Jm(t,e,i,r,n);case 15:return cp(t,e,e.type,e.pendingProps,n);case 17:return i=e.type,r=e.pendingProps,r=e.elementType===i?r:Ln(i,r),Va(t,e),e.tag=1,qt(i)?(t=!0,mu(e)):t=!1,ss(e,n),Ub(e,i,r),Ad(e,i,r,n),wd(null,e,i,!0,t,n);case 19:return gp(t,e,n);case 22:return dp(t,e,n)}throw Error(R(156,e.tag))};function Pp(t,e){return ib(t,e)}function bC(t,e,n,i){this.tag=t,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=e,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=i,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function An(t,e,n,i){return new bC(t,e,n,i)}function zh(t){return t=t.prototype,!(!t||!t.isReactComponent)}function pC(t){if(typeof t=="function")return zh(t)?1:0;if(t!=null){if(t=t.$$typeof,t===uh)return 11;if(t===lh)return 14}return 2}function Zi(t,e){var n=t.alternate;return n===null?(n=An(t.tag,e,t.key,t.mode),n.elementType=t.elementType,n.type=t.type,n.stateNode=t.stateNode,n.alternate=t,t.alternate=n):(n.pendingProps=e,n.type=t.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=t.flags&14680064,n.childLanes=t.childLanes,n.lanes=t.lanes,n.child=t.child,n.memoizedProps=t.memoizedProps,n.memoizedState=t.memoizedState,n.updateQueue=t.updateQueue,e=t.dependencies,n.dependencies=e===null?null:{lanes:e.lanes,firstContext:e.firstContext},n.sibling=t.sibling,n.index=t.index,n.ref=t.ref,n}function Za(t,e,n,i,r,s){var o=2;if(i=t,typeof t=="function")zh(t)&&(o=1);else if(typeof t=="string")o=5;else e:switch(t){case Wr:return gr(n.children,r,s,e);case ah:o=8,r|=8;break;case Yc:return t=An(12,n,e,r|2),t.elementType=Yc,t.lanes=s,t;case Vc:return t=An(13,n,e,r),t.elementType=Vc,t.lanes=s,t;case qc:return t=An(19,n,e,r),t.elementType=qc,t.lanes=s,t;case HE:return Qu(n,r,s,e);default:if(typeof t=="object"&&t!==null)switch(t.$$typeof){case jE:o=10;break e;case UE:o=9;break e;case uh:o=11;break e;case lh:o=14;break e;case ki:o=16,i=null;break e}throw Error(R(130,t==null?t:typeof t,""))}return e=An(o,n,e,r),e.elementType=t,e.type=i,e.lanes=s,e}function gr(t,e,n,i){return t=An(7,t,i,e),t.lanes=n,t}function Qu(t,e,n,i){return t=An(22,t,i,e),t.elementType=HE,t.lanes=n,t.stateNode={isHidden:!1},t}function Sc(t,e,n){return t=An(6,t,null,e),t.lanes=n,t}function Ac(t,e,n){return e=An(4,t.children!==null?t.children:[],t.key,e),e.lanes=n,e.stateNode={containerInfo:t.containerInfo,pendingChildren:null,implementation:t.implementation},e}function SC(t,e,n,i,r){this.tag=e,this.containerInfo=t,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=ec(0),this.expirationTimes=ec(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=ec(0),this.identifierPrefix=i,this.onRecoverableError=r,this.mutableSourceEagerHydrationData=null}function Yh(t,e,n,i,r,s,o,a,l){return t=new SC(t,e,n,a,l),e===1?(e=1,s===!0&&(e|=8)):e=0,s=An(3,null,null,e),t.current=s,s.stateNode=t,s.memoizedState={element:i,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null},Th(s),t}function AC(t,e,n){var i=3<arguments.length&&arguments[3]!==void 0?arguments[3]:null;return{$$typeof:Hr,key:i==null?null:""+i,children:t,containerInfo:e,implementation:n}}function kp(t){if(!t)return Gi;t=t._reactInternals;e:{if(Pr(t)!==t||t.tag!==1)throw Error(R(170));var e=t;do{switch(e.tag){case 3:e=e.stateNode.context;break e;case 1:if(qt(e.type)){e=e.stateNode.__reactInternalMemoizedMergedChildContext;break e}}e=e.return}while(e!==null);throw Error(R(171))}if(t.tag===1){var n=t.type;if(qt(n))return Pb(t,n,e)}return e}function Lp(t,e,n,i,r,s,o,a,l){return t=Yh(n,i,!0,t,r,s,o,a,l),t.context=kp(null),n=t.current,i=kt(),r=Ji(n),s=pi(i,r),s.callback=e??null,Vi(n,s,r),t.current.lanes=r,Ko(t,r,i),Jt(t,i),t}function Gu(t,e,n,i){var r=e.current,s=kt(),o=Ji(r);return n=kp(n),e.context===null?e.context=n:e.pendingContext=n,e=pi(s,o),e.payload={element:t},i=i===void 0?null:i,i!==null&&(e.callback=i),t=Vi(r,e,o),t!==null&&(Vn(t,r,o,s),Xa(t,r,o)),o}function Tu(t){if(t=t.current,!t.child)return null;switch(t.child.tag){case 5:return t.child.stateNode;default:return t.child.stateNode}}function sg(t,e){if(t=t.memoizedState,t!==null&&t.dehydrated!==null){var n=t.retryLane;t.retryLane=n!==0&&n<e?n:e}}function Vh(t,e){sg(t,e),(t=t.alternate)&&sg(t,e)}function vC(){return null}var Op=typeof reportError=="function"?reportError:function(t){console.error(t)};function qh(t){this._internalRoot=t}_u.prototype.render=qh.prototype.render=function(t){var e=this._internalRoot;if(e===null)throw Error(R(409));Gu(t,e,null,null)};_u.prototype.unmount=qh.prototype.unmount=function(){var t=this._internalRoot;if(t!==null){this._internalRoot=null;var e=t.containerInfo;Cr(function(){Gu(null,t,null,null)}),e[Ci]=null}};function _u(t){this._internalRoot=t}_u.prototype.unstable_scheduleHydration=function(t){if(t){var e=cb();t={blockedOn:null,target:t,priority:e};for(var n=0;n<Oi.length&&e!==0&&e<Oi[n].priority;n++);Oi.splice(n,0,t),n===0&&hb(t)}};function Jh(t){return!(!t||t.nodeType!==1&&t.nodeType!==9&&t.nodeType!==11)}function $u(t){return!(!t||t.nodeType!==1&&t.nodeType!==9&&t.nodeType!==11&&(t.nodeType!==8||t.nodeValue!==" react-mount-point-unstable "))}function og(){}function CC(t,e,n,i,r){if(r){if(typeof i=="function"){var s=i;i=function(){var d=Tu(o);s.call(d)}}var o=Lp(e,i,t,0,null,!1,!1,"",og);return t._reactRootContainer=o,t[Ci]=o.current,Oo(t.nodeType===8?t.parentNode:t),Cr(),o}for(;r=t.lastChild;)t.removeChild(r);if(typeof i=="function"){var a=i;i=function(){var d=Tu(l);a.call(d)}}var l=Yh(t,0,!1,null,null,!1,!1,"",og);return t._reactRootContainer=l,t[Ci]=l.current,Oo(t.nodeType===8?t.parentNode:t),Cr(function(){Gu(e,l,n,i)}),l}function el(t,e,n,i,r){var s=n._reactRootContainer;if(s){var o=s;if(typeof r=="function"){var a=r;r=function(){var l=Tu(o);a.call(l)}}Gu(e,o,t,r)}else o=CC(n,e,t,r,i);return Tu(o)}ub=function(t){switch(t.tag){case 3:var e=t.stateNode;if(e.current.memoizedState.isDehydrated){var n=ro(e.pendingLanes);n!==0&&(hh(e,n|1),Jt(e,et()),!(Se&6)&&(ps=et()+500,ir()))}break;case 13:Cr(function(){var i=wi(t,1);if(i!==null){var r=kt();Vn(i,t,1,r)}}),Vh(t,1)}};fh=function(t){if(t.tag===13){var e=wi(t,134217728);if(e!==null){var n=kt();Vn(e,t,134217728,n)}Vh(t,134217728)}};lb=function(t){if(t.tag===13){var e=Ji(t),n=wi(t,e);if(n!==null){var i=kt();Vn(n,t,e,i)}Vh(t,e)}};cb=function(){return xe};db=function(t,e){var n=xe;try{return xe=t,e()}finally{xe=n}};nd=function(t,e,n){switch(e){case"input":if(Kc(t,n),e=n.name,n.type==="radio"&&e!=null){for(n=t;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+e)+'][type="radio"]'),e=0;e<n.length;e++){var i=n[e];if(i!==t&&i.form===t.form){var r=Yu(i);if(!r)throw Error(R(90));XE(i),Kc(i,r)}}}break;case"textarea":YE(t,n);break;case"select":e=n.value,e!=null&&ts(t,!!n.multiple,e,!1)}};GE=Hh;_E=Cr;var wC={usingClientEntryPoint:!1,Events:[Go,Vr,Yu,KE,QE,Hh]},Ks={findFiberByHostInstance:lr,bundleType:0,version:"18.2.0",rendererPackageName:"react-dom"},DC={bundleType:Ks.bundleType,version:Ks.version,rendererPackageName:Ks.rendererPackageName,rendererConfig:Ks.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:xi.ReactCurrentDispatcher,findHostInstanceByFiber:function(t){return t=tb(t),t===null?null:t.stateNode},findFiberByHostInstance:Ks.findFiberByHostInstance||vC,findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.2.0-next-9e3b772b8-20220608"};if(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__<"u"){var Na=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!Na.isDisabled&&Na.supportsFiber)try{Hu=Na.inject(DC),ni=Na}catch{}}on.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=wC;on.createPortal=function(t,e){var n=2<arguments.length&&arguments[2]!==void 0?arguments[2]:null;if(!Jh(e))throw Error(R(200));return AC(t,e,null,n)};on.createRoot=function(t,e){if(!Jh(t))throw Error(R(299));var n=!1,i="",r=Op;return e!=null&&(e.unstable_strictMode===!0&&(n=!0),e.identifierPrefix!==void 0&&(i=e.identifierPrefix),e.onRecoverableError!==void 0&&(r=e.onRecoverableError)),e=Yh(t,1,!1,null,null,n,!1,i,r),t[Ci]=e.current,Oo(t.nodeType===8?t.parentNode:t),new qh(e)};on.findDOMNode=function(t){if(t==null)return null;if(t.nodeType===1)return t;var e=t._reactInternals;if(e===void 0)throw typeof t.render=="function"?Error(R(188)):(t=Object.keys(t).join(","),Error(R(268,t)));return t=tb(e),t=t===null?null:t.stateNode,t};on.flushSync=function(t){return Cr(t)};on.hydrate=function(t,e,n){if(!$u(e))throw Error(R(200));return el(null,t,e,!0,n)};on.hydrateRoot=function(t,e,n){if(!Jh(t))throw Error(R(405));var i=n!=null&&n.hydratedSources||null,r=!1,s="",o=Op;if(n!=null&&(n.unstable_strictMode===!0&&(r=!0),n.identifierPrefix!==void 0&&(s=n.identifierPrefix),n.onRecoverableError!==void 0&&(o=n.onRecoverableError)),e=Lp(e,null,t,1,n??null,r,!1,s,o),t[Ci]=e.current,Oo(t),i)for(t=0;t<i.length;t++)n=i[t],r=n._getVersion,r=r(n._source),e.mutableSourceEagerHydrationData==null?e.mutableSourceEagerHydrationData=[n,r]:e.mutableSourceEagerHydrationData.push(n,r);return new _u(e)};on.render=function(t,e,n){if(!$u(e))throw Error(R(200));return el(null,t,e,!1,n)};on.unmountComponentAtNode=function(t){if(!$u(t))throw Error(R(40));return t._reactRootContainer?(Cr(function(){el(null,null,t,!1,function(){t._reactRootContainer=null,t[Ci]=null})}),!0):!1};on.unstable_batchedUpdates=Hh;on.unstable_renderSubtreeIntoContainer=function(t,e,n,i){if(!$u(n))throw Error(R(200));if(t==null||t._reactInternals===void 0)throw Error(R(38));return el(t,e,n,!1,i)};on.version="18.2.0-next-9e3b772b8-20220608";function yp(){if(!(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__>"u"||typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE!="function"))try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(yp)}catch(t){console.error(t)}}yp(),LE.exports=on;var tl=LE.exports;const Rp=CE(tl),xC=vE({__proto__:null,default:Rp},[tl]);var ag=tl;Xc.createRoot=ag.createRoot,Xc.hydrateRoot=ag.hydrateRoot;var Ip={exports:{}},jp={};/**
 * @license React
 * use-sync-external-store-shim.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var Ss=B;function BC(t,e){return t===e&&(t!==0||1/t===1/e)||t!==t&&e!==e}var TC=typeof Object.is=="function"?Object.is:BC,NC=Ss.useState,FC=Ss.useEffect,MC=Ss.useLayoutEffect,PC=Ss.useDebugValue;function kC(t,e){var n=e(),i=NC({inst:{value:n,getSnapshot:e}}),r=i[0].inst,s=i[1];return MC(function(){r.value=n,r.getSnapshot=e,vc(r)&&s({inst:r})},[t,n,e]),FC(function(){return vc(r)&&s({inst:r}),t(function(){vc(r)&&s({inst:r})})},[t]),PC(n),n}function vc(t){var e=t.getSnapshot;t=t.value;try{var n=e();return!TC(t,n)}catch{return!0}}function LC(t,e){return e()}var OC=typeof window>"u"||typeof window.document>"u"||typeof window.document.createElement>"u"?LC:kC;jp.useSyncExternalStore=Ss.useSyncExternalStore!==void 0?Ss.useSyncExternalStore:OC;Ip.exports=jp;var yC=Ip.exports,Up={exports:{}},Hp={};/**
 * @license React
 * use-sync-external-store-shim/with-selector.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var nl=B,RC=yC;function IC(t,e){return t===e&&(t!==0||1/t===1/e)||t!==t&&e!==e}var jC=typeof Object.is=="function"?Object.is:IC,UC=RC.useSyncExternalStore,HC=nl.useRef,WC=nl.useEffect,XC=nl.useMemo,zC=nl.useDebugValue;Hp.useSyncExternalStoreWithSelector=function(t,e,n,i,r){var s=HC(null);if(s.current===null){var o={hasValue:!1,value:null};s.current=o}else o=s.current;s=XC(function(){function l(h){if(!d){if(d=!0,f=h,h=i(h),r!==void 0&&o.hasValue){var g=o.value;if(r(g,h))return u=g}return u=h}if(g=u,jC(f,h))return g;var E=i(h);return r!==void 0&&r(g,E)?g:(f=h,u=E)}var d=!1,f,u,c=n===void 0?null:n;return[function(){return l(e())},c===null?void 0:function(){return l(c())}]},[e,n,i,r]);var a=UC(t,s[0],s[1]);return WC(function(){o.hasValue=!0,o.value=a},[a]),zC(a),a};Up.exports=Hp;var YC=Up.exports;function VC(t){t()}let Wp=VC;const qC=t=>Wp=t,JC=()=>Wp,ug=Symbol.for("react-redux-context"),lg=typeof globalThis<"u"?globalThis:{};function ZC(){var t;if(!B.createContext)return{};const e=(t=lg[ug])!=null?t:lg[ug]=new Map;let n=e.get(B.createContext);return n||(n=B.createContext(null),e.set(B.createContext,n)),n}const _i=ZC();function Zh(t=_i){return function(){return B.useContext(t)}}const Xp=Zh(),KC=()=>{throw new Error("uSES not initialized!")};let zp=KC;const QC=t=>{zp=t},GC=(t,e)=>t===e;function _C(t=_i){const e=t===_i?Xp:Zh(t);return function(i,r={}){const{equalityFn:s=GC,stabilityCheck:o=void 0,noopCheck:a=void 0}=typeof r=="function"?{equalityFn:r}:r,{store:l,subscription:d,getServerState:f,stabilityCheck:u,noopCheck:c}=e();B.useRef(!0);const h=B.useCallback({[i.name](E){return i(E)}}[i.name],[i,u,o]),g=zp(d.addNestedSub,l.getState,f||l.getState,h,s);return B.useDebugValue(g),g}}const Zn=_C();var Yp={exports:{}},Te={};/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var ft=typeof Symbol=="function"&&Symbol.for,Kh=ft?Symbol.for("react.element"):60103,Qh=ft?Symbol.for("react.portal"):60106,il=ft?Symbol.for("react.fragment"):60107,rl=ft?Symbol.for("react.strict_mode"):60108,sl=ft?Symbol.for("react.profiler"):60114,ol=ft?Symbol.for("react.provider"):60109,al=ft?Symbol.for("react.context"):60110,Gh=ft?Symbol.for("react.async_mode"):60111,ul=ft?Symbol.for("react.concurrent_mode"):60111,ll=ft?Symbol.for("react.forward_ref"):60112,cl=ft?Symbol.for("react.suspense"):60113,$C=ft?Symbol.for("react.suspense_list"):60120,dl=ft?Symbol.for("react.memo"):60115,hl=ft?Symbol.for("react.lazy"):60116,e0=ft?Symbol.for("react.block"):60121,t0=ft?Symbol.for("react.fundamental"):60117,n0=ft?Symbol.for("react.responder"):60118,i0=ft?Symbol.for("react.scope"):60119;function un(t){if(typeof t=="object"&&t!==null){var e=t.$$typeof;switch(e){case Kh:switch(t=t.type,t){case Gh:case ul:case il:case sl:case rl:case cl:return t;default:switch(t=t&&t.$$typeof,t){case al:case ll:case hl:case dl:case ol:return t;default:return e}}case Qh:return e}}}function Vp(t){return un(t)===ul}Te.AsyncMode=Gh;Te.ConcurrentMode=ul;Te.ContextConsumer=al;Te.ContextProvider=ol;Te.Element=Kh;Te.ForwardRef=ll;Te.Fragment=il;Te.Lazy=hl;Te.Memo=dl;Te.Portal=Qh;Te.Profiler=sl;Te.StrictMode=rl;Te.Suspense=cl;Te.isAsyncMode=function(t){return Vp(t)||un(t)===Gh};Te.isConcurrentMode=Vp;Te.isContextConsumer=function(t){return un(t)===al};Te.isContextProvider=function(t){return un(t)===ol};Te.isElement=function(t){return typeof t=="object"&&t!==null&&t.$$typeof===Kh};Te.isForwardRef=function(t){return un(t)===ll};Te.isFragment=function(t){return un(t)===il};Te.isLazy=function(t){return un(t)===hl};Te.isMemo=function(t){return un(t)===dl};Te.isPortal=function(t){return un(t)===Qh};Te.isProfiler=function(t){return un(t)===sl};Te.isStrictMode=function(t){return un(t)===rl};Te.isSuspense=function(t){return un(t)===cl};Te.isValidElementType=function(t){return typeof t=="string"||typeof t=="function"||t===il||t===ul||t===sl||t===rl||t===cl||t===$C||typeof t=="object"&&t!==null&&(t.$$typeof===hl||t.$$typeof===dl||t.$$typeof===ol||t.$$typeof===al||t.$$typeof===ll||t.$$typeof===t0||t.$$typeof===n0||t.$$typeof===i0||t.$$typeof===e0)};Te.typeOf=un;Yp.exports=Te;var r0=Yp.exports,qp=r0,s0={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},o0={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},Jp={};Jp[qp.ForwardRef]=s0;Jp[qp.Memo]=o0;var Me={};/**
 * @license React
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var _h=Symbol.for("react.element"),$h=Symbol.for("react.portal"),fl=Symbol.for("react.fragment"),ml=Symbol.for("react.strict_mode"),gl=Symbol.for("react.profiler"),El=Symbol.for("react.provider"),bl=Symbol.for("react.context"),a0=Symbol.for("react.server_context"),pl=Symbol.for("react.forward_ref"),Sl=Symbol.for("react.suspense"),Al=Symbol.for("react.suspense_list"),vl=Symbol.for("react.memo"),Cl=Symbol.for("react.lazy"),u0=Symbol.for("react.offscreen"),Zp;Zp=Symbol.for("react.module.reference");function Tn(t){if(typeof t=="object"&&t!==null){var e=t.$$typeof;switch(e){case _h:switch(t=t.type,t){case fl:case gl:case ml:case Sl:case Al:return t;default:switch(t=t&&t.$$typeof,t){case a0:case bl:case pl:case Cl:case vl:case El:return t;default:return e}}case $h:return e}}}Me.ContextConsumer=bl;Me.ContextProvider=El;Me.Element=_h;Me.ForwardRef=pl;Me.Fragment=fl;Me.Lazy=Cl;Me.Memo=vl;Me.Portal=$h;Me.Profiler=gl;Me.StrictMode=ml;Me.Suspense=Sl;Me.SuspenseList=Al;Me.isAsyncMode=function(){return!1};Me.isConcurrentMode=function(){return!1};Me.isContextConsumer=function(t){return Tn(t)===bl};Me.isContextProvider=function(t){return Tn(t)===El};Me.isElement=function(t){return typeof t=="object"&&t!==null&&t.$$typeof===_h};Me.isForwardRef=function(t){return Tn(t)===pl};Me.isFragment=function(t){return Tn(t)===fl};Me.isLazy=function(t){return Tn(t)===Cl};Me.isMemo=function(t){return Tn(t)===vl};Me.isPortal=function(t){return Tn(t)===$h};Me.isProfiler=function(t){return Tn(t)===gl};Me.isStrictMode=function(t){return Tn(t)===ml};Me.isSuspense=function(t){return Tn(t)===Sl};Me.isSuspenseList=function(t){return Tn(t)===Al};Me.isValidElementType=function(t){return typeof t=="string"||typeof t=="function"||t===fl||t===gl||t===ml||t===Sl||t===Al||t===u0||typeof t=="object"&&t!==null&&(t.$$typeof===Cl||t.$$typeof===vl||t.$$typeof===El||t.$$typeof===bl||t.$$typeof===pl||t.$$typeof===Zp||t.getModuleId!==void 0)};Me.typeOf=Tn;function l0(){const t=JC();let e=null,n=null;return{clear(){e=null,n=null},notify(){t(()=>{let i=e;for(;i;)i.callback(),i=i.next})},get(){let i=[],r=e;for(;r;)i.push(r),r=r.next;return i},subscribe(i){let r=!0,s=n={callback:i,next:null,prev:n};return s.prev?s.prev.next=s:e=s,function(){!r||e===null||(r=!1,s.next?s.next.prev=s.prev:n=s.prev,s.prev?s.prev.next=s.next:e=s.next)}}}}const cg={notify(){},get:()=>[]};function c0(t,e){let n,i=cg,r=0,s=!1;function o(E){f();const p=i.subscribe(E);let m=!1;return()=>{m||(m=!0,p(),u())}}function a(){i.notify()}function l(){g.onStateChange&&g.onStateChange()}function d(){return s}function f(){r++,n||(n=e?e.addNestedSub(l):t.subscribe(l),i=l0())}function u(){r--,n&&r===0&&(n(),n=void 0,i.clear(),i=cg)}function c(){s||(s=!0,f())}function h(){s&&(s=!1,u())}const g={addNestedSub:o,notifyNestedSubs:a,handleChangeWrapper:l,isSubscribed:d,trySubscribe:c,tryUnsubscribe:h,getListeners:()=>i};return g}const d0=typeof window<"u"&&typeof window.document<"u"&&typeof window.document.createElement<"u",h0=d0?B.useLayoutEffect:B.useEffect;function f0({store:t,context:e,children:n,serverState:i,stabilityCheck:r="once",noopCheck:s="once"}){const o=B.useMemo(()=>{const d=c0(t);return{store:t,subscription:d,getServerState:i?()=>i:void 0,stabilityCheck:r,noopCheck:s}},[t,i,r,s]),a=B.useMemo(()=>t.getState(),[t]);h0(()=>{const{subscription:d}=o;return d.onStateChange=d.notifyNestedSubs,d.trySubscribe(),a!==t.getState()&&d.notifyNestedSubs(),()=>{d.tryUnsubscribe(),d.onStateChange=void 0}},[o,a]);const l=e||_i;return B.createElement(l.Provider,{value:o},n)}function Kp(t=_i){const e=t===_i?Xp:Zh(t);return function(){const{store:i}=e();return i}}const m0=Kp();function g0(t=_i){const e=t===_i?m0:Kp(t);return function(){return e().dispatch}}const Rt=g0();QC(YC.useSyncExternalStoreWithSelector);qC(tl.unstable_batchedUpdates);/**
 * @remix-run/router v1.13.0
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */function Qe(){return Qe=Object.assign?Object.assign.bind():function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(t[i]=n[i])}return t},Qe.apply(this,arguments)}var _e;(function(t){t.Pop="POP",t.Push="PUSH",t.Replace="REPLACE"})(_e||(_e={}));const dg="popstate";function E0(t){t===void 0&&(t={});function e(i,r){let{pathname:s,search:o,hash:a}=i.location;return zo("",{pathname:s,search:o,hash:a},r.state&&r.state.usr||null,r.state&&r.state.key||"default")}function n(i,r){return typeof r=="string"?r:Dr(r)}return p0(e,n,null,t)}function le(t,e){if(t===!1||t===null||typeof t>"u")throw new Error(e)}function wr(t,e){if(!t){typeof console<"u"&&console.warn(e);try{throw new Error(e)}catch{}}}function b0(){return Math.random().toString(36).substr(2,8)}function hg(t,e){return{usr:t.state,key:t.key,idx:e}}function zo(t,e,n,i){return n===void 0&&(n=null),Qe({pathname:typeof t=="string"?t:t.pathname,search:"",hash:""},typeof e=="string"?Bi(e):e,{state:n,key:e&&e.key||i||b0()})}function Dr(t){let{pathname:e="/",search:n="",hash:i=""}=t;return n&&n!=="?"&&(e+=n.charAt(0)==="?"?n:"?"+n),i&&i!=="#"&&(e+=i.charAt(0)==="#"?i:"#"+i),e}function Bi(t){let e={};if(t){let n=t.indexOf("#");n>=0&&(e.hash=t.substr(n),t=t.substr(0,n));let i=t.indexOf("?");i>=0&&(e.search=t.substr(i),t=t.substr(0,i)),t&&(e.pathname=t)}return e}function p0(t,e,n,i){i===void 0&&(i={});let{window:r=document.defaultView,v5Compat:s=!1}=i,o=r.history,a=_e.Pop,l=null,d=f();d==null&&(d=0,o.replaceState(Qe({},o.state,{idx:d}),""));function f(){return(o.state||{idx:null}).idx}function u(){a=_e.Pop;let p=f(),m=p==null?null:p-d;d=p,l&&l({action:a,location:E.location,delta:m})}function c(p,m){a=_e.Push;let b=zo(E.location,p,m);n&&n(b,p),d=f()+1;let A=hg(b,d),S=E.createHref(b);try{o.pushState(A,"",S)}catch(w){if(w instanceof DOMException&&w.name==="DataCloneError")throw w;r.location.assign(S)}s&&l&&l({action:a,location:E.location,delta:1})}function h(p,m){a=_e.Replace;let b=zo(E.location,p,m);n&&n(b,p),d=f();let A=hg(b,d),S=E.createHref(b);o.replaceState(A,"",S),s&&l&&l({action:a,location:E.location,delta:0})}function g(p){let m=r.location.origin!=="null"?r.location.origin:r.location.href,b=typeof p=="string"?p:Dr(p);return le(m,"No window.location.(origin|href) available to create URL for href: "+b),new URL(b,m)}let E={get action(){return a},get location(){return t(r,o)},listen(p){if(l)throw new Error("A history only accepts one active listener");return r.addEventListener(dg,u),l=p,()=>{r.removeEventListener(dg,u),l=null}},createHref(p){return e(r,p)},createURL:g,encodeLocation(p){let m=g(p);return{pathname:m.pathname,search:m.search,hash:m.hash}},push:c,replace:h,go(p){return o.go(p)}};return E}var $e;(function(t){t.data="data",t.deferred="deferred",t.redirect="redirect",t.error="error"})($e||($e={}));const S0=new Set(["lazy","caseSensitive","path","id","index","children"]);function A0(t){return t.index===!0}function yd(t,e,n,i){return n===void 0&&(n=[]),i===void 0&&(i={}),t.map((r,s)=>{let o=[...n,s],a=typeof r.id=="string"?r.id:o.join("-");if(le(r.index!==!0||!r.children,"Cannot specify children on an index route"),le(!i[a],'Found a route id collision on id "'+a+`".  Route id's must be globally unique within Data Router usages`),A0(r)){let l=Qe({},r,e(r),{id:a});return i[a]=l,l}else{let l=Qe({},r,e(r),{id:a,children:void 0});return i[a]=l,r.children&&(l.children=yd(r.children,e,o,i)),l}})}function _r(t,e,n){n===void 0&&(n="/");let i=typeof e=="string"?Bi(e):e,r=$i(i.pathname||"/",n);if(r==null)return null;let s=Qp(t);C0(s);let o=null;for(let a=0;o==null&&a<s.length;++a)o=P0(s[a],L0(r));return o}function v0(t,e){let{route:n,pathname:i,params:r}=t;return{id:n.id,pathname:i,params:r,data:e[n.id],handle:n.handle}}function Qp(t,e,n,i){e===void 0&&(e=[]),n===void 0&&(n=[]),i===void 0&&(i="");let r=(s,o,a)=>{let l={relativePath:a===void 0?s.path||"":a,caseSensitive:s.caseSensitive===!0,childrenIndex:o,route:s};l.relativePath.startsWith("/")&&(le(l.relativePath.startsWith(i),'Absolute route path "'+l.relativePath+'" nested under path '+('"'+i+'" is not valid. An absolute child route path ')+"must start with the combined path of all its parent routes."),l.relativePath=l.relativePath.slice(i.length));let d=Si([i,l.relativePath]),f=n.concat(l);s.children&&s.children.length>0&&(le(s.index!==!0,"Index routes must not have child routes. Please remove "+('all child routes from route path "'+d+'".')),Qp(s.children,e,f,d)),!(s.path==null&&!s.index)&&e.push({path:d,score:F0(d,s.index),routesMeta:f})};return t.forEach((s,o)=>{var a;if(s.path===""||!((a=s.path)!=null&&a.includes("?")))r(s,o);else for(let l of Gp(s.path))r(s,o,l)}),e}function Gp(t){let e=t.split("/");if(e.length===0)return[];let[n,...i]=e,r=n.endsWith("?"),s=n.replace(/\?$/,"");if(i.length===0)return r?[s,""]:[s];let o=Gp(i.join("/")),a=[];return a.push(...o.map(l=>l===""?s:[s,l].join("/"))),r&&a.push(...o),a.map(l=>t.startsWith("/")&&l===""?"/":l)}function C0(t){t.sort((e,n)=>e.score!==n.score?n.score-e.score:M0(e.routesMeta.map(i=>i.childrenIndex),n.routesMeta.map(i=>i.childrenIndex)))}const w0=/^:\w+$/,D0=3,x0=2,B0=1,T0=10,N0=-2,fg=t=>t==="*";function F0(t,e){let n=t.split("/"),i=n.length;return n.some(fg)&&(i+=N0),e&&(i+=x0),n.filter(r=>!fg(r)).reduce((r,s)=>r+(w0.test(s)?D0:s===""?B0:T0),i)}function M0(t,e){return t.length===e.length&&t.slice(0,-1).every((i,r)=>i===e[r])?t[t.length-1]-e[e.length-1]:0}function P0(t,e){let{routesMeta:n}=t,i={},r="/",s=[];for(let o=0;o<n.length;++o){let a=n[o],l=o===n.length-1,d=r==="/"?e:e.slice(r.length)||"/",f=Rd({path:a.relativePath,caseSensitive:a.caseSensitive,end:l},d);if(!f)return null;Object.assign(i,f.params);let u=a.route;s.push({params:i,pathname:Si([r,f.pathname]),pathnameBase:I0(Si([r,f.pathnameBase])),route:u}),f.pathnameBase!=="/"&&(r=Si([r,f.pathnameBase]))}return s}function Rd(t,e){typeof t=="string"&&(t={path:t,caseSensitive:!1,end:!0});let[n,i]=k0(t.path,t.caseSensitive,t.end),r=e.match(n);if(!r)return null;let s=r[0],o=s.replace(/(.)\/+$/,"$1"),a=r.slice(1);return{params:i.reduce((d,f,u)=>{let{paramName:c,isOptional:h}=f;if(c==="*"){let E=a[u]||"";o=s.slice(0,s.length-E.length).replace(/(.)\/+$/,"$1")}const g=a[u];return h&&!g?d[c]=void 0:d[c]=O0(g||"",c),d},{}),pathname:s,pathnameBase:o,pattern:t}}function k0(t,e,n){e===void 0&&(e=!1),n===void 0&&(n=!0),wr(t==="*"||!t.endsWith("*")||t.endsWith("/*"),'Route path "'+t+'" will be treated as if it were '+('"'+t.replace(/\*$/,"/*")+'" because the `*` character must ')+"always follow a `/` in the pattern. To get rid of this warning, "+('please change the route path to "'+t.replace(/\*$/,"/*")+'".'));let i=[],r="^"+t.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^${}|()[\]]/g,"\\$&").replace(/\/:(\w+)(\?)?/g,(o,a,l)=>(i.push({paramName:a,isOptional:l!=null}),l?"/?([^\\/]+)?":"/([^\\/]+)"));return t.endsWith("*")?(i.push({paramName:"*"}),r+=t==="*"||t==="/*"?"(.*)$":"(?:\\/(.+)|\\/*)$"):n?r+="\\/*$":t!==""&&t!=="/"&&(r+="(?:(?=\\/|$))"),[new RegExp(r,e?void 0:"i"),i]}function L0(t){try{return decodeURI(t)}catch(e){return wr(!1,'The URL path "'+t+'" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent '+("encoding ("+e+").")),t}}function O0(t,e){try{return decodeURIComponent(t)}catch(n){return wr(!1,'The value for the URL param "'+e+'" will not be decoded because'+(' the string "'+t+'" is a malformed URL segment. This is probably')+(" due to a bad percent encoding ("+n+").")),t}}function $i(t,e){if(e==="/")return t;if(!t.toLowerCase().startsWith(e.toLowerCase()))return null;let n=e.endsWith("/")?e.length-1:e.length,i=t.charAt(n);return i&&i!=="/"?null:t.slice(n)||"/"}function y0(t,e){e===void 0&&(e="/");let{pathname:n,search:i="",hash:r=""}=typeof t=="string"?Bi(t):t;return{pathname:n?n.startsWith("/")?n:R0(n,e):e,search:j0(i),hash:U0(r)}}function R0(t,e){let n=e.replace(/\/+$/,"").split("/");return t.split("/").forEach(r=>{r===".."?n.length>1&&n.pop():r!=="."&&n.push(r)}),n.length>1?n.join("/"):"/"}function Cc(t,e,n,i){return"Cannot include a '"+t+"' character in a manually specified "+("`to."+e+"` field ["+JSON.stringify(i)+"].  Please separate it out to the ")+("`to."+n+"` field. Alternatively you may provide the full path as ")+'a string in <Link to="..."> and the router will parse it for you.'}function _p(t){return t.filter((e,n)=>n===0||e.route.path&&e.route.path.length>0)}function wl(t){return _p(t).map((e,n)=>n===t.length-1?e.pathname:e.pathnameBase)}function Dl(t,e,n,i){i===void 0&&(i=!1);let r;typeof t=="string"?r=Bi(t):(r=Qe({},t),le(!r.pathname||!r.pathname.includes("?"),Cc("?","pathname","search",r)),le(!r.pathname||!r.pathname.includes("#"),Cc("#","pathname","hash",r)),le(!r.search||!r.search.includes("#"),Cc("#","search","hash",r)));let s=t===""||r.pathname==="",o=s?"/":r.pathname,a;if(o==null)a=n;else if(i){let u=e[e.length-1].replace(/^\//,"").split("/");if(o.startsWith("..")){let c=o.split("/");for(;c[0]==="..";)c.shift(),u.pop();r.pathname=c.join("/")}a="/"+u.join("/")}else{let u=e.length-1;if(o.startsWith("..")){let c=o.split("/");for(;c[0]==="..";)c.shift(),u-=1;r.pathname=c.join("/")}a=u>=0?e[u]:"/"}let l=y0(r,a),d=o&&o!=="/"&&o.endsWith("/"),f=(s||o===".")&&n.endsWith("/");return!l.pathname.endsWith("/")&&(d||f)&&(l.pathname+="/"),l}const Si=t=>t.join("/").replace(/\/\/+/g,"/"),I0=t=>t.replace(/\/+$/,"").replace(/^\/*/,"/"),j0=t=>!t||t==="?"?"":t.startsWith("?")?t:"?"+t,U0=t=>!t||t==="#"?"":t.startsWith("#")?t:"#"+t;class ef{constructor(e,n,i,r){r===void 0&&(r=!1),this.status=e,this.statusText=n||"",this.internal=r,i instanceof Error?(this.data=i.toString(),this.error=i):this.data=i}}function $p(t){return t!=null&&typeof t.status=="number"&&typeof t.statusText=="string"&&typeof t.internal=="boolean"&&"data"in t}const e1=["post","put","patch","delete"],H0=new Set(e1),W0=["get",...e1],X0=new Set(W0),z0=new Set([301,302,303,307,308]),Y0=new Set([307,308]),wc={state:"idle",location:void 0,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0},V0={state:"idle",data:void 0,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0},Qs={state:"unblocked",proceed:void 0,reset:void 0,location:void 0},t1=/^(?:[a-z][a-z0-9+.-]*:|\/\/)/i,q0=t=>({hasErrorBoundary:!!t.hasErrorBoundary}),n1="remix-router-transitions";function J0(t){const e=t.window?t.window:typeof window<"u"?window:void 0,n=typeof e<"u"&&typeof e.document<"u"&&typeof e.document.createElement<"u",i=!n;le(t.routes.length>0,"You must provide a non-empty routes array to createRouter");let r;if(t.mapRouteProperties)r=t.mapRouteProperties;else if(t.detectErrorBoundary){let T=t.detectErrorBoundary;r=N=>({hasErrorBoundary:T(N)})}else r=q0;let s={},o=yd(t.routes,r,void 0,s),a,l=t.basename||"/",d=Qe({v7_fetcherPersist:!1,v7_normalizeFormMethod:!1,v7_prependBasename:!1},t.future),f=null,u=new Set,c=null,h=null,g=null,E=t.hydrationData!=null,p=_r(o,t.history.location,l),m=null;if(p==null){let T=hn(404,{pathname:t.history.location.pathname}),{matches:N,route:O}=vg(o);p=N,m={[O.id]:T}}let b=!p.some(T=>T.route.lazy)&&(!p.some(T=>T.route.loader)||t.hydrationData!=null),A,S={historyAction:t.history.action,location:t.history.location,matches:p,initialized:b,navigation:wc,restoreScrollPosition:t.hydrationData!=null?!1:null,preventScrollReset:!1,revalidation:"idle",loaderData:t.hydrationData&&t.hydrationData.loaderData||{},actionData:t.hydrationData&&t.hydrationData.actionData||null,errors:t.hydrationData&&t.hydrationData.errors||m,fetchers:new Map,blockers:new Map},w=_e.Pop,D=!1,x,F=!1,y=new Map,X=null,G=!1,Ee=!1,re=[],be=[],de=new Map,xt=0,mt=-1,j=new Map,Y=new Set,J=new Map,ie=new Map,ce=new Set,tt=new Map,Re=new Map,Qt=!1;function lt(){if(f=t.history.listen(T=>{let{action:N,location:O,delta:z}=T;if(Qt){Qt=!1;return}wr(Re.size===0||z!=null,"You are trying to use a blocker on a POP navigation to a location that was not created by @remix-run/router. This will fail silently in production. This can happen if you are navigating outside the router via `window.history.pushState`/`window.location.hash` instead of using router navigation APIs.  This can also happen if you are using createHashRouter and the user manually changes the URL.");let Z=Kf({currentLocation:S.location,nextLocation:O,historyAction:N});if(Z&&z!=null){Qt=!0,t.history.go(z*-1),ca(Z,{state:"blocked",location:O,proceed(){ca(Z,{state:"proceeding",proceed:void 0,reset:void 0,location:O}),t.history.go(z)},reset(){let he=new Map(S.blockers);he.set(Z,Qs),gt({blockers:he})}});return}return It(N,O)}),n){rw(e,y);let T=()=>sw(e,y);e.addEventListener("pagehide",T),X=()=>e.removeEventListener("pagehide",T)}return S.initialized||It(_e.Pop,S.location),A}function Qn(){f&&f(),X&&X(),u.clear(),x&&x.abort(),S.fetchers.forEach((T,N)=>la(N)),S.blockers.forEach((T,N)=>Zf(N))}function rr(T){return u.add(T),()=>u.delete(T)}function gt(T,N){N===void 0&&(N={}),S=Qe({},S,T);let O=[],z=[];d.v7_fetcherPersist&&S.fetchers.forEach((Z,he)=>{Z.state==="idle"&&(ce.has(he)?z.push(he):O.push(he))}),[...u].forEach(Z=>Z(S,{deletedFetchers:z,unstable_viewTransitionOpts:N.viewTransitionOpts,unstable_flushSync:N.flushSync===!0})),d.v7_fetcherPersist&&(O.forEach(Z=>S.fetchers.delete(Z)),z.forEach(Z=>la(Z)))}function Gt(T,N,O){var z,Z;let{flushSync:he}=O===void 0?{}:O,ee=S.actionData!=null&&S.navigation.formMethod!=null&&jn(S.navigation.formMethod)&&S.navigation.state==="loading"&&((z=T.state)==null?void 0:z._isRedirect)!==!0,$;N.actionData?Object.keys(N.actionData).length>0?$=N.actionData:$=null:ee?$=S.actionData:$=null;let K=N.loaderData?Ag(S.loaderData,N.loaderData,N.matches||[],N.errors):S.loaderData,pe=S.blockers;pe.size>0&&(pe=new Map(pe),pe.forEach((Le,ze)=>pe.set(ze,Qs)));let Et=D===!0||S.navigation.formMethod!=null&&jn(S.navigation.formMethod)&&((Z=T.state)==null?void 0:Z._isRedirect)!==!0;a&&(o=a,a=void 0),G||w===_e.Pop||(w===_e.Push?t.history.push(T,T.state):w===_e.Replace&&t.history.replace(T,T.state));let fe;if(w===_e.Pop){let Le=y.get(S.location.pathname);Le&&Le.has(T.pathname)?fe={currentLocation:S.location,nextLocation:T}:y.has(T.pathname)&&(fe={currentLocation:T,nextLocation:S.location})}else if(F){let Le=y.get(S.location.pathname);Le?Le.add(T.pathname):(Le=new Set([T.pathname]),y.set(S.location.pathname,Le)),fe={currentLocation:S.location,nextLocation:T}}gt(Qe({},N,{actionData:$,loaderData:K,historyAction:w,location:T,initialized:!0,navigation:wc,revalidation:"idle",restoreScrollPosition:Gf(T,N.matches||S.matches),preventScrollReset:Et,blockers:pe}),{viewTransitionOpts:fe,flushSync:he===!0}),w=_e.Pop,D=!1,F=!1,G=!1,Ee=!1,re=[],be=[]}async function Ti(T,N){if(typeof T=="number"){t.history.go(T);return}let O=Id(S.location,S.matches,l,d.v7_prependBasename,T,N==null?void 0:N.fromRouteId,N==null?void 0:N.relative),{path:z,submission:Z,error:he}=mg(d.v7_normalizeFormMethod,!1,O,N),ee=S.location,$=zo(S.location,z,N&&N.state);$=Qe({},$,t.history.encodeLocation($));let K=N&&N.replace!=null?N.replace:void 0,pe=_e.Push;K===!0?pe=_e.Replace:K===!1||Z!=null&&jn(Z.formMethod)&&Z.formAction===S.location.pathname+S.location.search&&(pe=_e.Replace);let Et=N&&"preventScrollReset"in N?N.preventScrollReset===!0:void 0,fe=(N&&N.unstable_flushSync)===!0,Le=Kf({currentLocation:ee,nextLocation:$,historyAction:pe});if(Le){ca(Le,{state:"blocked",location:$,proceed(){ca(Le,{state:"proceeding",proceed:void 0,reset:void 0,location:$}),Ti(T,N)},reset(){let ze=new Map(S.blockers);ze.set(Le,Qs),gt({blockers:ze})}});return}return await It(pe,$,{submission:Z,pendingError:he,preventScrollReset:Et,replace:N&&N.replace,enableViewTransition:N&&N.unstable_viewTransition,flushSync:fe})}function ys(){if(zl(),gt({revalidation:"loading"}),S.navigation.state!=="submitting"){if(S.navigation.state==="idle"){It(S.historyAction,S.location,{startUninterruptedRevalidation:!0});return}It(w||S.historyAction,S.navigation.location,{overrideNavigation:S.navigation})}}async function It(T,N,O){x&&x.abort(),x=null,w=T,G=(O&&O.startUninterruptedRevalidation)===!0,KS(S.location,S.matches),D=(O&&O.preventScrollReset)===!0,F=(O&&O.enableViewTransition)===!0;let z=a||o,Z=O&&O.overrideNavigation,he=_r(z,N,l),ee=(O&&O.flushSync)===!0;if(!he){let ze=hn(404,{pathname:N.pathname}),{matches:Bt,route:Gn}=vg(z);Yl(),Gt(N,{matches:Bt,loaderData:{},errors:{[Gn.id]:ze}},{flushSync:ee});return}if(S.initialized&&!Ee&&_0(S.location,N)&&!(O&&O.submission&&jn(O.submission.formMethod))){Gt(N,{matches:he},{flushSync:ee});return}x=new AbortController;let $=_s(t.history,N,x.signal,O&&O.submission),K,pe;if(O&&O.pendingError)pe={[vo(he).route.id]:O.pendingError};else if(O&&O.submission&&jn(O.submission.formMethod)){let ze=await ua($,N,O.submission,he,{replace:O.replace,flushSync:ee});if(ze.shortCircuited)return;K=ze.pendingActionData,pe=ze.pendingActionError,Z=Dc(N,O.submission),ee=!1,$=new Request($.url,{signal:$.signal})}let{shortCircuited:Et,loaderData:fe,errors:Le}=await Rs($,N,he,Z,O&&O.submission,O&&O.fetcherSubmission,O&&O.replace,ee,K,pe);Et||(x=null,Gt(N,Qe({matches:he},K?{actionData:K}:{},{loaderData:fe,errors:Le})))}async function ua(T,N,O,z,Z){Z===void 0&&(Z={}),zl();let he=nw(N,O);gt({navigation:he},{flushSync:Z.flushSync===!0});let ee,$=Ud(z,N);if(!$.route.action&&!$.route.lazy)ee={type:$e.error,error:hn(405,{method:T.method,pathname:N.pathname,routeId:$.route.id})};else if(ee=await Gs("action",T,$,z,s,r,l),T.signal.aborted)return{shortCircuited:!0};if(as(ee)){let K;return Z&&Z.replace!=null?K=Z.replace:K=ee.location===S.location.pathname+S.location.search,await js(S,ee,{submission:O,replace:K}),{shortCircuited:!0}}if(Co(ee)){let K=vo(z,$.route.id);return(Z&&Z.replace)!==!0&&(w=_e.Push),{pendingActionData:{},pendingActionError:{[K.route.id]:ee.error}}}if(hr(ee))throw hn(400,{type:"defer-action"});return{pendingActionData:{[$.route.id]:ee.data}}}async function Rs(T,N,O,z,Z,he,ee,$,K,pe){let Et=z||Dc(N,Z),fe=Z||he||Dg(Et),Le=a||o,[ze,Bt]=gg(t.history,S,O,fe,N,Ee,re,be,ce,J,Y,Le,l,K,pe);if(Yl(Oe=>!(O&&O.some(ln=>ln.route.id===Oe))||ze&&ze.some(ln=>ln.route.id===Oe)),mt=++xt,ze.length===0&&Bt.length===0){let Oe=qf();return Gt(N,Qe({matches:O,loaderData:{},errors:pe||null},K?{actionData:K}:{},Oe?{fetchers:new Map(S.fetchers)}:{}),{flushSync:$}),{shortCircuited:!0}}if(!G){Bt.forEach(ln=>{let nt=S.fetchers.get(ln.key),sr=$s(void 0,nt?nt.data:void 0);S.fetchers.set(ln.key,sr)});let Oe=K||S.actionData;gt(Qe({navigation:Et},Oe?Object.keys(Oe).length===0?{actionData:null}:{actionData:Oe}:{},Bt.length>0?{fetchers:new Map(S.fetchers)}:{}),{flushSync:$})}Bt.forEach(Oe=>{de.has(Oe.key)&&Fi(Oe.key),Oe.controller&&de.set(Oe.key,Oe.controller)});let Gn=()=>Bt.forEach(Oe=>Fi(Oe.key));x&&x.signal.addEventListener("abort",Gn);let{results:Hs,loaderResults:Vl,fetcherResults:yr}=await zf(S.matches,O,ze,Bt,T);if(T.signal.aborted)return{shortCircuited:!0};x&&x.signal.removeEventListener("abort",Gn),Bt.forEach(Oe=>de.delete(Oe.key));let Fn=Cg(Hs);if(Fn){if(Fn.idx>=ze.length){let Oe=Bt[Fn.idx-ze.length].key;Y.add(Oe)}return await js(S,Fn.result,{replace:ee}),{shortCircuited:!0}}let{loaderData:da,errors:ql}=Sg(S,O,ze,Vl,pe,Bt,yr,tt);tt.forEach((Oe,ln)=>{Oe.subscribe(nt=>{(nt||Oe.done)&&tt.delete(ln)})});let Jl=qf(),Zl=Jf(mt),Rr=Jl||Zl||Bt.length>0;return Qe({loaderData:da,errors:ql},Rr?{fetchers:new Map(S.fetchers)}:{})}function Wl(T,N,O,z){if(i)throw new Error("router.fetch() was called during the server render, but it shouldn't be. You are likely calling a useFetcher() method in the body of your component. Try moving it to a useEffect or a callback.");de.has(T)&&Fi(T);let Z=(z&&z.unstable_flushSync)===!0,he=a||o,ee=Id(S.location,S.matches,l,d.v7_prependBasename,O,N,z==null?void 0:z.relative),$=_r(he,ee,l);if(!$){Us(T,N,hn(404,{pathname:ee}),{flushSync:Z});return}let{path:K,submission:pe,error:Et}=mg(d.v7_normalizeFormMethod,!0,ee,z);if(Et){Us(T,N,Et,{flushSync:Z});return}let fe=Ud($,K);if(D=(z&&z.preventScrollReset)===!0,pe&&jn(pe.formMethod)){Is(T,N,K,fe,$,Z,pe);return}J.set(T,{routeId:N,path:K}),Xl(T,N,K,fe,$,Z,pe)}async function Is(T,N,O,z,Z,he,ee){if(zl(),J.delete(T),!z.route.action&&!z.route.lazy){let nt=hn(405,{method:ee.formMethod,pathname:O,routeId:N});Us(T,N,nt,{flushSync:he});return}let $=S.fetchers.get(T);Ni(T,iw(ee,$),{flushSync:he});let K=new AbortController,pe=_s(t.history,O,K.signal,ee);de.set(T,K);let Et=xt,fe=await Gs("action",pe,z,Z,s,r,l);if(pe.signal.aborted){de.get(T)===K&&de.delete(T);return}if(ce.has(T)){Ni(T,Pi(void 0));return}if(as(fe))if(de.delete(T),mt>Et){Ni(T,Pi(void 0));return}else return Y.add(T),Ni(T,$s(ee)),js(S,fe,{fetcherSubmission:ee});if(Co(fe)){Us(T,N,fe.error);return}if(hr(fe))throw hn(400,{type:"defer-action"});let Le=S.navigation.location||S.location,ze=_s(t.history,Le,K.signal),Bt=a||o,Gn=S.navigation.state!=="idle"?_r(Bt,S.navigation.location,l):S.matches;le(Gn,"Didn't find any matches after fetcher action");let Hs=++xt;j.set(T,Hs);let Vl=$s(ee,fe.data);S.fetchers.set(T,Vl);let[yr,Fn]=gg(t.history,S,Gn,ee,Le,Ee,re,be,ce,J,Y,Bt,l,{[z.route.id]:fe.data},void 0);Fn.filter(nt=>nt.key!==T).forEach(nt=>{let sr=nt.key,_f=S.fetchers.get(sr),GS=$s(void 0,_f?_f.data:void 0);S.fetchers.set(sr,GS),de.has(sr)&&Fi(sr),nt.controller&&de.set(sr,nt.controller)}),gt({fetchers:new Map(S.fetchers)});let da=()=>Fn.forEach(nt=>Fi(nt.key));K.signal.addEventListener("abort",da);let{results:ql,loaderResults:Jl,fetcherResults:Zl}=await zf(S.matches,Gn,yr,Fn,ze);if(K.signal.aborted)return;K.signal.removeEventListener("abort",da),j.delete(T),de.delete(T),Fn.forEach(nt=>de.delete(nt.key));let Rr=Cg(ql);if(Rr){if(Rr.idx>=yr.length){let nt=Fn[Rr.idx-yr.length].key;Y.add(nt)}return js(S,Rr.result)}let{loaderData:Oe,errors:ln}=Sg(S,S.matches,yr,Jl,void 0,Fn,Zl,tt);if(S.fetchers.has(T)){let nt=Pi(fe.data);S.fetchers.set(T,nt)}Jf(Hs),S.navigation.state==="loading"&&Hs>mt?(le(w,"Expected pending action"),x&&x.abort(),Gt(S.navigation.location,{matches:Gn,loaderData:Oe,errors:ln,fetchers:new Map(S.fetchers)})):(gt({errors:ln,loaderData:Ag(S.loaderData,Oe,Gn,ln),fetchers:new Map(S.fetchers)}),Ee=!1)}async function Xl(T,N,O,z,Z,he,ee){let $=S.fetchers.get(T);Ni(T,$s(ee,$?$.data:void 0),{flushSync:he});let K=new AbortController,pe=_s(t.history,O,K.signal);de.set(T,K);let Et=xt,fe=await Gs("loader",pe,z,Z,s,r,l);if(hr(fe)&&(fe=await s1(fe,pe.signal,!0)||fe),de.get(T)===K&&de.delete(T),!pe.signal.aborted){if(ce.has(T)){Ni(T,Pi(void 0));return}if(as(fe))if(mt>Et){Ni(T,Pi(void 0));return}else{Y.add(T),await js(S,fe);return}if(Co(fe)){Us(T,N,fe.error);return}le(!hr(fe),"Unhandled fetcher deferred data"),Ni(T,Pi(fe.data))}}async function js(T,N,O){let{submission:z,fetcherSubmission:Z,replace:he}=O===void 0?{}:O;N.revalidate&&(Ee=!0);let ee=zo(T.location,N.location,{_isRedirect:!0});if(le(ee,"Expected a location on the redirect navigation"),n){let Le=!1;if(N.reloadDocument)Le=!0;else if(t1.test(N.location)){const ze=t.history.createURL(N.location);Le=ze.origin!==e.location.origin||$i(ze.pathname,l)==null}if(Le){he?e.location.replace(N.location):e.location.assign(N.location);return}}x=null;let $=he===!0?_e.Replace:_e.Push,{formMethod:K,formAction:pe,formEncType:Et}=T.navigation;!z&&!Z&&K&&pe&&Et&&(z=Dg(T.navigation));let fe=z||Z;if(Y0.has(N.status)&&fe&&jn(fe.formMethod))await It($,ee,{submission:Qe({},fe,{formAction:N.location}),preventScrollReset:D});else{let Le=Dc(ee,z);await It($,ee,{overrideNavigation:Le,fetcherSubmission:Z,preventScrollReset:D})}}async function zf(T,N,O,z,Z){let he=await Promise.all([...O.map(K=>Gs("loader",Z,K,N,s,r,l)),...z.map(K=>K.matches&&K.match&&K.controller?Gs("loader",_s(t.history,K.path,K.controller.signal),K.match,K.matches,s,r,l):{type:$e.error,error:hn(404,{pathname:K.path})})]),ee=he.slice(0,O.length),$=he.slice(O.length);return await Promise.all([wg(T,O,ee,ee.map(()=>Z.signal),!1,S.loaderData),wg(T,z.map(K=>K.match),$,z.map(K=>K.controller?K.controller.signal:null),!0)]),{results:he,loaderResults:ee,fetcherResults:$}}function zl(){Ee=!0,re.push(...Yl()),J.forEach((T,N)=>{de.has(N)&&(be.push(N),Fi(N))})}function Ni(T,N,O){O===void 0&&(O={}),S.fetchers.set(T,N),gt({fetchers:new Map(S.fetchers)},{flushSync:(O&&O.flushSync)===!0})}function Us(T,N,O,z){z===void 0&&(z={});let Z=vo(S.matches,N);la(T),gt({errors:{[Z.route.id]:O},fetchers:new Map(S.fetchers)},{flushSync:(z&&z.flushSync)===!0})}function Yf(T){return d.v7_fetcherPersist&&(ie.set(T,(ie.get(T)||0)+1),ce.has(T)&&ce.delete(T)),S.fetchers.get(T)||V0}function la(T){let N=S.fetchers.get(T);de.has(T)&&!(N&&N.state==="loading"&&j.has(T))&&Fi(T),J.delete(T),j.delete(T),Y.delete(T),ce.delete(T),S.fetchers.delete(T)}function qS(T){if(d.v7_fetcherPersist){let N=(ie.get(T)||0)-1;N<=0?(ie.delete(T),ce.add(T)):ie.set(T,N)}else la(T);gt({fetchers:new Map(S.fetchers)})}function Fi(T){let N=de.get(T);le(N,"Expected fetch controller: "+T),N.abort(),de.delete(T)}function Vf(T){for(let N of T){let O=Yf(N),z=Pi(O.data);S.fetchers.set(N,z)}}function qf(){let T=[],N=!1;for(let O of Y){let z=S.fetchers.get(O);le(z,"Expected fetcher: "+O),z.state==="loading"&&(Y.delete(O),T.push(O),N=!0)}return Vf(T),N}function Jf(T){let N=[];for(let[O,z]of j)if(z<T){let Z=S.fetchers.get(O);le(Z,"Expected fetcher: "+O),Z.state==="loading"&&(Fi(O),j.delete(O),N.push(O))}return Vf(N),N.length>0}function JS(T,N){let O=S.blockers.get(T)||Qs;return Re.get(T)!==N&&Re.set(T,N),O}function Zf(T){S.blockers.delete(T),Re.delete(T)}function ca(T,N){let O=S.blockers.get(T)||Qs;le(O.state==="unblocked"&&N.state==="blocked"||O.state==="blocked"&&N.state==="blocked"||O.state==="blocked"&&N.state==="proceeding"||O.state==="blocked"&&N.state==="unblocked"||O.state==="proceeding"&&N.state==="unblocked","Invalid blocker state transition: "+O.state+" -> "+N.state);let z=new Map(S.blockers);z.set(T,N),gt({blockers:z})}function Kf(T){let{currentLocation:N,nextLocation:O,historyAction:z}=T;if(Re.size===0)return;Re.size>1&&wr(!1,"A router only supports one blocker at a time");let Z=Array.from(Re.entries()),[he,ee]=Z[Z.length-1],$=S.blockers.get(he);if(!($&&$.state==="proceeding")&&ee({currentLocation:N,nextLocation:O,historyAction:z}))return he}function Yl(T){let N=[];return tt.forEach((O,z)=>{(!T||T(z))&&(O.cancel(),N.push(z),tt.delete(z))}),N}function ZS(T,N,O){if(c=T,g=N,h=O||null,!E&&S.navigation===wc){E=!0;let z=Gf(S.location,S.matches);z!=null&&gt({restoreScrollPosition:z})}return()=>{c=null,g=null,h=null}}function Qf(T,N){return h&&h(T,N.map(z=>v0(z,S.loaderData)))||T.key}function KS(T,N){if(c&&g){let O=Qf(T,N);c[O]=g()}}function Gf(T,N){if(c){let O=Qf(T,N),z=c[O];if(typeof z=="number")return z}return null}function QS(T){s={},a=yd(T,r,void 0,s)}return A={get basename(){return l},get state(){return S},get routes(){return o},get window(){return e},initialize:lt,subscribe:rr,enableScrollRestoration:ZS,navigate:Ti,fetch:Wl,revalidate:ys,createHref:T=>t.history.createHref(T),encodeLocation:T=>t.history.encodeLocation(T),getFetcher:Yf,deleteFetcher:qS,dispose:Qn,getBlocker:JS,deleteBlocker:Zf,_internalFetchControllers:de,_internalActiveDeferreds:tt,_internalSetRoutes:QS},A}function Z0(t){return t!=null&&("formData"in t&&t.formData!=null||"body"in t&&t.body!==void 0)}function Id(t,e,n,i,r,s,o){let a,l;if(s){a=[];for(let f of e)if(a.push(f),f.route.id===s){l=f;break}}else a=e,l=e[e.length-1];let d=Dl(r||".",wl(a),$i(t.pathname,n)||t.pathname,o==="path");return r==null&&(d.search=t.search,d.hash=t.hash),(r==null||r===""||r===".")&&l&&l.route.index&&!tf(d.search)&&(d.search=d.search?d.search.replace(/^\?/,"?index&"):"?index"),i&&n!=="/"&&(d.pathname=d.pathname==="/"?n:Si([n,d.pathname])),Dr(d)}function mg(t,e,n,i){if(!i||!Z0(i))return{path:n};if(i.formMethod&&!tw(i.formMethod))return{path:n,error:hn(405,{method:i.formMethod})};let r=()=>({path:n,error:hn(400,{type:"invalid-body"})}),s=i.formMethod||"get",o=t?s.toUpperCase():s.toLowerCase(),a=r1(n);if(i.body!==void 0){if(i.formEncType==="text/plain"){if(!jn(o))return r();let c=typeof i.body=="string"?i.body:i.body instanceof FormData||i.body instanceof URLSearchParams?Array.from(i.body.entries()).reduce((h,g)=>{let[E,p]=g;return""+h+E+"="+p+`
`},""):String(i.body);return{path:n,submission:{formMethod:o,formAction:a,formEncType:i.formEncType,formData:void 0,json:void 0,text:c}}}else if(i.formEncType==="application/json"){if(!jn(o))return r();try{let c=typeof i.body=="string"?JSON.parse(i.body):i.body;return{path:n,submission:{formMethod:o,formAction:a,formEncType:i.formEncType,formData:void 0,json:c,text:void 0}}}catch{return r()}}}le(typeof FormData=="function","FormData is not available in this environment");let l,d;if(i.formData)l=jd(i.formData),d=i.formData;else if(i.body instanceof FormData)l=jd(i.body),d=i.body;else if(i.body instanceof URLSearchParams)l=i.body,d=pg(l);else if(i.body==null)l=new URLSearchParams,d=new FormData;else try{l=new URLSearchParams(i.body),d=pg(l)}catch{return r()}let f={formMethod:o,formAction:a,formEncType:i&&i.formEncType||"application/x-www-form-urlencoded",formData:d,json:void 0,text:void 0};if(jn(f.formMethod))return{path:n,submission:f};let u=Bi(n);return e&&u.search&&tf(u.search)&&l.append("index",""),u.search="?"+l,{path:Dr(u),submission:f}}function K0(t,e){let n=t;if(e){let i=t.findIndex(r=>r.route.id===e);i>=0&&(n=t.slice(0,i))}return n}function gg(t,e,n,i,r,s,o,a,l,d,f,u,c,h,g){let E=g?Object.values(g)[0]:h?Object.values(h)[0]:void 0,p=t.createURL(e.location),m=t.createURL(r),b=g?Object.keys(g)[0]:void 0,S=K0(n,b).filter((D,x)=>{if(D.route.lazy)return!0;if(D.route.loader==null)return!1;if(Q0(e.loaderData,e.matches[x],D)||o.some(X=>X===D.route.id))return!0;let F=e.matches[x],y=D;return Eg(D,Qe({currentUrl:p,currentParams:F.params,nextUrl:m,nextParams:y.params},i,{actionResult:E,defaultShouldRevalidate:s||p.pathname+p.search===m.pathname+m.search||p.search!==m.search||i1(F,y)}))}),w=[];return d.forEach((D,x)=>{if(!n.some(Ee=>Ee.route.id===D.routeId)||l.has(x))return;let F=_r(u,D.path,c);if(!F){w.push({key:x,routeId:D.routeId,path:D.path,matches:null,match:null,controller:null});return}let y=e.fetchers.get(x),X=Ud(F,D.path),G=!1;f.has(x)?G=!1:a.includes(x)?G=!0:y&&y.state!=="idle"&&y.data===void 0?G=s:G=Eg(X,Qe({currentUrl:p,currentParams:e.matches[e.matches.length-1].params,nextUrl:m,nextParams:n[n.length-1].params},i,{actionResult:E,defaultShouldRevalidate:s})),G&&w.push({key:x,routeId:D.routeId,path:D.path,matches:F,match:X,controller:new AbortController})}),[S,w]}function Q0(t,e,n){let i=!e||n.route.id!==e.route.id,r=t[n.route.id]===void 0;return i||r}function i1(t,e){let n=t.route.path;return t.pathname!==e.pathname||n!=null&&n.endsWith("*")&&t.params["*"]!==e.params["*"]}function Eg(t,e){if(t.route.shouldRevalidate){let n=t.route.shouldRevalidate(e);if(typeof n=="boolean")return n}return e.defaultShouldRevalidate}async function bg(t,e,n){if(!t.lazy)return;let i=await t.lazy();if(!t.lazy)return;let r=n[t.id];le(r,"No route found in manifest");let s={};for(let o in i){let l=r[o]!==void 0&&o!=="hasErrorBoundary";wr(!l,'Route "'+r.id+'" has a static property "'+o+'" defined but its lazy function is also returning a value for this property. '+('The lazy route property "'+o+'" will be ignored.')),!l&&!S0.has(o)&&(s[o]=i[o])}Object.assign(r,s),Object.assign(r,Qe({},e(r),{lazy:void 0}))}async function Gs(t,e,n,i,r,s,o,a){a===void 0&&(a={});let l,d,f,u=g=>{let E,p=new Promise((m,b)=>E=b);return f=()=>E(),e.signal.addEventListener("abort",f),Promise.race([g({request:e,params:n.params,context:a.requestContext}),p])};try{let g=n.route[t];if(n.route.lazy)if(g){let E,p=await Promise.all([u(g).catch(m=>{E=m}),bg(n.route,s,r)]);if(E)throw E;d=p[0]}else if(await bg(n.route,s,r),g=n.route[t],g)d=await u(g);else if(t==="action"){let E=new URL(e.url),p=E.pathname+E.search;throw hn(405,{method:e.method,pathname:p,routeId:n.route.id})}else return{type:$e.data,data:void 0};else if(g)d=await u(g);else{let E=new URL(e.url),p=E.pathname+E.search;throw hn(404,{pathname:p})}le(d!==void 0,"You defined "+(t==="action"?"an action":"a loader")+" for route "+('"'+n.route.id+"\" but didn't return anything from your `"+t+"` ")+"function. Please return a value or `null`.")}catch(g){l=$e.error,d=g}finally{f&&e.signal.removeEventListener("abort",f)}if(ew(d)){let g=d.status;if(z0.has(g)){let m=d.headers.get("Location");if(le(m,"Redirects returned/thrown from loaders/actions must have a Location header"),!t1.test(m))m=Id(new URL(e.url),i.slice(0,i.indexOf(n)+1),o,!0,m);else if(!a.isStaticRequest){let b=new URL(e.url),A=m.startsWith("//")?new URL(b.protocol+m):new URL(m),S=$i(A.pathname,o)!=null;A.origin===b.origin&&S&&(m=A.pathname+A.search+A.hash)}if(a.isStaticRequest)throw d.headers.set("Location",m),d;return{type:$e.redirect,status:g,location:m,revalidate:d.headers.get("X-Remix-Revalidate")!==null,reloadDocument:d.headers.get("X-Remix-Reload-Document")!==null}}if(a.isRouteRequest)throw{type:l===$e.error?$e.error:$e.data,response:d};let E,p=d.headers.get("Content-Type");return p&&/\bapplication\/json\b/.test(p)?E=await d.json():E=await d.text(),l===$e.error?{type:l,error:new ef(g,d.statusText,E),headers:d.headers}:{type:$e.data,data:E,statusCode:d.status,headers:d.headers}}if(l===$e.error)return{type:l,error:d};if($0(d)){var c,h;return{type:$e.deferred,deferredData:d,statusCode:(c=d.init)==null?void 0:c.status,headers:((h=d.init)==null?void 0:h.headers)&&new Headers(d.init.headers)}}return{type:$e.data,data:d}}function _s(t,e,n,i){let r=t.createURL(r1(e)).toString(),s={signal:n};if(i&&jn(i.formMethod)){let{formMethod:o,formEncType:a}=i;s.method=o.toUpperCase(),a==="application/json"?(s.headers=new Headers({"Content-Type":a}),s.body=JSON.stringify(i.json)):a==="text/plain"?s.body=i.text:a==="application/x-www-form-urlencoded"&&i.formData?s.body=jd(i.formData):s.body=i.formData}return new Request(r,s)}function jd(t){let e=new URLSearchParams;for(let[n,i]of t.entries())e.append(n,typeof i=="string"?i:i.name);return e}function pg(t){let e=new FormData;for(let[n,i]of t.entries())e.append(n,i);return e}function G0(t,e,n,i,r){let s={},o=null,a,l=!1,d={};return n.forEach((f,u)=>{let c=e[u].route.id;if(le(!as(f),"Cannot handle redirect results in processLoaderData"),Co(f)){let h=vo(t,c),g=f.error;i&&(g=Object.values(i)[0],i=void 0),o=o||{},o[h.route.id]==null&&(o[h.route.id]=g),s[c]=void 0,l||(l=!0,a=$p(f.error)?f.error.status:500),f.headers&&(d[c]=f.headers)}else hr(f)?(r.set(c,f.deferredData),s[c]=f.deferredData.data):s[c]=f.data,f.statusCode!=null&&f.statusCode!==200&&!l&&(a=f.statusCode),f.headers&&(d[c]=f.headers)}),i&&(o=i,s[Object.keys(i)[0]]=void 0),{loaderData:s,errors:o,statusCode:a||200,loaderHeaders:d}}function Sg(t,e,n,i,r,s,o,a){let{loaderData:l,errors:d}=G0(e,n,i,r,a);for(let f=0;f<s.length;f++){let{key:u,match:c,controller:h}=s[f];le(o!==void 0&&o[f]!==void 0,"Did not find corresponding fetcher result");let g=o[f];if(!(h&&h.signal.aborted))if(Co(g)){let E=vo(t.matches,c==null?void 0:c.route.id);d&&d[E.route.id]||(d=Qe({},d,{[E.route.id]:g.error})),t.fetchers.delete(u)}else if(as(g))le(!1,"Unhandled fetcher revalidation redirect");else if(hr(g))le(!1,"Unhandled fetcher deferred data");else{let E=Pi(g.data);t.fetchers.set(u,E)}}return{loaderData:l,errors:d}}function Ag(t,e,n,i){let r=Qe({},e);for(let s of n){let o=s.route.id;if(e.hasOwnProperty(o)?e[o]!==void 0&&(r[o]=e[o]):t[o]!==void 0&&s.route.loader&&(r[o]=t[o]),i&&i.hasOwnProperty(o))break}return r}function vo(t,e){return(e?t.slice(0,t.findIndex(i=>i.route.id===e)+1):[...t]).reverse().find(i=>i.route.hasErrorBoundary===!0)||t[0]}function vg(t){let e=t.length===1?t[0]:t.find(n=>n.index||!n.path||n.path==="/")||{id:"__shim-error-route__"};return{matches:[{params:{},pathname:"",pathnameBase:"",route:e}],route:e}}function hn(t,e){let{pathname:n,routeId:i,method:r,type:s}=e===void 0?{}:e,o="Unknown Server Error",a="Unknown @remix-run/router error";return t===400?(o="Bad Request",r&&n&&i?a="You made a "+r+' request to "'+n+'" but '+('did not provide a `loader` for route "'+i+'", ')+"so there is no way to handle the request.":s==="defer-action"?a="defer() is not supported in actions":s==="invalid-body"&&(a="Unable to encode submission body")):t===403?(o="Forbidden",a='Route "'+i+'" does not match URL "'+n+'"'):t===404?(o="Not Found",a='No route matches URL "'+n+'"'):t===405&&(o="Method Not Allowed",r&&n&&i?a="You made a "+r.toUpperCase()+' request to "'+n+'" but '+('did not provide an `action` for route "'+i+'", ')+"so there is no way to handle the request.":r&&(a='Invalid request method "'+r.toUpperCase()+'"')),new ef(t||500,o,new Error(a),!0)}function Cg(t){for(let e=t.length-1;e>=0;e--){let n=t[e];if(as(n))return{result:n,idx:e}}}function r1(t){let e=typeof t=="string"?Bi(t):t;return Dr(Qe({},e,{hash:""}))}function _0(t,e){return t.pathname!==e.pathname||t.search!==e.search?!1:t.hash===""?e.hash!=="":t.hash===e.hash?!0:e.hash!==""}function hr(t){return t.type===$e.deferred}function Co(t){return t.type===$e.error}function as(t){return(t&&t.type)===$e.redirect}function $0(t){let e=t;return e&&typeof e=="object"&&typeof e.data=="object"&&typeof e.subscribe=="function"&&typeof e.cancel=="function"&&typeof e.resolveData=="function"}function ew(t){return t!=null&&typeof t.status=="number"&&typeof t.statusText=="string"&&typeof t.headers=="object"&&typeof t.body<"u"}function tw(t){return X0.has(t.toLowerCase())}function jn(t){return H0.has(t.toLowerCase())}async function wg(t,e,n,i,r,s){for(let o=0;o<n.length;o++){let a=n[o],l=e[o];if(!l)continue;let d=t.find(u=>u.route.id===l.route.id),f=d!=null&&!i1(d,l)&&(s&&s[l.route.id])!==void 0;if(hr(a)&&(r||f)){let u=i[o];le(u,"Expected an AbortSignal for revalidating fetcher deferred result"),await s1(a,u,r).then(c=>{c&&(n[o]=c||n[o])})}}}async function s1(t,e,n){if(n===void 0&&(n=!1),!await t.deferredData.resolveData(e)){if(n)try{return{type:$e.data,data:t.deferredData.unwrappedData}}catch(r){return{type:$e.error,error:r}}return{type:$e.data,data:t.deferredData.data}}}function tf(t){return new URLSearchParams(t).getAll("index").some(e=>e==="")}function Ud(t,e){let n=typeof e=="string"?Bi(e).search:e.search;if(t[t.length-1].route.index&&tf(n||""))return t[t.length-1];let i=_p(t);return i[i.length-1]}function Dg(t){let{formMethod:e,formAction:n,formEncType:i,text:r,formData:s,json:o}=t;if(!(!e||!n||!i)){if(r!=null)return{formMethod:e,formAction:n,formEncType:i,formData:void 0,json:void 0,text:r};if(s!=null)return{formMethod:e,formAction:n,formEncType:i,formData:s,json:void 0,text:void 0};if(o!==void 0)return{formMethod:e,formAction:n,formEncType:i,formData:void 0,json:o,text:void 0}}}function Dc(t,e){return e?{state:"loading",location:t,formMethod:e.formMethod,formAction:e.formAction,formEncType:e.formEncType,formData:e.formData,json:e.json,text:e.text}:{state:"loading",location:t,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0}}function nw(t,e){return{state:"submitting",location:t,formMethod:e.formMethod,formAction:e.formAction,formEncType:e.formEncType,formData:e.formData,json:e.json,text:e.text}}function $s(t,e){return t?{state:"loading",formMethod:t.formMethod,formAction:t.formAction,formEncType:t.formEncType,formData:t.formData,json:t.json,text:t.text,data:e}:{state:"loading",formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0,data:e}}function iw(t,e){return{state:"submitting",formMethod:t.formMethod,formAction:t.formAction,formEncType:t.formEncType,formData:t.formData,json:t.json,text:t.text,data:e?e.data:void 0}}function Pi(t){return{state:"idle",formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0,data:t}}function rw(t,e){try{let n=t.sessionStorage.getItem(n1);if(n){let i=JSON.parse(n);for(let[r,s]of Object.entries(i||{}))s&&Array.isArray(s)&&e.set(r,new Set(s||[]))}}catch{}}function sw(t,e){if(e.size>0){let n={};for(let[i,r]of e)n[i]=[...r];try{t.sessionStorage.setItem(n1,JSON.stringify(n))}catch(i){wr(!1,"Failed to save applied view transitions in sessionStorage ("+i+").")}}}/**
 * React Router v6.20.0
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */function Nu(){return Nu=Object.assign?Object.assign.bind():function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(t[i]=n[i])}return t},Nu.apply(this,arguments)}const $o=B.createContext(null),nf=B.createContext(null),kr=B.createContext(null),xl=B.createContext(null),li=B.createContext({outlet:null,matches:[],isDataRoute:!1}),o1=B.createContext(null);function ow(t,e){let{relative:n}=e===void 0?{}:e;Fs()||le(!1);let{basename:i,navigator:r}=B.useContext(kr),{hash:s,pathname:o,search:a}=Bl(t,{relative:n}),l=o;return i!=="/"&&(l=o==="/"?i:Si([i,o])),r.createHref({pathname:l,search:a,hash:s})}function Fs(){return B.useContext(xl)!=null}function Ms(){return Fs()||le(!1),B.useContext(xl).location}function a1(t){B.useContext(kr).static||B.useLayoutEffect(t)}function Zt(){let{isDataRoute:t}=B.useContext(li);return t?Aw():aw()}function aw(){Fs()||le(!1);let t=B.useContext($o),{basename:e,navigator:n}=B.useContext(kr),{matches:i}=B.useContext(li),{pathname:r}=Ms(),s=JSON.stringify(wl(i)),o=B.useRef(!1);return a1(()=>{o.current=!0}),B.useCallback(function(l,d){if(d===void 0&&(d={}),!o.current)return;if(typeof l=="number"){n.go(l);return}let f=Dl(l,JSON.parse(s),r,d.relative==="path");t==null&&e!=="/"&&(f.pathname=f.pathname==="/"?e:Si([e,f.pathname])),(d.replace?n.replace:n.push)(f,d.state,d)},[e,n,s,r,t])}const uw=B.createContext(null);function lw(t){let e=B.useContext(li).outlet;return e&&B.createElement(uw.Provider,{value:t},e)}function u1(){let{matches:t}=B.useContext(li),e=t[t.length-1];return e?e.params:{}}function Bl(t,e){let{relative:n}=e===void 0?{}:e,{matches:i}=B.useContext(li),{pathname:r}=Ms(),s=JSON.stringify(wl(i));return B.useMemo(()=>Dl(t,JSON.parse(s),r,n==="path"),[t,s,r,n])}function cw(t,e,n){Fs()||le(!1);let{navigator:i}=B.useContext(kr),{matches:r}=B.useContext(li),s=r[r.length-1],o=s?s.params:{};s&&s.pathname;let a=s?s.pathnameBase:"/";s&&s.route;let l=Ms(),d;if(e){var f;let E=typeof e=="string"?Bi(e):e;a==="/"||(f=E.pathname)!=null&&f.startsWith(a)||le(!1),d=E}else d=l;let u=d.pathname||"/",c=a==="/"?u:u.slice(a.length)||"/",h=_r(t,{pathname:c}),g=gw(h&&h.map(E=>Object.assign({},E,{params:Object.assign({},o,E.params),pathname:Si([a,i.encodeLocation?i.encodeLocation(E.pathname).pathname:E.pathname]),pathnameBase:E.pathnameBase==="/"?a:Si([a,i.encodeLocation?i.encodeLocation(E.pathnameBase).pathname:E.pathnameBase])})),r,n);return e&&g?B.createElement(xl.Provider,{value:{location:Nu({pathname:"/",search:"",hash:"",state:null,key:"default"},d),navigationType:_e.Pop}},g):g}function dw(){let t=Sw(),e=$p(t)?t.status+" "+t.statusText:t instanceof Error?t.message:JSON.stringify(t),n=t instanceof Error?t.stack:null,r={padding:"0.5rem",backgroundColor:"rgba(200,200,200, 0.5)"},s=null;return B.createElement(B.Fragment,null,B.createElement("h2",null,"Unexpected Application Error!"),B.createElement("h3",{style:{fontStyle:"italic"}},e),n?B.createElement("pre",{style:r},n):null,s)}const hw=B.createElement(dw,null);class fw extends B.Component{constructor(e){super(e),this.state={location:e.location,revalidation:e.revalidation,error:e.error}}static getDerivedStateFromError(e){return{error:e}}static getDerivedStateFromProps(e,n){return n.location!==e.location||n.revalidation!=="idle"&&e.revalidation==="idle"?{error:e.error,location:e.location,revalidation:e.revalidation}:{error:e.error||n.error,location:n.location,revalidation:e.revalidation||n.revalidation}}componentDidCatch(e,n){console.error("React Router caught the following error during render",e,n)}render(){return this.state.error?B.createElement(li.Provider,{value:this.props.routeContext},B.createElement(o1.Provider,{value:this.state.error,children:this.props.component})):this.props.children}}function mw(t){let{routeContext:e,match:n,children:i}=t,r=B.useContext($o);return r&&r.static&&r.staticContext&&(n.route.errorElement||n.route.ErrorBoundary)&&(r.staticContext._deepestRenderedBoundaryId=n.route.id),B.createElement(li.Provider,{value:e},i)}function gw(t,e,n){var i;if(e===void 0&&(e=[]),n===void 0&&(n=null),t==null){var r;if((r=n)!=null&&r.errors)t=n.matches;else return null}let s=t,o=(i=n)==null?void 0:i.errors;if(o!=null){let a=s.findIndex(l=>l.route.id&&(o==null?void 0:o[l.route.id]));a>=0||le(!1),s=s.slice(0,Math.min(s.length,a+1))}return s.reduceRight((a,l,d)=>{let f=l.route.id?o==null?void 0:o[l.route.id]:null,u=null;n&&(u=l.route.errorElement||hw);let c=e.concat(s.slice(0,d+1)),h=()=>{let g;return f?g=u:l.route.Component?g=B.createElement(l.route.Component,null):l.route.element?g=l.route.element:g=a,B.createElement(mw,{match:l,routeContext:{outlet:a,matches:c,isDataRoute:n!=null},children:g})};return n&&(l.route.ErrorBoundary||l.route.errorElement||d===0)?B.createElement(fw,{location:n.location,revalidation:n.revalidation,component:u,error:f,children:h(),routeContext:{outlet:null,matches:c,isDataRoute:!0}}):h()},null)}var l1=function(t){return t.UseBlocker="useBlocker",t.UseRevalidator="useRevalidator",t.UseNavigateStable="useNavigate",t}(l1||{}),Fu=function(t){return t.UseBlocker="useBlocker",t.UseLoaderData="useLoaderData",t.UseActionData="useActionData",t.UseRouteError="useRouteError",t.UseNavigation="useNavigation",t.UseRouteLoaderData="useRouteLoaderData",t.UseMatches="useMatches",t.UseRevalidator="useRevalidator",t.UseNavigateStable="useNavigate",t.UseRouteId="useRouteId",t}(Fu||{});function Ew(t){let e=B.useContext($o);return e||le(!1),e}function bw(t){let e=B.useContext(nf);return e||le(!1),e}function pw(t){let e=B.useContext(li);return e||le(!1),e}function c1(t){let e=pw(),n=e.matches[e.matches.length-1];return n.route.id||le(!1),n.route.id}function Sw(){var t;let e=B.useContext(o1),n=bw(Fu.UseRouteError),i=c1(Fu.UseRouteError);return e||((t=n.errors)==null?void 0:t[i])}function Aw(){let{router:t}=Ew(l1.UseNavigateStable),e=c1(Fu.UseNavigateStable),n=B.useRef(!1);return a1(()=>{n.current=!0}),B.useCallback(function(r,s){s===void 0&&(s={}),n.current&&(typeof r=="number"?t.navigate(r):t.navigate(r,Nu({fromRouteId:e},s)))},[t,e])}function rf(t){let{to:e,replace:n,state:i,relative:r}=t;Fs()||le(!1);let{matches:s}=B.useContext(li),{pathname:o}=Ms(),a=Zt(),l=Dl(e,wl(s),o,r==="path"),d=JSON.stringify(l);return B.useEffect(()=>a(JSON.parse(d),{replace:n,state:i,relative:r}),[a,d,r,n,i]),null}function vw(t){return lw(t.context)}function Cw(t){let{basename:e="/",children:n=null,location:i,navigationType:r=_e.Pop,navigator:s,static:o=!1}=t;Fs()&&le(!1);let a=e.replace(/^\/*/,"/"),l=B.useMemo(()=>({basename:a,navigator:s,static:o}),[a,s,o]);typeof i=="string"&&(i=Bi(i));let{pathname:d="/",search:f="",hash:u="",state:c=null,key:h="default"}=i,g=B.useMemo(()=>{let E=$i(d,a);return E==null?null:{location:{pathname:E,search:f,hash:u,state:c,key:h},navigationType:r}},[a,d,f,u,c,h,r]);return g==null?null:B.createElement(kr.Provider,{value:l},B.createElement(xl.Provider,{children:n,value:g}))}new Promise(()=>{});function ww(t){let e={hasErrorBoundary:t.ErrorBoundary!=null||t.errorElement!=null};return t.Component&&Object.assign(e,{element:B.createElement(t.Component),Component:void 0}),t.ErrorBoundary&&Object.assign(e,{errorElement:B.createElement(t.ErrorBoundary),ErrorBoundary:void 0}),e}/**
 * React Router DOM v6.20.0
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */function As(){return As=Object.assign?Object.assign.bind():function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(t[i]=n[i])}return t},As.apply(this,arguments)}function d1(t,e){if(t==null)return{};var n={},i=Object.keys(t),r,s;for(s=0;s<i.length;s++)r=i[s],!(e.indexOf(r)>=0)&&(n[r]=t[r]);return n}function Dw(t){return!!(t.metaKey||t.altKey||t.ctrlKey||t.shiftKey)}function xw(t,e){return t.button===0&&(!e||e==="_self")&&!Dw(t)}const Bw=["onClick","relative","reloadDocument","replace","state","target","to","preventScrollReset","unstable_viewTransition"],Tw=["aria-current","caseSensitive","className","end","style","to","unstable_viewTransition","children"];function Nw(t,e){return J0({basename:e==null?void 0:e.basename,future:As({},e==null?void 0:e.future,{v7_prependBasename:!0}),history:E0({window:e==null?void 0:e.window}),hydrationData:(e==null?void 0:e.hydrationData)||Fw(),routes:t,mapRouteProperties:ww,window:e==null?void 0:e.window}).initialize()}function Fw(){var t;let e=(t=window)==null?void 0:t.__staticRouterHydrationData;return e&&e.errors&&(e=As({},e,{errors:Mw(e.errors)})),e}function Mw(t){if(!t)return null;let e=Object.entries(t),n={};for(let[i,r]of e)if(r&&r.__type==="RouteErrorResponse")n[i]=new ef(r.status,r.statusText,r.data,r.internal===!0);else if(r&&r.__type==="Error"){if(r.__subType){let s=window[r.__subType];if(typeof s=="function")try{let o=new s(r.message);o.stack="",n[i]=o}catch{}}if(n[i]==null){let s=new Error(r.message);s.stack="",n[i]=s}}else n[i]=r;return n}const h1=B.createContext({isTransitioning:!1}),Pw=B.createContext(new Map),kw="startTransition",xg=gA[kw],Lw="flushSync",Bg=xC[Lw];function Ow(t){xg?xg(t):t()}function eo(t){Bg?Bg(t):t()}class yw{constructor(){this.status="pending",this.promise=new Promise((e,n)=>{this.resolve=i=>{this.status==="pending"&&(this.status="resolved",e(i))},this.reject=i=>{this.status==="pending"&&(this.status="rejected",n(i))}})}}function Rw(t){let{fallbackElement:e,router:n,future:i}=t,[r,s]=B.useState(n.state),[o,a]=B.useState(),[l,d]=B.useState({isTransitioning:!1}),[f,u]=B.useState(),[c,h]=B.useState(),[g,E]=B.useState(),p=B.useRef(new Map),{v7_startTransition:m}=i||{},b=B.useCallback(x=>{m?Ow(x):x()},[m]),A=B.useCallback((x,F)=>{let{deletedFetchers:y,unstable_flushSync:X,unstable_viewTransitionOpts:G}=F;y.forEach(re=>p.current.delete(re)),x.fetchers.forEach((re,be)=>{re.data!==void 0&&p.current.set(be,re.data)});let Ee=n.window==null||typeof n.window.document.startViewTransition!="function";if(!G||Ee){X?eo(()=>s(x)):b(()=>s(x));return}if(X){eo(()=>{c&&(f&&f.resolve(),c.skipTransition()),d({isTransitioning:!0,flushSync:!0,currentLocation:G.currentLocation,nextLocation:G.nextLocation})});let re=n.window.document.startViewTransition(()=>{eo(()=>s(x))});re.finished.finally(()=>{eo(()=>{u(void 0),h(void 0),a(void 0),d({isTransitioning:!1})})}),eo(()=>h(re));return}c?(f&&f.resolve(),c.skipTransition(),E({state:x,currentLocation:G.currentLocation,nextLocation:G.nextLocation})):(a(x),d({isTransitioning:!0,flushSync:!1,currentLocation:G.currentLocation,nextLocation:G.nextLocation}))},[n.window,c,f,p,b]);B.useLayoutEffect(()=>n.subscribe(A),[n,A]),B.useEffect(()=>{l.isTransitioning&&!l.flushSync&&u(new yw)},[l]),B.useEffect(()=>{if(f&&o&&n.window){let x=o,F=f.promise,y=n.window.document.startViewTransition(async()=>{b(()=>s(x)),await F});y.finished.finally(()=>{u(void 0),h(void 0),a(void 0),d({isTransitioning:!1})}),h(y)}},[b,o,f,n.window]),B.useEffect(()=>{f&&o&&r.location.key===o.location.key&&f.resolve()},[f,c,r.location,o]),B.useEffect(()=>{!l.isTransitioning&&g&&(a(g.state),d({isTransitioning:!0,flushSync:!1,currentLocation:g.currentLocation,nextLocation:g.nextLocation}),E(void 0))},[l.isTransitioning,g]);let S=B.useMemo(()=>({createHref:n.createHref,encodeLocation:n.encodeLocation,go:x=>n.navigate(x),push:(x,F,y)=>n.navigate(x,{state:F,preventScrollReset:y==null?void 0:y.preventScrollReset}),replace:(x,F,y)=>n.navigate(x,{replace:!0,state:F,preventScrollReset:y==null?void 0:y.preventScrollReset})}),[n]),w=n.basename||"/",D=B.useMemo(()=>({router:n,navigator:S,static:!1,basename:w}),[n,S,w]);return B.createElement(B.Fragment,null,B.createElement($o.Provider,{value:D},B.createElement(nf.Provider,{value:r},B.createElement(Pw.Provider,{value:p.current},B.createElement(h1.Provider,{value:l},B.createElement(Cw,{basename:w,location:r.location,navigationType:r.historyAction,navigator:S},r.initialized?B.createElement(Iw,{routes:n.routes,state:r}):e))))),null)}function Iw(t){let{routes:e,state:n}=t;return cw(e,void 0,n)}const jw=typeof window<"u"&&typeof window.document<"u"&&typeof window.document.createElement<"u",Uw=/^(?:[a-z][a-z0-9+.-]*:|\/\/)/i,sf=B.forwardRef(function(e,n){let{onClick:i,relative:r,reloadDocument:s,replace:o,state:a,target:l,to:d,preventScrollReset:f,unstable_viewTransition:u}=e,c=d1(e,Bw),{basename:h}=B.useContext(kr),g,E=!1;if(typeof d=="string"&&Uw.test(d)&&(g=d,jw))try{let A=new URL(window.location.href),S=d.startsWith("//")?new URL(A.protocol+d):new URL(d),w=$i(S.pathname,h);S.origin===A.origin&&w!=null?d=w+S.search+S.hash:E=!0}catch{}let p=ow(d,{relative:r}),m=Ww(d,{replace:o,state:a,target:l,preventScrollReset:f,relative:r,unstable_viewTransition:u});function b(A){i&&i(A),A.defaultPrevented||m(A)}return B.createElement("a",As({},c,{href:g||p,onClick:E||s?i:b,ref:n,target:l}))}),f1=B.forwardRef(function(e,n){let{"aria-current":i="page",caseSensitive:r=!1,className:s="",end:o=!1,style:a,to:l,unstable_viewTransition:d,children:f}=e,u=d1(e,Tw),c=Bl(l,{relative:u.relative}),h=Ms(),g=B.useContext(nf),{navigator:E}=B.useContext(kr),p=g!=null&&Xw(c)&&d===!0,m=E.encodeLocation?E.encodeLocation(c).pathname:c.pathname,b=h.pathname,A=g&&g.navigation&&g.navigation.location?g.navigation.location.pathname:null;r||(b=b.toLowerCase(),A=A?A.toLowerCase():null,m=m.toLowerCase());const S=m!=="/"&&m.endsWith("/")?m.length-1:m.length;let w=b===m||!o&&b.startsWith(m)&&b.charAt(S)==="/",D=A!=null&&(A===m||!o&&A.startsWith(m)&&A.charAt(m.length)==="/"),x={isActive:w,isPending:D,isTransitioning:p},F=w?i:void 0,y;typeof s=="function"?y=s(x):y=[s,w?"active":null,D?"pending":null,p?"transitioning":null].filter(Boolean).join(" ");let X=typeof a=="function"?a(x):a;return B.createElement(sf,As({},u,{"aria-current":F,className:y,ref:n,style:X,to:l,unstable_viewTransition:d}),typeof f=="function"?f(x):f)});var Hd;(function(t){t.UseScrollRestoration="useScrollRestoration",t.UseSubmit="useSubmit",t.UseSubmitFetcher="useSubmitFetcher",t.UseFetcher="useFetcher",t.useViewTransitionState="useViewTransitionState"})(Hd||(Hd={}));var Tg;(function(t){t.UseFetcher="useFetcher",t.UseFetchers="useFetchers",t.UseScrollRestoration="useScrollRestoration"})(Tg||(Tg={}));function Hw(t){let e=B.useContext($o);return e||le(!1),e}function Ww(t,e){let{target:n,replace:i,state:r,preventScrollReset:s,relative:o,unstable_viewTransition:a}=e===void 0?{}:e,l=Zt(),d=Ms(),f=Bl(t,{relative:o});return B.useCallback(u=>{if(xw(u,n)){u.preventDefault();let c=i!==void 0?i:Dr(d)===Dr(f);l(t,{replace:c,state:r,preventScrollReset:s,relative:o,unstable_viewTransition:a})}},[d,l,f,i,r,n,t,s,o,a])}function Xw(t,e){e===void 0&&(e={});let n=B.useContext(h1);n==null&&le(!1);let{basename:i}=Hw(Hd.useViewTransitionState),r=Bl(t,{relative:e.relative});if(!n.isTransitioning)return!1;let s=$i(n.currentLocation.pathname,i)||n.currentLocation.pathname,o=$i(n.nextLocation.pathname,i)||n.nextLocation.pathname;return Rd(r.pathname,o)!=null||Rd(r.pathname,s)!=null}function Yo(t){"@babel/helpers - typeof";return Yo=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(e){return typeof e}:function(e){return e&&typeof Symbol=="function"&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Yo(t)}function zw(t,e){if(Yo(t)!=="object"||t===null)return t;var n=t[Symbol.toPrimitive];if(n!==void 0){var i=n.call(t,e||"default");if(Yo(i)!=="object")return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return(e==="string"?String:Number)(t)}function Yw(t){var e=zw(t,"string");return Yo(e)==="symbol"?e:String(e)}function Vw(t,e,n){return e=Yw(e),e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function Ng(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);e&&(i=i.filter(function(r){return Object.getOwnPropertyDescriptor(t,r).enumerable})),n.push.apply(n,i)}return n}function Fg(t){for(var e=1;e<arguments.length;e++){var n=arguments[e]!=null?arguments[e]:{};e%2?Ng(Object(n),!0).forEach(function(i){Vw(t,i,n[i])}):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):Ng(Object(n)).forEach(function(i){Object.defineProperty(t,i,Object.getOwnPropertyDescriptor(n,i))})}return t}function Ct(t){return"Minified Redux error #"+t+"; visit https://redux.js.org/Errors?code="+t+" for the full message or use the non-minified dev environment for full errors. "}var Mg=function(){return typeof Symbol=="function"&&Symbol.observable||"@@observable"}(),xc=function(){return Math.random().toString(36).substring(7).split("").join(".")},Mu={INIT:"@@redux/INIT"+xc(),REPLACE:"@@redux/REPLACE"+xc(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+xc()}};function qw(t){if(typeof t!="object"||t===null)return!1;for(var e=t;Object.getPrototypeOf(e)!==null;)e=Object.getPrototypeOf(e);return Object.getPrototypeOf(t)===e}function m1(t,e,n){var i;if(typeof e=="function"&&typeof n=="function"||typeof n=="function"&&typeof arguments[3]=="function")throw new Error(Ct(0));if(typeof e=="function"&&typeof n>"u"&&(n=e,e=void 0),typeof n<"u"){if(typeof n!="function")throw new Error(Ct(1));return n(m1)(t,e)}if(typeof t!="function")throw new Error(Ct(2));var r=t,s=e,o=[],a=o,l=!1;function d(){a===o&&(a=o.slice())}function f(){if(l)throw new Error(Ct(3));return s}function u(E){if(typeof E!="function")throw new Error(Ct(4));if(l)throw new Error(Ct(5));var p=!0;return d(),a.push(E),function(){if(p){if(l)throw new Error(Ct(6));p=!1,d();var b=a.indexOf(E);a.splice(b,1),o=null}}}function c(E){if(!qw(E))throw new Error(Ct(7));if(typeof E.type>"u")throw new Error(Ct(8));if(l)throw new Error(Ct(9));try{l=!0,s=r(s,E)}finally{l=!1}for(var p=o=a,m=0;m<p.length;m++){var b=p[m];b()}return E}function h(E){if(typeof E!="function")throw new Error(Ct(10));r=E,c({type:Mu.REPLACE})}function g(){var E,p=u;return E={subscribe:function(b){if(typeof b!="object"||b===null)throw new Error(Ct(11));function A(){b.next&&b.next(f())}A();var S=p(A);return{unsubscribe:S}}},E[Mg]=function(){return this},E}return c({type:Mu.INIT}),i={dispatch:c,subscribe:u,getState:f,replaceReducer:h},i[Mg]=g,i}var Jw=m1;function Zw(t){Object.keys(t).forEach(function(e){var n=t[e],i=n(void 0,{type:Mu.INIT});if(typeof i>"u")throw new Error(Ct(12));if(typeof n(void 0,{type:Mu.PROBE_UNKNOWN_ACTION()})>"u")throw new Error(Ct(13))})}function Kw(t){for(var e=Object.keys(t),n={},i=0;i<e.length;i++){var r=e[i];typeof t[r]=="function"&&(n[r]=t[r])}var s=Object.keys(n),o;try{Zw(n)}catch(a){o=a}return function(l,d){if(l===void 0&&(l={}),o)throw o;for(var f=!1,u={},c=0;c<s.length;c++){var h=s[c],g=n[h],E=l[h],p=g(E,d);if(typeof p>"u")throw d&&d.type,new Error(Ct(14));u[h]=p,f=f||p!==E}return f=f||s.length!==Object.keys(l).length,f?u:l}}function Qw(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];return e.length===0?function(i){return i}:e.length===1?e[0]:e.reduce(function(i,r){return function(){return i(r.apply(void 0,arguments))}})}function Gw(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];return function(i){return function(){var r=i.apply(void 0,arguments),s=function(){throw new Error(Ct(15))},o={getState:r.getState,dispatch:function(){return s.apply(void 0,arguments)}},a=e.map(function(l){return l(o)});return s=Qw.apply(void 0,a)(r.dispatch),Fg(Fg({},r),{},{dispatch:s})}}}function g1(t){var e=function(i){var r=i.dispatch,s=i.getState;return function(o){return function(a){return typeof a=="function"?a(r,s,t):o(a)}}};return e}var E1=g1();E1.withExtraArgument=g1;const _w=E1,b1="session/setUser",p1="session/removeUser",of=t=>({type:b1,payload:t}),$w=()=>({type:p1}),eD=()=>async t=>{const e=await fetch("/api/auth/");if(e.ok){const n=await e.json();if(n.errors)return;t(of(n))}},Ka=t=>async e=>{const n=await fetch("/api/auth/login",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});if(n.ok){const i=await n.json();e(of(i))}else return n.status<500?await n.json():{server:"Something went wrong. Please try again"}},S1=t=>async e=>{console.log("Signup Request Data:",t);const n=await fetch("/api/auth/signup",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});if(console.log("Signup Response Status:",n.status),n.ok){const i=await n.json();e(of(i))}else if(n.status<500){const i=await n.json();return console.log("Validation Errors:",i),i}else return console.log("Server Error Response:",await n.text()),{server:"Something went wrong. Please try again"}},A1=()=>async t=>{await fetch("/api/auth/logout"),t($w())},tD={user:null};function nD(t=tD,e){switch(e.type){case b1:return{...t,user:e.payload};case p1:return{...t,user:null};default:return t}}const v1="course/LOAD_COURSES",C1="course/CREATE_COURSES",w1="course/DELETE_COURSES",D1="course/UPDATE_COURSES",iD=t=>({type:v1,payload:t}),rD=t=>({type:C1,payload:{course:t}}),sD=(t,e,n)=>({type:D1,payload:{course_id:t,course_name:e,details_of_course:n}}),x1=()=>async t=>{const e=await fetch("/api/course/",{method:"GET",headers:{"Content-Type":"application/json"},credentials:"include"});if(e.ok){const n=await e.json();t(iD(n))}else console.error("Error fetching courses")},oD=(t,e)=>async n=>{try{const i=await fetch("/api/course/admin",{method:"POST",body:JSON.stringify({course_name:t,details_of_course:e}),headers:{"Content-Type":"application/json"},credentials:"include"});if(i.ok){const r=await i.json();return n(rD(r)),r}else{const r=await i.json();throw console.error("Error creating course:",r),new Error(r.msg||"Failed to create course")}}catch(i){throw console.error("Error creating course:",i),i}},aD=t=>async e=>{console.log("Delete request starting for course:",t);try{const n=await fetch(`/api/course/admin/delete/${t}`,{method:"DELETE",headers:{"Content-Type":"application/json"},credentials:"include"});if(n.ok)return e({type:w1,payload:t}),e(x1()),{success:!0};const i=await n.json();return console.log("Server error:",i),{success:!1,error:i.msg}}catch(n){return console.log("Delete operation failed:",n),{success:!1,error:n.message}}},uD=(t,e,n)=>async i=>{const r=await fetch(`/api/course/admin/${t}`,{method:"PUT",body:JSON.stringify({course_name:e,details_of_course:n}),headers:{"Content-Type":"application/json"},credentials:"include"});if(r.ok){const s=await r.json();return i(sD(t,e,n)),s}};function lD(t={},e){switch(e.type){case v1:{const n={...t};return e.payload.forEach(i=>{n[i.id]=i}),n}case C1:{const n={...t};return n[e.payload.course.id]=e.payload.course,n}case w1:{const n={...t};return delete n[e.payload],n}case D1:{const n={...t};return n[e.payload.course_id]={id:e.payload.course_id,course_name:e.payload.course_name,details_of_course:e.payload.details_of_course},n}default:return t}}const cD="scale/LOAD_SCALES";function dD(t={},e){switch(e.type){case cD:{const n={...t};return e.payload.forEach(i=>{n[i.id]=i}),n}default:return t}}const B1="review/LOAD_REVIEWS",T1="review/ADD_REVIEW",hD="review/DELETE_REVIEW",fD="review/UPDATE_REVIEW",mD=t=>({type:B1,payload:t}),gD=t=>({type:T1,payload:t}),ED=()=>async t=>{const e=await fetch("/api/review");if(e.ok){const n=await e.json();t(mD(n))}},bD=t=>async e=>{const n=await fetch("/api/review/create",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({review_content:t})});if(n.ok){const i=await n.json();return e(gD(i)),i}},pD={};function SD(t=pD,e){switch(e.type){case B1:{const n={};return e.payload.forEach(i=>{n[i.id]=i}),n}case T1:{const n={...t};return n[e.payload.id]=e.payload,n}case hD:{const n={...t};return delete n[e.payload],n}case fD:{const n={...t};return n[e.payload.id]=e.payload,n}default:return t}}const AD="chord/LOAD_CHORDS";function vD(t={},e){switch(e.type){case AD:{const n={...t};return e.payload.forEach(i=>{n[i.id]=i}),n}default:return t}}const CD="progression/LOAD_PROGRESSIONS";function wD(t={},e){switch(e.type){case CD:{const n={...t};return e.payload.forEach(i=>{n[i.id]=i}),n}default:return t}}const DD="key/LOAD_KEYS";function xD(t={},e){switch(e.type){case DD:{const n={...t};return e.payload.forEach(i=>{n[i.id]=i}),n}default:return t}}const N1="song/LOAD_SONGS",F1="song/CREATE_SONGS",M1="song/DELETE_SONGS",P1="song/UPDATE_SONGS",BD="song/CLEAR_SONGS",TD=t=>({type:N1,payload:t}),ND=t=>({type:F1,payload:{song:t}}),FD=t=>({type:M1,payload:t}),MD=(t,e,n,i,r,s,o)=>({type:P1,payload:{song_id:t,song_key:s,song:e,artist:n,chords_used:i,progression_used:r,description:o}}),af=t=>async e=>{console.log("Fetching songs for key:",t);const n=await fetch(`/api/song/${t}`,{method:"GET",headers:{"Content-Type":"application/json"},credentials:"include"});if(n.ok){const i=await n.json();console.log("Received data:",i),e(TD(i))}else console.error("Error fetching songs")},PD=(t,e,n,i,r,s,o)=>async a=>{const l=await fetch("/api/song/admin",{method:"POST",body:JSON.stringify({song_id:t,song:e,artist:n,chords_used:i,progression_used:r,song_key:s,description:o}),headers:{"Content-Type":"application/json"},credentials:"include"});if(l.ok){const d=await l.json();return a(ND(d)),d}},kD=t=>async e=>{(await fetch(`/api/song/admin/${t}`,{method:"DELETE"})).ok&&e(FD(t))},LD=(t,e)=>async n=>{const i=await fetch(`/api/song/admin/${t}`,{method:"PATCH",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)});if(i.ok){const r=await i.json();return n(MD(r.id,r.song,r.artist,r.chords_used,r.progression_used,r.song_key,r.description)),!0}return!1};function OD(t={},e){switch(e.type){case N1:{const n={...t};return e.payload.forEach(i=>{n[i.id]=i}),n}case F1:{const n={...t};return n[e.payload.song.id]=e.payload.song,n}case M1:{const n={...t};return delete n[e.payload],n}case P1:{const n={...t};return n[e.payload.song_id]={id:e.payload.song_id,song_key:e.payload.song_key,song:e.payload.song,artist:e.payload.artist,chords_used:e.payload.chords_used,progression_used:e.payload.progression_used,description:e.payload.description},n}case BD:return{};default:return t}}const yD=Kw({session:nD,course:lD,scale:dD,review:SD,chord:vD,progression:wD,key:xD,song:OD});let k1;k1=Gw(_w);const RD=t=>Jw(yD,t,k1);function ID(){const t=Zt(),e=Rt(),n=Zn(f=>f.session.user),[i,r]=B.useState(""),[s,o]=B.useState(""),[a,l]=B.useState({});if(n)return v.jsx(rf,{to:"/",replace:!0});const d=async f=>{f.preventDefault();const u=await e(Ka({email:i,password:s}));u?l(u):t("/")};return v.jsxs("div",{className:"login-page-div",children:[a.length>0&&a.map(f=>v.jsx("p",{children:f},f)),v.jsxs("form",{className:"login-page",onSubmit:d,children:[v.jsxs("label",{children:[v.jsx("p",{className:"email-word",children:"Email"}),v.jsx("input",{type:"text",value:i,onChange:f=>r(f.target.value),required:!0})]}),a.email&&v.jsx("p",{children:a.email}),v.jsxs("label",{children:[v.jsx("p",{className:"password-word",children:"Password"}),v.jsx("input",{type:"password",value:s,onChange:f=>o(f.target.value),required:!0})]}),a.password&&v.jsx("p",{children:a.password}),v.jsx("button",{type:"submit",children:v.jsx("p",{className:"login-word",children:"Log In"})})]}),v.jsx("img",{className:"scales",src:"/images/background-scales-lighter.png",alt:"KBuddy logo"})]})}function jD(){const t=Rt(),e=Zt(),n=Zn(g=>g.session.user),[i,r]=B.useState(""),[s,o]=B.useState(""),[a,l]=B.useState(""),[d,f]=B.useState(""),[u,c]=B.useState({});if(n)return v.jsx(rf,{to:"/",replace:!0});const h=async g=>{if(g.preventDefault(),a!==d)return c({confirmPassword:"Confirm Password field must be the same as the Password field"});console.log("Signup Data:",{email:i,username:s,password:a});const E=await t(S1({email:i,username:s,password:a}));console.log("Server Response:",E),E?c(E):e("/")};return v.jsxs(v.Fragment,{children:[v.jsx("h1",{children:"Sign Up"}),u.server&&v.jsx("p",{children:u.server}),v.jsxs("form",{onSubmit:h,children:[v.jsxs("label",{children:["Email",v.jsx("input",{type:"text",value:i,onChange:g=>r(g.target.value),required:!0})]}),u.email&&v.jsx("p",{children:u.email}),v.jsxs("label",{children:["Username",v.jsx("input",{type:"text",value:s,onChange:g=>o(g.target.value),required:!0})]}),u.username&&v.jsx("p",{children:u.username}),v.jsxs("label",{children:["Password",v.jsx("input",{type:"password",value:a,onChange:g=>l(g.target.value),required:!0})]}),u.password&&v.jsx("p",{children:u.password}),v.jsxs("label",{children:["Confirm Password",v.jsx("input",{type:"password",value:d,onChange:g=>f(g.target.value),required:!0})]}),u.confirmPassword&&v.jsx("p",{children:u.confirmPassword}),v.jsx("button",{type:"submit",children:"Sign Up"})]})]})}class Wn{constructor(e=!1){this.eventMap={},this.eventsSuspended=e==!0}addListener(e,n,i={}){if(typeof e=="string"&&e.length<1||e instanceof String&&e.length<1||typeof e!="string"&&!(e instanceof String)&&e!==Wn.ANY_EVENT)throw new TypeError("The 'event' parameter must be a string or EventEmitter.ANY_EVENT.");if(typeof n!="function")throw new TypeError("The callback must be a function.");const r=new Pg(e,this,n,i);return this.eventMap[e]||(this.eventMap[e]=[]),i.prepend?this.eventMap[e].unshift(r):this.eventMap[e].push(r),r}addOneTimeListener(e,n,i={}){i.remaining=1,this.addListener(e,n,i)}static get ANY_EVENT(){return Symbol.for("Any event")}hasListener(e,n){return e===void 0?this.eventMap[Wn.ANY_EVENT]&&this.eventMap[Wn.ANY_EVENT].length>0?!0:Object.entries(this.eventMap).some(([,i])=>i.length>0):this.eventMap[e]&&this.eventMap[e].length>0?n instanceof Pg?this.eventMap[e].filter(r=>r===n).length>0:typeof n=="function"?this.eventMap[e].filter(r=>r.callback===n).length>0:n==null:!1}get eventNames(){return Object.keys(this.eventMap)}getListeners(e){return this.eventMap[e]||[]}suspendEvent(e){this.getListeners(e).forEach(n=>{n.suspended=!0})}unsuspendEvent(e){this.getListeners(e).forEach(n=>{n.suspended=!1})}getListenerCount(e){return this.getListeners(e).length}emit(e,...n){if(typeof e!="string"&&!(e instanceof String))throw new TypeError("The 'event' parameter must be a string.");if(this.eventsSuspended)return;let i=[],r=this.eventMap[Wn.ANY_EVENT]||[];return this.eventMap[e]&&(r=r.concat(this.eventMap[e])),r.forEach(s=>{if(s.suspended)return;let o=[...n];Array.isArray(s.arguments)&&(o=o.concat(s.arguments)),s.remaining>0&&(i.push(s.callback.apply(s.context,o)),s.count++),--s.remaining<1&&s.remove()}),i}removeListener(e,n,i={}){if(e===void 0){this.eventMap={};return}else if(!this.eventMap[e])return;let r=this.eventMap[e].filter(s=>n&&s.callback!==n||i.remaining&&i.remaining!==s.remaining||i.context&&i.context!==s.context);r.length?this.eventMap[e]=r:delete this.eventMap[e]}async waitFor(e,n={}){return n.duration=parseInt(n.duration),(isNaN(n.duration)||n.duration<=0)&&(n.duration=1/0),new Promise((i,r)=>{let s,o=this.addListener(e,()=>{clearTimeout(s),i()},{remaining:1});n.duration!==1/0&&(s=setTimeout(()=>{o.remove(),r("The duration expired before the event was emitted.")},n.duration))})}get eventCount(){return Object.keys(this.eventMap).length}}class Pg{constructor(e,n,i,r={}){if(typeof e!="string"&&!(e instanceof String)&&e!==Wn.ANY_EVENT)throw new TypeError("The 'event' parameter must be a string or EventEmitter.ANY_EVENT.");if(!n)throw new ReferenceError("The 'target' parameter is mandatory.");if(typeof i!="function")throw new TypeError("The 'callback' must be a function.");r.arguments!==void 0&&!Array.isArray(r.arguments)&&(r.arguments=[r.arguments]),r=Object.assign({context:n,remaining:1/0,arguments:void 0,duration:1/0},r),r.duration!==1/0&&setTimeout(()=>this.remove(),r.duration),this.arguments=r.arguments,this.callback=i,this.context=r.context,this.count=0,this.event=e,this.remaining=parseInt(r.remaining)>=1?parseInt(r.remaining):1/0,this.suspended=!1,this.target=n}remove(){this.target.removeListener(this.event,this.callback,{context:this.context,remaining:this.remaining})}}/**
 * The `Enumerations` class contains enumerations and arrays of elements used throughout the
 * library. All its properties are static and should be referenced using the class name. For
 * example: `Enumerations.CHANNEL_MESSAGES`.
 *
 * @license Apache-2.0
 * @since 3.0.0
 */class L{static get MIDI_CHANNEL_MESSAGES(){return this.validation&&console.warn("The MIDI_CHANNEL_MESSAGES enum has been deprecated. Use the Enumerations.CHANNEL_MESSAGES enum instead."),L.CHANNEL_MESSAGES}static get CHANNEL_MESSAGES(){return{noteoff:8,noteon:9,keyaftertouch:10,controlchange:11,programchange:12,channelaftertouch:13,pitchbend:14}}static get CHANNEL_NUMBERS(){return[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]}static get MIDI_CHANNEL_NUMBERS(){return this.validation&&console.warn("The MIDI_CHANNEL_NUMBERS array has been deprecated. Use the Enumerations.CHANNEL_NUMBERS array instead."),[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]}static get CHANNEL_MODE_MESSAGES(){return{allsoundoff:120,resetallcontrollers:121,localcontrol:122,allnotesoff:123,omnimodeoff:124,omnimodeon:125,monomodeon:126,polymodeon:127}}static get MIDI_CHANNEL_MODE_MESSAGES(){return this.validation&&console.warn("The MIDI_CHANNEL_MODE_MESSAGES enum has been deprecated. Use the Enumerations.CHANNEL_MODE_MESSAGES enum instead."),L.CHANNEL_MODE_MESSAGES}static get MIDI_CONTROL_CHANGE_MESSAGES(){return this.validation&&console.warn("The MIDI_CONTROL_CHANGE_MESSAGES enum has been deprecated. Use the Enumerations.CONTROL_CHANGE_MESSAGES array instead."),{bankselectcoarse:0,modulationwheelcoarse:1,breathcontrollercoarse:2,controller3:3,footcontrollercoarse:4,portamentotimecoarse:5,dataentrycoarse:6,volumecoarse:7,balancecoarse:8,controller9:9,pancoarse:10,expressioncoarse:11,effectcontrol1coarse:12,effectcontrol2coarse:13,controller14:14,controller15:15,generalpurposeslider1:16,generalpurposeslider2:17,generalpurposeslider3:18,generalpurposeslider4:19,controller20:20,controller21:21,controller22:22,controller23:23,controller24:24,controller25:25,controller26:26,controller27:27,controller28:28,controller29:29,controller30:30,controller31:31,bankselectfine:32,modulationwheelfine:33,breathcontrollerfine:34,controller35:35,footcontrollerfine:36,portamentotimefine:37,dataentryfine:38,volumefine:39,balancefine:40,controller41:41,panfine:42,expressionfine:43,effectcontrol1fine:44,effectcontrol2fine:45,controller46:46,controller47:47,controller48:48,controller49:49,controller50:50,controller51:51,controller52:52,controller53:53,controller54:54,controller55:55,controller56:56,controller57:57,controller58:58,controller59:59,controller60:60,controller61:61,controller62:62,controller63:63,holdpedal:64,portamento:65,sustenutopedal:66,softpedal:67,legatopedal:68,hold2pedal:69,soundvariation:70,resonance:71,soundreleasetime:72,soundattacktime:73,brightness:74,soundcontrol6:75,soundcontrol7:76,soundcontrol8:77,soundcontrol9:78,soundcontrol10:79,generalpurposebutton1:80,generalpurposebutton2:81,generalpurposebutton3:82,generalpurposebutton4:83,controller84:84,controller85:85,controller86:86,controller87:87,controller88:88,controller89:89,controller90:90,reverblevel:91,tremololevel:92,choruslevel:93,celestelevel:94,phaserlevel:95,databuttonincrement:96,databuttondecrement:97,nonregisteredparametercoarse:98,nonregisteredparameterfine:99,registeredparametercoarse:100,registeredparameterfine:101,controller102:102,controller103:103,controller104:104,controller105:105,controller106:106,controller107:107,controller108:108,controller109:109,controller110:110,controller111:111,controller112:112,controller113:113,controller114:114,controller115:115,controller116:116,controller117:117,controller118:118,controller119:119,allsoundoff:120,resetallcontrollers:121,localcontrol:122,allnotesoff:123,omnimodeoff:124,omnimodeon:125,monomodeon:126,polymodeon:127}}static get CONTROL_CHANGE_MESSAGES(){return[{number:0,name:"bankselectcoarse",description:"Bank Select (Coarse)",position:"msb"},{number:1,name:"modulationwheelcoarse",description:"Modulation Wheel (Coarse)",position:"msb"},{number:2,name:"breathcontrollercoarse",description:"Breath Controller (Coarse)",position:"msb"},{number:3,name:"controller3",description:"Undefined",position:"msb"},{number:4,name:"footcontrollercoarse",description:"Foot Controller (Coarse)",position:"msb"},{number:5,name:"portamentotimecoarse",description:"Portamento Time (Coarse)",position:"msb"},{number:6,name:"dataentrycoarse",description:"Data Entry (Coarse)",position:"msb"},{number:7,name:"volumecoarse",description:"Channel Volume (Coarse)",position:"msb"},{number:8,name:"balancecoarse",description:"Balance (Coarse)",position:"msb"},{number:9,name:"controller9",description:"Controller 9 (Coarse)",position:"msb"},{number:10,name:"pancoarse",description:"Pan (Coarse)",position:"msb"},{number:11,name:"expressioncoarse",description:"Expression Controller (Coarse)",position:"msb"},{number:12,name:"effectcontrol1coarse",description:"Effect Control 1 (Coarse)",position:"msb"},{number:13,name:"effectcontrol2coarse",description:"Effect Control 2 (Coarse)",position:"msb"},{number:14,name:"controller14",description:"Undefined",position:"msb"},{number:15,name:"controller15",description:"Undefined",position:"msb"},{number:16,name:"generalpurposecontroller1",description:"General Purpose Controller 1 (Coarse)",position:"msb"},{number:17,name:"generalpurposecontroller2",description:"General Purpose Controller 2 (Coarse)",position:"msb"},{number:18,name:"generalpurposecontroller3",description:"General Purpose Controller 3 (Coarse)",position:"msb"},{number:19,name:"generalpurposecontroller4",description:"General Purpose Controller 4 (Coarse)",position:"msb"},{number:20,name:"controller20",description:"Undefined",position:"msb"},{number:21,name:"controller21",description:"Undefined",position:"msb"},{number:22,name:"controller22",description:"Undefined",position:"msb"},{number:23,name:"controller23",description:"Undefined",position:"msb"},{number:24,name:"controller24",description:"Undefined",position:"msb"},{number:25,name:"controller25",description:"Undefined",position:"msb"},{number:26,name:"controller26",description:"Undefined",position:"msb"},{number:27,name:"controller27",description:"Undefined",position:"msb"},{number:28,name:"controller28",description:"Undefined",position:"msb"},{number:29,name:"controller29",description:"Undefined",position:"msb"},{number:30,name:"controller30",description:"Undefined",position:"msb"},{number:31,name:"controller31",description:"Undefined",position:"msb"},{number:32,name:"bankselectfine",description:"Bank Select (Fine)",position:"lsb"},{number:33,name:"modulationwheelfine",description:"Modulation Wheel (Fine)",position:"lsb"},{number:34,name:"breathcontrollerfine",description:"Breath Controller (Fine)",position:"lsb"},{number:35,name:"controller35",description:"Undefined",position:"lsb"},{number:36,name:"footcontrollerfine",description:"Foot Controller (Fine)",position:"lsb"},{number:37,name:"portamentotimefine",description:"Portamento Time (Fine)",position:"lsb"},{number:38,name:"dataentryfine",description:"Data Entry (Fine)",position:"lsb"},{number:39,name:"channelvolumefine",description:"Channel Volume (Fine)",position:"lsb"},{number:40,name:"balancefine",description:"Balance (Fine)",position:"lsb"},{number:41,name:"controller41",description:"Undefined",position:"lsb"},{number:42,name:"panfine",description:"Pan (Fine)",position:"lsb"},{number:43,name:"expressionfine",description:"Expression Controller (Fine)",position:"lsb"},{number:44,name:"effectcontrol1fine",description:"Effect control 1 (Fine)",position:"lsb"},{number:45,name:"effectcontrol2fine",description:"Effect control 2 (Fine)",position:"lsb"},{number:46,name:"controller46",description:"Undefined",position:"lsb"},{number:47,name:"controller47",description:"Undefined",position:"lsb"},{number:48,name:"controller48",description:"General Purpose Controller 1 (Fine)",position:"lsb"},{number:49,name:"controller49",description:"General Purpose Controller 2 (Fine)",position:"lsb"},{number:50,name:"controller50",description:"General Purpose Controller 3 (Fine)",position:"lsb"},{number:51,name:"controller51",description:"General Purpose Controller 4 (Fine)",position:"lsb"},{number:52,name:"controller52",description:"Undefined",position:"lsb"},{number:53,name:"controller53",description:"Undefined",position:"lsb"},{number:54,name:"controller54",description:"Undefined",position:"lsb"},{number:55,name:"controller55",description:"Undefined",position:"lsb"},{number:56,name:"controller56",description:"Undefined",position:"lsb"},{number:57,name:"controller57",description:"Undefined",position:"lsb"},{number:58,name:"controller58",description:"Undefined",position:"lsb"},{number:59,name:"controller59",description:"Undefined",position:"lsb"},{number:60,name:"controller60",description:"Undefined",position:"lsb"},{number:61,name:"controller61",description:"Undefined",position:"lsb"},{number:62,name:"controller62",description:"Undefined",position:"lsb"},{number:63,name:"controller63",description:"Undefined",position:"lsb"},{number:64,name:"damperpedal",description:"Damper Pedal On/Off"},{number:65,name:"portamento",description:"Portamento On/Off"},{number:66,name:"sostenuto",description:"Sostenuto On/Off"},{number:67,name:"softpedal",description:"Soft Pedal On/Off"},{number:68,name:"legatopedal",description:"Legato Pedal On/Off"},{number:69,name:"hold2",description:"Hold 2 On/Off"},{number:70,name:"soundvariation",description:"Sound Variation",position:"lsb"},{number:71,name:"resonance",description:"Resonance",position:"lsb"},{number:72,name:"releasetime",description:"Release Time",position:"lsb"},{number:73,name:"attacktime",description:"Attack Time",position:"lsb"},{number:74,name:"brightness",description:"Brightness",position:"lsb"},{number:75,name:"decaytime",description:"Decay Time",position:"lsb"},{number:76,name:"vibratorate",description:"Vibrato Rate",position:"lsb"},{number:77,name:"vibratodepth",description:"Vibrato Depth",position:"lsb"},{number:78,name:"vibratodelay",description:"Vibrato Delay",position:"lsb"},{number:79,name:"controller79",description:"Undefined",position:"lsb"},{number:80,name:"generalpurposecontroller5",description:"General Purpose Controller 5",position:"lsb"},{number:81,name:"generalpurposecontroller6",description:"General Purpose Controller 6",position:"lsb"},{number:82,name:"generalpurposecontroller7",description:"General Purpose Controller 7",position:"lsb"},{number:83,name:"generalpurposecontroller8",description:"General Purpose Controller 8",position:"lsb"},{number:84,name:"portamentocontrol",description:"Portamento Control",position:"lsb"},{number:85,name:"controller85",description:"Undefined"},{number:86,name:"controller86",description:"Undefined"},{number:87,name:"controller87",description:"Undefined"},{number:88,name:"highresolutionvelocityprefix",description:"High Resolution Velocity Prefix",position:"lsb"},{number:89,name:"controller89",description:"Undefined"},{number:90,name:"controller90",description:"Undefined"},{number:91,name:"effect1depth",description:"Effects 1 Depth (Reverb Send Level)"},{number:92,name:"effect2depth",description:"Effects 2 Depth"},{number:93,name:"effect3depth",description:"Effects 3 Depth (Chorus Send Level)"},{number:94,name:"effect4depth",description:"Effects 4 Depth"},{number:95,name:"effect5depth",description:"Effects 5 Depth"},{number:96,name:"dataincrement",description:"Data Increment"},{number:97,name:"datadecrement",description:"Data Decrement"},{number:98,name:"nonregisteredparameterfine",description:"Non-Registered Parameter Number (Fine)",position:"lsb"},{number:99,name:"nonregisteredparametercoarse",description:"Non-Registered Parameter Number (Coarse)",position:"msb"},{number:100,name:"registeredparameterfine",description:"Registered Parameter Number (Fine)",position:"lsb"},{number:101,name:"registeredparametercoarse",description:"Registered Parameter Number (Coarse)",position:"msb"},{number:102,name:"controller102",description:"Undefined"},{number:103,name:"controller103",description:"Undefined"},{number:104,name:"controller104",description:"Undefined"},{number:105,name:"controller105",description:"Undefined"},{number:106,name:"controller106",description:"Undefined"},{number:107,name:"controller107",description:"Undefined"},{number:108,name:"controller108",description:"Undefined"},{number:109,name:"controller109",description:"Undefined"},{number:110,name:"controller110",description:"Undefined"},{number:111,name:"controller111",description:"Undefined"},{number:112,name:"controller112",description:"Undefined"},{number:113,name:"controller113",description:"Undefined"},{number:114,name:"controller114",description:"Undefined"},{number:115,name:"controller115",description:"Undefined"},{number:116,name:"controller116",description:"Undefined"},{number:117,name:"controller117",description:"Undefined"},{number:118,name:"controller118",description:"Undefined"},{number:119,name:"controller119",description:"Undefined"},{number:120,name:"allsoundoff",description:"All Sound Off"},{number:121,name:"resetallcontrollers",description:"Reset All Controllers"},{number:122,name:"localcontrol",description:"Local Control On/Off"},{number:123,name:"allnotesoff",description:"All Notes Off"},{number:124,name:"omnimodeoff",description:"Omni Mode Off"},{number:125,name:"omnimodeon",description:"Omni Mode On"},{number:126,name:"monomodeon",description:"Mono Mode On"},{number:127,name:"polymodeon",description:"Poly Mode On"}]}static get REGISTERED_PARAMETERS(){return{pitchbendrange:[0,0],channelfinetuning:[0,1],channelcoarsetuning:[0,2],tuningprogram:[0,3],tuningbank:[0,4],modulationrange:[0,5],azimuthangle:[61,0],elevationangle:[61,1],gain:[61,2],distanceratio:[61,3],maximumdistance:[61,4],maximumdistancegain:[61,5],referencedistanceratio:[61,6],panspreadangle:[61,7],rollangle:[61,8]}}static get MIDI_REGISTERED_PARAMETERS(){return this.validation&&console.warn("The MIDI_REGISTERED_PARAMETERS enum has been deprecated. Use the Enumerations.REGISTERED_PARAMETERS enum instead."),L.MIDI_REGISTERED_PARAMETERS}static get SYSTEM_MESSAGES(){return{sysex:240,timecode:241,songposition:242,songselect:243,tunerequest:246,tuningrequest:246,sysexend:247,clock:248,start:250,continue:251,stop:252,activesensing:254,reset:255,midimessage:0,unknownsystemmessage:-1}}static get MIDI_SYSTEM_MESSAGES(){return this.validation&&console.warn("The MIDI_SYSTEM_MESSAGES enum has been deprecated. Use the Enumerations.SYSTEM_MESSAGES enum instead."),L.SYSTEM_MESSAGES}static get CHANNEL_EVENTS(){return["noteoff","controlchange","noteon","keyaftertouch","programchange","channelaftertouch","pitchbend","allnotesoff","allsoundoff","localcontrol","monomode","omnimode","resetallcontrollers","nrpn","nrpn-dataentrycoarse","nrpn-dataentryfine","nrpn-dataincrement","nrpn-datadecrement","rpn","rpn-dataentrycoarse","rpn-dataentryfine","rpn-dataincrement","rpn-datadecrement","nrpn-databuttonincrement","nrpn-databuttondecrement","rpn-databuttonincrement","rpn-databuttondecrement"]}}/**
 * The `Note` class represents a single musical note such as `"D3"`, `"G#4"`, `"F-1"`, `"Gb7"`, etc.
 *
 * `Note` objects can be played back on a single channel by calling
 * [`OutputChannel.playNote()`]{@link OutputChannel#playNote} or, on multiple channels of the same
 * output, by calling [`Output.playNote()`]{@link Output#playNote}.
 *
 * The note has [`attack`](#attack) and [`release`](#release) velocities set at `0.5` by default.
 * These can be changed by passing in the appropriate option. It is also possible to set a
 * system-wide default for attack and release velocities by using the
 * [`WebMidi.defaults`](WebMidi#defaults) property.
 *
 * If you prefer to work with raw MIDI values (`0` to `127`), you can use [`rawAttack`](#rawAttack) and
 * [`rawRelease`](#rawRelease) to both get and set the values.
 *
 * The note may have a [`duration`](#duration). If it does, playback will be automatically stopped
 * when the duration has elapsed by sending a `"noteoff"` event. By default, the duration is set to
 * `Infinity`. In this case, it will never stop playing unless explicitly stopped by calling a
 * method such as [`OutputChannel.stopNote()`]{@link OutputChannel#stopNote},
 * [`Output.stopNote()`]{@link Output#stopNote} or similar.
 *
 * @license Apache-2.0
 * @since 3.0.0
 */let $r=class{constructor(e,n={}){this.duration=H.defaults.note.duration,this.attack=H.defaults.note.attack,this.release=H.defaults.note.release,n.duration!=null&&(this.duration=n.duration),n.attack!=null&&(this.attack=n.attack),n.rawAttack!=null&&(this.attack=U.from7bitToFloat(n.rawAttack)),n.release!=null&&(this.release=n.release),n.rawRelease!=null&&(this.release=U.from7bitToFloat(n.rawRelease)),Number.isInteger(e)?this.identifier=U.toNoteIdentifier(e):this.identifier=e}get identifier(){return this._name+(this._accidental||"")+this._octave}set identifier(e){const n=U.getNoteDetails(e);if(H.validation&&!e)throw new Error("Invalid note identifier");this._name=n.name,this._accidental=n.accidental,this._octave=n.octave}get name(){return this._name}set name(e){if(H.validation&&(e=e.toUpperCase(),!["C","D","E","F","G","A","B"].includes(e)))throw new Error("Invalid name value");this._name=e}get accidental(){return this._accidental}set accidental(e){if(H.validation&&(e=e.toLowerCase(),!["#","##","b","bb"].includes(e)))throw new Error("Invalid accidental value");this._accidental=e}get octave(){return this._octave}set octave(e){if(H.validation&&(e=parseInt(e),isNaN(e)))throw new Error("Invalid octave value");this._octave=e}get duration(){return this._duration}set duration(e){if(H.validation&&(e=parseFloat(e),isNaN(e)||e===null||e<0))throw new RangeError("Invalid duration value.");this._duration=e}get attack(){return this._attack}set attack(e){if(H.validation&&(e=parseFloat(e),isNaN(e)||!(e>=0&&e<=1)))throw new RangeError("Invalid attack value.");this._attack=e}get release(){return this._release}set release(e){if(H.validation&&(e=parseFloat(e),isNaN(e)||!(e>=0&&e<=1)))throw new RangeError("Invalid release value.");this._release=e}get rawAttack(){return U.fromFloatTo7Bit(this._attack)}set rawAttack(e){this._attack=U.from7bitToFloat(e)}get rawRelease(){return U.fromFloatTo7Bit(this._release)}set rawRelease(e){this._release=U.from7bitToFloat(e)}get number(){return U.toNoteNumber(this.identifier)}getOffsetNumber(e=0,n=0){return H.validation&&(e=parseInt(e)||0,n=parseInt(n)||0),Math.min(Math.max(this.number+e*12+n,0),127)}};/**
 * The `Utilities` class contains general-purpose utility methods. All methods are static and
 * should be called using the class name. For example: `Utilities.getNoteDetails("C4")`.
 *
 * @license Apache-2.0
 * @since 3.0.0
 */class U{static toNoteNumber(e,n=0){if(n=n==null?0:parseInt(n),isNaN(n))throw new RangeError("Invalid 'octaveOffset' value");typeof e!="string"&&(e="");const i=this.getNoteDetails(e);if(!i)throw new TypeError("Invalid note identifier");const r={C:0,D:2,E:4,F:5,G:7,A:9,B:11};let s=(i.octave+1+n)*12;if(s+=r[i.name],i.accidental&&(i.accidental.startsWith("b")?s-=i.accidental.length:s+=i.accidental.length),s<0||s>127)throw new RangeError("Invalid octaveOffset value");return s}static getNoteDetails(e){Number.isInteger(e)&&(e=this.toNoteIdentifier(e));const n=e.match(/^([CDEFGAB])(#{0,2}|b{0,2})(-?\d+)$/i);if(!n)throw new TypeError("Invalid note identifier");const i=n[1].toUpperCase(),r=parseInt(n[3]);let s=n[2].toLowerCase();return s=s===""?void 0:s,{accidental:s,identifier:i+(s||"")+r,name:i,octave:r}}static sanitizeChannels(e){let n;if(H.validation){if(e==="all")n=["all"];else if(e==="none")return[]}return Array.isArray(e)?n=e:n=[e],n.indexOf("all")>-1&&(n=L.MIDI_CHANNEL_NUMBERS),n.map(function(i){return parseInt(i)}).filter(function(i){return i>=1&&i<=16})}static toTimestamp(e){let n=!1;const i=parseFloat(e);return isNaN(i)?!1:(typeof e=="string"&&e.substring(0,1)==="+"?i>=0&&(n=H.time+i):i>=0&&(n=i),n)}static guessNoteNumber(e,n){n=parseInt(n)||0;let i=!1;if(Number.isInteger(e)&&e>=0&&e<=127)i=parseInt(e);else if(parseInt(e)>=0&&parseInt(e)<=127)i=parseInt(e);else if(typeof e=="string"||e instanceof String)try{i=this.toNoteNumber(e.trim(),n)}catch{return!1}return i}static toNoteIdentifier(e,n){if(e=parseInt(e),isNaN(e)||e<0||e>127)throw new RangeError("Invalid note number");if(n=n==null?0:parseInt(n),isNaN(n))throw new RangeError("Invalid octaveOffset value");const i=["C","C#","D","D#","E","F","F#","G","G#","A","A#","B"],r=Math.floor(e/12-1)+n;return i[e%12]+r.toString()}static buildNote(e,n={}){if(n.octaveOffset=parseInt(n.octaveOffset)||0,e instanceof $r)return e;let i=this.guessNoteNumber(e,n.octaveOffset);if(i===!1)throw new TypeError(`The input could not be parsed as a note (${e})`);return n.octaveOffset=void 0,new $r(i,n)}static buildNoteArray(e,n={}){let i=[];return Array.isArray(e)||(e=[e]),e.forEach(r=>{i.push(this.buildNote(r,n))}),i}static from7bitToFloat(e){return e===1/0&&(e=127),e=parseInt(e)||0,Math.min(Math.max(e/127,0),1)}static fromFloatTo7Bit(e){return e===1/0&&(e=1),e=parseFloat(e)||0,Math.min(Math.max(Math.round(e*127),0),127)}static fromMsbLsbToFloat(e,n=0){H.validation&&(e=Math.min(Math.max(parseInt(e)||0,0),127),n=Math.min(Math.max(parseInt(n)||0,0),127));const i=((e<<7)+n)/16383;return Math.min(Math.max(i,0),1)}static fromFloatToMsbLsb(e){H.validation&&(e=Math.min(Math.max(parseFloat(e)||0,0),1));const n=Math.round(e*16383);return{msb:n>>7,lsb:n&127}}static offsetNumber(e,n=0,i=0){if(H.validation){if(e=parseInt(e),isNaN(e))throw new Error("Invalid note number");n=parseInt(n)||0,i=parseInt(i)||0}return Math.min(Math.max(e+n*12+i,0),127)}static getPropertyByValue(e,n){return Object.keys(e).find(i=>e[i]===n)}static getCcNameByNumber(e){if(!(H.validation&&(e=parseInt(e),!(e>=0&&e<=127))))return L.CONTROL_CHANGE_MESSAGES[e].name}static getCcNumberByName(e){let n=L.CONTROL_CHANGE_MESSAGES.find(i=>i.name===e);return n?n.number:L.MIDI_CONTROL_CHANGE_MESSAGES[e]}static getChannelModeByNumber(e){if(!(e>=120&&e<=127))return!1;for(let n in L.CHANNEL_MODE_MESSAGES)if(L.CHANNEL_MODE_MESSAGES.hasOwnProperty(n)&&e===L.CHANNEL_MODE_MESSAGES[n])return n;return!1}static get isNode(){return typeof process<"u"&&process.versions!=null&&process.versions.node!=null}static get isBrowser(){return typeof window<"u"&&typeof window.document<"u"}}/**
 * The `OutputChannel` class represents a single output MIDI channel. `OutputChannel` objects are
 * provided by an [`Output`](Output) port which, itself, is made available by a device. The
 * `OutputChannel` object is derived from the host's MIDI subsystem and should not be instantiated
 * directly.
 *
 * All 16 `OutputChannel` objects can be found inside the parent output's
 * [`channels`]{@link Output#channels} property.
 *
 * @param {Output} output The [`Output`](Output) this channel belongs to.
 * @param {number} number The MIDI channel number (`1` - `16`).
 *
 * @extends EventEmitter
 * @license Apache-2.0
 * @since 3.0.0
 */class UD extends Wn{constructor(e,n){super(),this._output=e,this._number=n,this._octaveOffset=0}destroy(){this._output=null,this._number=null,this._octaveOffset=0,this.removeListener()}send(e,n={time:0}){return this.output.send(e,n),this}sendKeyAftertouch(e,n,i={}){if(H.validation){if(i.useRawValue&&(i.rawValue=i.useRawValue),isNaN(parseFloat(n)))throw new RangeError("Invalid key aftertouch value.");if(i.rawValue){if(!(n>=0&&n<=127&&Number.isInteger(n)))throw new RangeError("Key aftertouch raw value must be an integer between 0 and 127.")}else if(!(n>=0&&n<=1))throw new RangeError("Key aftertouch value must be a float between 0 and 1.")}i.rawValue||(n=U.fromFloatTo7Bit(n));const r=H.octaveOffset+this.output.octaveOffset+this.octaveOffset;return Array.isArray(e)||(e=[e]),U.buildNoteArray(e).forEach(s=>{this.send([(L.CHANNEL_MESSAGES.keyaftertouch<<4)+(this.number-1),s.getOffsetNumber(r),n],{time:U.toTimestamp(i.time)})}),this}sendControlChange(e,n,i={}){if(typeof e=="string"&&(e=U.getCcNumberByName(e)),Array.isArray(n)||(n=[n]),H.validation){if(e===void 0)throw new TypeError("Control change must be identified with a valid name or an integer between 0 and 127.");if(!Number.isInteger(e)||!(e>=0&&e<=127))throw new TypeError("Control change number must be an integer between 0 and 127.");if(n=n.map(r=>{const s=Math.min(Math.max(parseInt(r),0),127);if(isNaN(s))throw new TypeError("Values must be integers between 0 and 127");return s}),n.length===2&&e>=32)throw new TypeError("To use a value array, the controller must be between 0 and 31")}return n.forEach((r,s)=>{this.send([(L.CHANNEL_MESSAGES.controlchange<<4)+(this.number-1),e+s*32,n[s]],{time:U.toTimestamp(i.time)})}),this}_selectNonRegisteredParameter(e,n={}){return this.sendControlChange(99,e[0],n),this.sendControlChange(98,e[1],n),this}_deselectRegisteredParameter(e={}){return this.sendControlChange(101,127,e),this.sendControlChange(100,127,e),this}_deselectNonRegisteredParameter(e={}){return this.sendControlChange(101,127,e),this.sendControlChange(100,127,e),this}_selectRegisteredParameter(e,n={}){return this.sendControlChange(101,e[0],n),this.sendControlChange(100,e[1],n),this}_setCurrentParameter(e,n={}){return e=[].concat(e),this.sendControlChange(6,e[0],n),e.length<2?this:(this.sendControlChange(38,e[1],n),this)}sendRpnDecrement(e,n={}){if(Array.isArray(e)||(e=L.REGISTERED_PARAMETERS[e]),H.validation){if(e===void 0)throw new TypeError("The specified registered parameter is invalid.");let i=!1;if(Object.getOwnPropertyNames(L.REGISTERED_PARAMETERS).forEach(r=>{L.REGISTERED_PARAMETERS[r][0]===e[0]&&L.REGISTERED_PARAMETERS[r][1]===e[1]&&(i=!0)}),!i)throw new TypeError("The specified registered parameter is invalid.")}return this._selectRegisteredParameter(e,n),this.sendControlChange(97,0,n),this._deselectRegisteredParameter(n),this}sendRpnIncrement(e,n={}){if(Array.isArray(e)||(e=L.REGISTERED_PARAMETERS[e]),H.validation){if(e===void 0)throw new TypeError("The specified registered parameter is invalid.");let i=!1;if(Object.getOwnPropertyNames(L.REGISTERED_PARAMETERS).forEach(r=>{L.REGISTERED_PARAMETERS[r][0]===e[0]&&L.REGISTERED_PARAMETERS[r][1]===e[1]&&(i=!0)}),!i)throw new TypeError("The specified registered parameter is invalid.")}return this._selectRegisteredParameter(e,n),this.sendControlChange(96,0,n),this._deselectRegisteredParameter(n),this}playNote(e,n={}){this.sendNoteOn(e,n);const i=Array.isArray(e)?e:[e];for(let r of i)if(parseInt(r.duration)>0){const s={time:(U.toTimestamp(n.time)||H.time)+parseInt(r.duration),release:r.release,rawRelease:r.rawRelease};this.sendNoteOff(r,s)}else if(parseInt(n.duration)>0){const s={time:(U.toTimestamp(n.time)||H.time)+parseInt(n.duration),release:n.release,rawRelease:n.rawRelease};this.sendNoteOff(r,s)}return this}sendNoteOff(e,n={}){if(H.validation){if(n.rawRelease!=null&&!(n.rawRelease>=0&&n.rawRelease<=127))throw new RangeError("The 'rawRelease' option must be an integer between 0 and 127");if(n.release!=null&&!(n.release>=0&&n.release<=1))throw new RangeError("The 'release' option must be an number between 0 and 1");n.rawVelocity&&(n.rawRelease=n.velocity,console.warn("The 'rawVelocity' option is deprecated. Use 'rawRelease' instead.")),n.velocity&&(n.release=n.velocity,console.warn("The 'velocity' option is deprecated. Use 'attack' instead."))}let i=64;n.rawRelease!=null?i=n.rawRelease:isNaN(n.release)||(i=Math.round(n.release*127));const r=H.octaveOffset+this.output.octaveOffset+this.octaveOffset;return U.buildNoteArray(e,{rawRelease:parseInt(i)}).forEach(s=>{this.send([(L.CHANNEL_MESSAGES.noteoff<<4)+(this.number-1),s.getOffsetNumber(r),s.rawRelease],{time:U.toTimestamp(n.time)})}),this}stopNote(e,n={}){return this.sendNoteOff(e,n)}sendNoteOn(e,n={}){if(H.validation){if(n.rawAttack!=null&&!(n.rawAttack>=0&&n.rawAttack<=127))throw new RangeError("The 'rawAttack' option must be an integer between 0 and 127");if(n.attack!=null&&!(n.attack>=0&&n.attack<=1))throw new RangeError("The 'attack' option must be an number between 0 and 1");n.rawVelocity&&(n.rawAttack=n.velocity,n.rawRelease=n.release,console.warn("The 'rawVelocity' option is deprecated. Use 'rawAttack' or 'rawRelease'.")),n.velocity&&(n.attack=n.velocity,console.warn("The 'velocity' option is deprecated. Use 'attack' instead."))}let i=64;n.rawAttack!=null?i=n.rawAttack:isNaN(n.attack)||(i=Math.round(n.attack*127));const r=H.octaveOffset+this.output.octaveOffset+this.octaveOffset;return U.buildNoteArray(e,{rawAttack:i}).forEach(s=>{this.send([(L.CHANNEL_MESSAGES.noteon<<4)+(this.number-1),s.getOffsetNumber(r),s.rawAttack],{time:U.toTimestamp(n.time)})}),this}sendChannelMode(e,n=0,i={}){if(typeof e=="string"&&(e=L.CHANNEL_MODE_MESSAGES[e]),H.validation){if(e===void 0)throw new TypeError("Invalid channel mode message name or number.");if(isNaN(e)||!(e>=120&&e<=127))throw new TypeError("Invalid channel mode message number.");if(isNaN(parseInt(n))||n<0||n>127)throw new RangeError("Value must be an integer between 0 and 127.")}return this.send([(L.CHANNEL_MESSAGES.controlchange<<4)+(this.number-1),e,n],{time:U.toTimestamp(i.time)}),this}sendOmniMode(e,n={}){return e===void 0||e?this.sendChannelMode("omnimodeon",0,n):this.sendChannelMode("omnimodeoff",0,n),this}sendChannelAftertouch(e,n={}){if(H.validation){if(isNaN(parseFloat(e)))throw new RangeError("Invalid channel aftertouch value.");if(n.rawValue){if(!(e>=0&&e<=127&&Number.isInteger(e)))throw new RangeError("Channel aftertouch raw value must be an integer between 0 and 127.")}else if(!(e>=0&&e<=1))throw new RangeError("Channel aftertouch value must be a float between 0 and 1.")}return n.rawValue||(e=U.fromFloatTo7Bit(e)),this.send([(L.CHANNEL_MESSAGES.channelaftertouch<<4)+(this.number-1),Math.round(e)],{time:U.toTimestamp(n.time)}),this}sendMasterTuning(e,n={}){if(e=parseFloat(e)||0,H.validation&&!(e>-65&&e<64))throw new RangeError("The value must be a decimal number larger than -65 and smaller than 64.");let i=Math.floor(e)+64,r=e-Math.floor(e);r=Math.round((r+1)/2*16383);let s=r>>7&127,o=r&127;return this.sendRpnValue("channelcoarsetuning",i,n),this.sendRpnValue("channelfinetuning",[s,o],n),this}sendModulationRange(e,n,i={}){if(H.validation){if(!Number.isInteger(e)||!(e>=0&&e<=127))throw new RangeError("The semitones value must be an integer between 0 and 127.");if(n!=null&&(!Number.isInteger(n)||!(n>=0&&n<=127)))throw new RangeError("If specified, the cents value must be an integer between 0 and 127.")}return n>=0&&n<=127||(n=0),this.sendRpnValue("modulationrange",[e,n],i),this}sendNrpnValue(e,n,i={}){if(n=[].concat(n),H.validation){if(!Array.isArray(e)||!Number.isInteger(e[0])||!Number.isInteger(e[1]))throw new TypeError("The specified NRPN is invalid.");if(!(e[0]>=0&&e[0]<=127))throw new RangeError("The first byte of the NRPN must be between 0 and 127.");if(!(e[1]>=0&&e[1]<=127))throw new RangeError("The second byte of the NRPN must be between 0 and 127.");n.forEach(r=>{if(!(r>=0&&r<=127))throw new RangeError("The data bytes of the NRPN must be between 0 and 127.")})}return this._selectNonRegisteredParameter(e,i),this._setCurrentParameter(n,i),this._deselectNonRegisteredParameter(i),this}sendPitchBend(e,n={}){if(H.validation)if(n.rawValue&&Array.isArray(e)){if(!(e[0]>=0&&e[0]<=127))throw new RangeError("The pitch bend MSB must be an integer between 0 and 127.");if(!(e[1]>=0&&e[1]<=127))throw new RangeError("The pitch bend LSB must be an integer between 0 and 127.")}else if(n.rawValue&&!Array.isArray(e)){if(!(e>=0&&e<=127))throw new RangeError("The pitch bend MSB must be an integer between 0 and 127.")}else{if(isNaN(e)||e===null)throw new RangeError("Invalid pitch bend value.");if(!(e>=-1&&e<=1))throw new RangeError("The pitch bend value must be a float between -1 and 1.")}let i=0,r=0;if(n.rawValue&&Array.isArray(e))i=e[0],r=e[1];else if(n.rawValue&&!Array.isArray(e))i=e;else{const s=U.fromFloatToMsbLsb((e+1)/2);i=s.msb,r=s.lsb}return this.send([(L.CHANNEL_MESSAGES.pitchbend<<4)+(this.number-1),r,i],{time:U.toTimestamp(n.time)}),this}sendPitchBendRange(e,n,i={}){if(H.validation){if(!Number.isInteger(e)||!(e>=0&&e<=127))throw new RangeError("The semitones value must be an integer between 0 and 127.");if(!Number.isInteger(n)||!(n>=0&&n<=127))throw new RangeError("The cents value must be an integer between 0 and 127.")}return this.sendRpnValue("pitchbendrange",[e,n],i),this}sendProgramChange(e,n={}){if(e=parseInt(e)||0,H.validation&&!(e>=0&&e<=127))throw new RangeError("The program number must be between 0 and 127.");return this.send([(L.CHANNEL_MESSAGES.programchange<<4)+(this.number-1),e],{time:U.toTimestamp(n.time)}),this}sendRpnValue(e,n,i={}){if(Array.isArray(e)||(e=L.REGISTERED_PARAMETERS[e]),H.validation){if(!Number.isInteger(e[0])||!Number.isInteger(e[1]))throw new TypeError("The specified NRPN is invalid.");if(!(e[0]>=0&&e[0]<=127))throw new RangeError("The first byte of the RPN must be between 0 and 127.");if(!(e[1]>=0&&e[1]<=127))throw new RangeError("The second byte of the RPN must be between 0 and 127.");[].concat(n).forEach(r=>{if(!(r>=0&&r<=127))throw new RangeError("The data bytes of the RPN must be between 0 and 127.")})}return this._selectRegisteredParameter(e,i),this._setCurrentParameter(n,i),this._deselectRegisteredParameter(i),this}sendTuningBank(e,n={}){if(H.validation&&(!Number.isInteger(e)||!(e>=0&&e<=127)))throw new RangeError("The tuning bank number must be between 0 and 127.");return this.sendRpnValue("tuningbank",e,n),this}sendTuningProgram(e,n={}){if(H.validation&&(!Number.isInteger(e)||!(e>=0&&e<=127)))throw new RangeError("The tuning program number must be between 0 and 127.");return this.sendRpnValue("tuningprogram",e,n),this}sendLocalControl(e,n={}){return e?this.sendChannelMode("localcontrol",127,n):this.sendChannelMode("localcontrol",0,n)}sendAllNotesOff(e={}){return this.sendChannelMode("allnotesoff",0,e)}sendAllSoundOff(e={}){return this.sendChannelMode("allsoundoff",0,e)}sendResetAllControllers(e={}){return this.sendChannelMode("resetallcontrollers",0,e)}sendPolyphonicMode(e,n={}){return e==="mono"?this.sendChannelMode("monomodeon",0,n):this.sendChannelMode("polymodeon",0,n)}get octaveOffset(){return this._octaveOffset}set octaveOffset(e){if(this.validation&&(e=parseInt(e),isNaN(e)))throw new TypeError("The 'octaveOffset' property must be an integer.");this._octaveOffset=e}get output(){return this._output}get number(){return this._number}}/**
 * The `Output` class represents a single MIDI output port (not to be confused with a MIDI channel).
 * A port is made available by a MIDI device. A MIDI device can advertise several input and output
 * ports. Each port has 16 MIDI channels which can be accessed via the [`channels`](#channels)
 * property.
 *
 * The `Output` object is automatically instantiated by the library according to the host's MIDI
 * subsystem and should not be directly instantiated.
 *
 * You can access all available `Output` objects by referring to the
 * [`WebMidi.outputs`](WebMidi#outputs) array or by using methods such as
 * [`WebMidi.getOutputByName()`](WebMidi#getOutputByName) or
 * [`WebMidi.getOutputById()`](WebMidi#getOutputById).
 *
 * @fires Output#opened
 * @fires Output#disconnected
 * @fires Output#closed
 *
 * @extends EventEmitter
 * @license Apache-2.0
 */class Wd extends Wn{constructor(e){super(),this._midiOutput=e,this._octaveOffset=0,this.channels=[];for(let n=1;n<=16;n++)this.channels[n]=new UD(this,n);this._midiOutput.onstatechange=this._onStateChange.bind(this)}async destroy(){this.removeListener(),this.channels.forEach(e=>e.destroy()),this.channels=[],this._midiOutput&&(this._midiOutput.onstatechange=null),await this.close(),this._midiOutput=null}_onStateChange(e){let n={timestamp:H.time};e.port.connection==="open"?(n.type="opened",n.target=this,n.port=n.target,this.emit("opened",n)):e.port.connection==="closed"&&e.port.state==="connected"?(n.type="closed",n.target=this,n.port=n.target,this.emit("closed",n)):e.port.connection==="closed"&&e.port.state==="disconnected"?(n.type="disconnected",n.port={connection:e.port.connection,id:e.port.id,manufacturer:e.port.manufacturer,name:e.port.name,state:e.port.state,type:e.port.type},this.emit("disconnected",n)):e.port.connection==="pending"&&e.port.state==="disconnected"||console.warn("This statechange event was not caught:",e.port.connection,e.port.state)}async open(){try{return await this._midiOutput.open(),Promise.resolve(this)}catch(e){return Promise.reject(e)}}async close(){this._midiOutput?await this._midiOutput.close():await Promise.resolve()}send(e,n={time:0},i=0){if(e instanceof L1&&(e=U.isNode?e.data:e.rawData),e instanceof Uint8Array&&U.isNode&&(e=Array.from(e)),H.validation){if(!Array.isArray(e)&&!(e instanceof Uint8Array)&&(e=[e],Array.isArray(n)&&(e=e.concat(n)),n=isNaN(i)?{time:0}:{time:i}),!(parseInt(e[0])>=128&&parseInt(e[0])<=255))throw new RangeError("The first byte (status) must be an integer between 128 and 255.");e.slice(1).forEach(r=>{if(r=parseInt(r),!(r>=0&&r<=255))throw new RangeError("Data bytes must be integers between 0 and 255.")}),n||(n={time:0})}return this._midiOutput.send(e,U.toTimestamp(n.time)),this}sendSysex(e,n=[],i={}){if(e=[].concat(e),n instanceof Uint8Array){const r=new Uint8Array(1+e.length+n.length+1);r[0]=L.SYSTEM_MESSAGES.sysex,r.set(Uint8Array.from(e),1),r.set(n,1+e.length),r[r.length-1]=L.SYSTEM_MESSAGES.sysexend,this.send(r,{time:i.time})}else{const r=e.concat(n,L.SYSTEM_MESSAGES.sysexend);this.send([L.SYSTEM_MESSAGES.sysex].concat(r),{time:i.time})}return this}clear(){return this._midiOutput.clear?this._midiOutput.clear():H.validation&&console.warn("The 'clear()' method has not yet been implemented in your environment."),this}sendTimecodeQuarterFrame(e,n={}){if(H.validation&&(e=parseInt(e),isNaN(e)||!(e>=0&&e<=127)))throw new RangeError("The value must be an integer between 0 and 127.");return this.send([L.SYSTEM_MESSAGES.timecode,e],{time:n.time}),this}sendSongPosition(e=0,n={}){e=Math.floor(e)||0;var i=e>>7&127,r=e&127;return this.send([L.SYSTEM_MESSAGES.songposition,i,r],{time:n.time}),this}sendSongSelect(e=0,n={}){if(H.validation&&(e=parseInt(e),isNaN(e)||!(e>=0&&e<=127)))throw new RangeError("The program value must be between 0 and 127");return this.send([L.SYSTEM_MESSAGES.songselect,e],{time:n.time}),this}sendTuneRequest(e={}){return this.send([L.SYSTEM_MESSAGES.tunerequest],{time:e.time}),this}sendClock(e={}){return this.send([L.SYSTEM_MESSAGES.clock],{time:e.time}),this}sendStart(e={}){return this.send([L.SYSTEM_MESSAGES.start],{time:e.time}),this}sendContinue(e={}){return this.send([L.SYSTEM_MESSAGES.continue],{time:e.time}),this}sendStop(e={}){return this.send([L.SYSTEM_MESSAGES.stop],{time:e.time}),this}sendActiveSensing(e={}){return this.send([L.SYSTEM_MESSAGES.activesensing],{time:e.time}),this}sendReset(e={}){return this.send([L.SYSTEM_MESSAGES.reset],{time:e.time}),this}sendTuningRequest(e={}){return H.validation&&console.warn("The sendTuningRequest() method has been deprecated. Use sendTuningRequest() instead."),this.sendTuneRequest(e)}sendKeyAftertouch(e,n,i={}){return i.channels==null&&(i.channels=L.MIDI_CHANNEL_NUMBERS),U.sanitizeChannels(i.channels).forEach(r=>{this.channels[r].sendKeyAftertouch(e,n,i)}),this}sendControlChange(e,n,i={},r={}){if(H.validation&&(Array.isArray(i)||Number.isInteger(i)||i==="all")){const s=i;i=r,i.channels=s,i.channels==="all"&&(i.channels=L.MIDI_CHANNEL_NUMBERS)}return i.channels==null&&(i.channels=L.MIDI_CHANNEL_NUMBERS),U.sanitizeChannels(i.channels).forEach(s=>{this.channels[s].sendControlChange(e,n,i)}),this}sendPitchBendRange(e=0,n=0,i={}){return i.channels==null&&(i.channels=L.MIDI_CHANNEL_NUMBERS),U.sanitizeChannels(i.channels).forEach(r=>{this.channels[r].sendPitchBendRange(e,n,i)}),this}setPitchBendRange(e=0,n=0,i="all",r={}){return H.validation&&(console.warn("The setPitchBendRange() method is deprecated. Use sendPitchBendRange() instead."),r.channels=i,r.channels==="all"&&(r.channels=L.MIDI_CHANNEL_NUMBERS)),this.sendPitchBendRange(e,n,r)}sendRpnValue(e,n,i={}){return i.channels==null&&(i.channels=L.MIDI_CHANNEL_NUMBERS),U.sanitizeChannels(i.channels).forEach(r=>{this.channels[r].sendRpnValue(e,n,i)}),this}setRegisteredParameter(e,n=[],i="all",r={}){return H.validation&&(console.warn("The setRegisteredParameter() method is deprecated. Use sendRpnValue() instead."),r.channels=i,r.channels==="all"&&(r.channels=L.MIDI_CHANNEL_NUMBERS)),this.sendRpnValue(e,n,r)}sendChannelAftertouch(e,n={},i={}){if(H.validation&&(Array.isArray(n)||Number.isInteger(n)||n==="all")){const r=n;n=i,n.channels=r,n.channels==="all"&&(n.channels=L.MIDI_CHANNEL_NUMBERS)}return n.channels==null&&(n.channels=L.MIDI_CHANNEL_NUMBERS),U.sanitizeChannels(n.channels).forEach(r=>{this.channels[r].sendChannelAftertouch(e,n)}),this}sendPitchBend(e,n={},i={}){if(H.validation&&(Array.isArray(n)||Number.isInteger(n)||n==="all")){const r=n;n=i,n.channels=r,n.channels==="all"&&(n.channels=L.MIDI_CHANNEL_NUMBERS)}return n.channels==null&&(n.channels=L.MIDI_CHANNEL_NUMBERS),U.sanitizeChannels(n.channels).forEach(r=>{this.channels[r].sendPitchBend(e,n)}),this}sendProgramChange(e=0,n={},i={}){if(H.validation&&(Array.isArray(n)||Number.isInteger(n)||n==="all")){const r=n;n=i,n.channels=r,n.channels==="all"&&(n.channels=L.MIDI_CHANNEL_NUMBERS)}return n.channels==null&&(n.channels=L.MIDI_CHANNEL_NUMBERS),U.sanitizeChannels(n.channels).forEach(r=>{this.channels[r].sendProgramChange(e,n)}),this}sendModulationRange(e,n,i={}){return i.channels==null&&(i.channels=L.MIDI_CHANNEL_NUMBERS),U.sanitizeChannels(i.channels).forEach(r=>{this.channels[r].sendModulationRange(e,n,i)}),this}setModulationRange(e=0,n=0,i="all",r={}){return H.validation&&(console.warn("The setModulationRange() method is deprecated. Use sendModulationRange() instead."),r.channels=i,r.channels==="all"&&(r.channels=L.MIDI_CHANNEL_NUMBERS)),this.sendModulationRange(e,n,r)}sendMasterTuning(e,n={}){return n.channels==null&&(n.channels=L.MIDI_CHANNEL_NUMBERS),U.sanitizeChannels(n.channels).forEach(i=>{this.channels[i].sendMasterTuning(e,n)}),this}setMasterTuning(e,n={},i={}){return H.validation&&(console.warn("The setMasterTuning() method is deprecated. Use sendMasterTuning() instead."),i.channels=n,i.channels==="all"&&(i.channels=L.MIDI_CHANNEL_NUMBERS)),this.sendMasterTuning(e,i)}sendTuningProgram(e,n={}){return n.channels==null&&(n.channels=L.MIDI_CHANNEL_NUMBERS),U.sanitizeChannels(n.channels).forEach(i=>{this.channels[i].sendTuningProgram(e,n)}),this}setTuningProgram(e,n="all",i={}){return H.validation&&(console.warn("The setTuningProgram() method is deprecated. Use sendTuningProgram() instead."),i.channels=n,i.channels==="all"&&(i.channels=L.MIDI_CHANNEL_NUMBERS)),this.sendTuningProgram(e,i)}sendTuningBank(e=0,n={}){return n.channels==null&&(n.channels=L.MIDI_CHANNEL_NUMBERS),U.sanitizeChannels(n.channels).forEach(i=>{this.channels[i].sendTuningBank(e,n)}),this}setTuningBank(e,n="all",i={}){return H.validation&&(console.warn("The setTuningBank() method is deprecated. Use sendTuningBank() instead."),i.channels=n,i.channels==="all"&&(i.channels=L.MIDI_CHANNEL_NUMBERS)),this.sendTuningBank(e,i)}sendChannelMode(e,n=0,i={},r={}){if(H.validation&&(Array.isArray(i)||Number.isInteger(i)||i==="all")){const s=i;i=r,i.channels=s,i.channels==="all"&&(i.channels=L.MIDI_CHANNEL_NUMBERS)}return i.channels==null&&(i.channels=L.MIDI_CHANNEL_NUMBERS),U.sanitizeChannels(i.channels).forEach(s=>{this.channels[s].sendChannelMode(e,n,i)}),this}sendAllSoundOff(e={}){return e.channels==null&&(e.channels=L.MIDI_CHANNEL_NUMBERS),U.sanitizeChannels(e.channels).forEach(n=>{this.channels[n].sendAllSoundOff(e)}),this}sendAllNotesOff(e={}){return e.channels==null&&(e.channels=L.MIDI_CHANNEL_NUMBERS),U.sanitizeChannels(e.channels).forEach(n=>{this.channels[n].sendAllNotesOff(e)}),this}sendResetAllControllers(e={},n={}){if(H.validation&&(Array.isArray(e)||Number.isInteger(e)||e==="all")){const i=e;e=n,e.channels=i,e.channels==="all"&&(e.channels=L.MIDI_CHANNEL_NUMBERS)}return e.channels==null&&(e.channels=L.MIDI_CHANNEL_NUMBERS),U.sanitizeChannels(e.channels).forEach(i=>{this.channels[i].sendResetAllControllers(e)}),this}sendPolyphonicMode(e,n={},i={}){if(H.validation&&(Array.isArray(n)||Number.isInteger(n)||n==="all")){const r=n;n=i,n.channels=r,n.channels==="all"&&(n.channels=L.MIDI_CHANNEL_NUMBERS)}return n.channels==null&&(n.channels=L.MIDI_CHANNEL_NUMBERS),U.sanitizeChannels(n.channels).forEach(r=>{this.channels[r].sendPolyphonicMode(e,n)}),this}sendLocalControl(e,n={},i={}){if(H.validation&&(Array.isArray(n)||Number.isInteger(n)||n==="all")){const r=n;n=i,n.channels=r,n.channels==="all"&&(n.channels=L.MIDI_CHANNEL_NUMBERS)}return n.channels==null&&(n.channels=L.MIDI_CHANNEL_NUMBERS),U.sanitizeChannels(n.channels).forEach(r=>{this.channels[r].sendLocalControl(e,n)}),this}sendOmniMode(e,n={},i={}){if(H.validation&&(Array.isArray(n)||Number.isInteger(n)||n==="all")){const r=n;n=i,n.channels=r,n.channels==="all"&&(n.channels=L.MIDI_CHANNEL_NUMBERS)}return n.channels==null&&(n.channels=L.MIDI_CHANNEL_NUMBERS),U.sanitizeChannels(n.channels).forEach(r=>{this.channels[r].sendOmniMode(e,n)}),this}sendNrpnValue(e,n,i={}){return i.channels==null&&(i.channels=L.MIDI_CHANNEL_NUMBERS),U.sanitizeChannels(i.channels).forEach(r=>{this.channels[r].sendNrpnValue(e,n,i)}),this}setNonRegisteredParameter(e,n=[],i="all",r={}){return H.validation&&(console.warn("The setNonRegisteredParameter() method is deprecated. Use sendNrpnValue() instead."),r.channels=i,r.channels==="all"&&(r.channels=L.MIDI_CHANNEL_NUMBERS)),this.sendNrpnValue(e,n,r)}sendRpnIncrement(e,n={}){return n.channels==null&&(n.channels=L.MIDI_CHANNEL_NUMBERS),U.sanitizeChannels(n.channels).forEach(i=>{this.channels[i].sendRpnIncrement(e,n)}),this}incrementRegisteredParameter(e,n="all",i={}){return H.validation&&(console.warn("The incrementRegisteredParameter() method is deprecated. Use sendRpnIncrement() instead."),i.channels=n,i.channels==="all"&&(i.channels=L.MIDI_CHANNEL_NUMBERS)),this.sendRpnIncrement(e,i)}sendRpnDecrement(e,n={}){return n.channels==null&&(n.channels=L.MIDI_CHANNEL_NUMBERS),U.sanitizeChannels(n.channels).forEach(i=>{this.channels[i].sendRpnDecrement(e,n)}),this}decrementRegisteredParameter(e,n="all",i={}){return H.validation&&(console.warn("The decrementRegisteredParameter() method is deprecated. Use sendRpnDecrement() instead."),i.channels=n,i.channels==="all"&&(i.channels=L.MIDI_CHANNEL_NUMBERS)),this.sendRpnDecrement(e,i)}sendNoteOff(e,n={},i={}){if(H.validation&&(Array.isArray(n)||Number.isInteger(n)||n==="all")){const r=n;n=i,n.channels=r,n.channels==="all"&&(n.channels=L.MIDI_CHANNEL_NUMBERS)}return n.channels==null&&(n.channels=L.MIDI_CHANNEL_NUMBERS),U.sanitizeChannels(n.channels).forEach(r=>{this.channels[r].sendNoteOff(e,n)}),this}stopNote(e,n){return this.sendNoteOff(e,n)}playNote(e,n={},i={}){if(H.validation&&(n.rawVelocity&&console.warn("The 'rawVelocity' option is deprecated. Use 'rawAttack' instead."),n.velocity&&console.warn("The 'velocity' option is deprecated. Use 'velocity' instead."),Array.isArray(n)||Number.isInteger(n)||n==="all")){const r=n;n=i,n.channels=r,n.channels==="all"&&(n.channels=L.MIDI_CHANNEL_NUMBERS)}return n.channels==null&&(n.channels=L.MIDI_CHANNEL_NUMBERS),U.sanitizeChannels(n.channels).forEach(r=>{this.channels[r].playNote(e,n)}),this}sendNoteOn(e,n={},i={}){if(H.validation&&(Array.isArray(n)||Number.isInteger(n)||n==="all")){const r=n;n=i,n.channels=r,n.channels==="all"&&(n.channels=L.MIDI_CHANNEL_NUMBERS)}return n.channels==null&&(n.channels=L.MIDI_CHANNEL_NUMBERS),U.sanitizeChannels(n.channels).forEach(r=>{this.channels[r].sendNoteOn(e,n)}),this}get name(){return this._midiOutput.name}get id(){return this._midiOutput.id}get connection(){return this._midiOutput.connection}get manufacturer(){return this._midiOutput.manufacturer}get state(){return this._midiOutput.state}get type(){return this._midiOutput.type}get octaveOffset(){return this._octaveOffset}set octaveOffset(e){if(this.validation&&(e=parseInt(e),isNaN(e)))throw new TypeError("The 'octaveOffset' property must be an integer.");this._octaveOffset=e}}/**
 * The `Forwarder` class allows the forwarding of MIDI messages to predetermined outputs. When you
 * call its [`forward()`](#forward) method, it will send the specified [`Message`](Message) object
 * to all the outputs listed in its [`destinations`](#destinations) property.
 *
 * If specific channels or message types have been defined in the [`channels`](#channels) or
 * [`types`](#types) properties, only messages matching the channels/types will be forwarded.
 *
 * While it can be manually instantiated, you are more likely to come across a `Forwarder` object as
 * the return value of the [`Input.addForwarder()`](Input#addForwarder) method.
 *
 * @license Apache-2.0
 * @since 3.0.0
 */class kg{constructor(e=[],n={}){this.destinations=[],this.types=[...Object.keys(L.SYSTEM_MESSAGES),...Object.keys(L.CHANNEL_MESSAGES)],this.channels=L.MIDI_CHANNEL_NUMBERS,this.suspended=!1,Array.isArray(e)||(e=[e]),n.types&&!Array.isArray(n.types)&&(n.types=[n.types]),n.channels&&!Array.isArray(n.channels)&&(n.channels=[n.channels]),H.validation&&(e.forEach(i=>{if(!(i instanceof Wd))throw new TypeError("Destinations must be of type 'Output'.")}),n.types!==void 0&&n.types.forEach(i=>{if(!L.SYSTEM_MESSAGES.hasOwnProperty(i)&&!L.CHANNEL_MESSAGES.hasOwnProperty(i))throw new TypeError("Type must be a valid message type.")}),n.channels!==void 0&&n.channels.forEach(i=>{if(!L.MIDI_CHANNEL_NUMBERS.includes(i))throw new TypeError("MIDI channel must be between 1 and 16.")})),this.destinations=e,n.types&&(this.types=n.types),n.channels&&(this.channels=n.channels)}forward(e){this.suspended||this.types.includes(e.type)&&(e.channel&&!this.channels.includes(e.channel)||this.destinations.forEach(n=>{H.validation&&!(n instanceof Wd)||n.send(e)}))}}/**
 * The `InputChannel` class represents a single MIDI input channel (1-16) from a single input
 * device. This object is derived from the host's MIDI subsystem and should not be instantiated
 * directly.
 *
 * All 16 `InputChannel` objects can be found inside the input's [`channels`](Input#channels)
 * property.
 *
 * @fires InputChannel#midimessage
 * @fires InputChannel#unknownmessage
 *
 * @fires InputChannel#noteoff
 * @fires InputChannel#noteon
 * @fires InputChannel#keyaftertouch
 * @fires InputChannel#programchange
 * @fires InputChannel#channelaftertouch
 * @fires InputChannel#pitchbend
 *
 * @fires InputChannel#allnotesoff
 * @fires InputChannel#allsoundoff
 * @fires InputChannel#localcontrol
 * @fires InputChannel#monomode
 * @fires InputChannel#omnimode
 * @fires InputChannel#resetallcontrollers
 *
 * @fires InputChannel#event:nrpn
 * @fires InputChannel#event:nrpn-dataentrycoarse
 * @fires InputChannel#event:nrpn-dataentryfine
 * @fires InputChannel#event:nrpn-dataincrement
 * @fires InputChannel#event:nrpn-datadecrement
 * @fires InputChannel#event:rpn
 * @fires InputChannel#event:rpn-dataentrycoarse
 * @fires InputChannel#event:rpn-dataentryfine
 * @fires InputChannel#event:rpn-dataincrement
 * @fires InputChannel#event:rpn-datadecrement
 *
 * @fires InputChannel#controlchange
 * @fires InputChannel#event:controlchange-controllerxxx
 * @fires InputChannel#event:controlchange-bankselectcoarse
 * @fires InputChannel#event:controlchange-modulationwheelcoarse
 * @fires InputChannel#event:controlchange-breathcontrollercoarse
 * @fires InputChannel#event:controlchange-footcontrollercoarse
 * @fires InputChannel#event:controlchange-portamentotimecoarse
 * @fires InputChannel#event:controlchange-dataentrycoarse
 * @fires InputChannel#event:controlchange-volumecoarse
 * @fires InputChannel#event:controlchange-balancecoarse
 * @fires InputChannel#event:controlchange-pancoarse
 * @fires InputChannel#event:controlchange-expressioncoarse
 * @fires InputChannel#event:controlchange-effectcontrol1coarse
 * @fires InputChannel#event:controlchange-effectcontrol2coarse
 * @fires InputChannel#event:controlchange-generalpurposecontroller1
 * @fires InputChannel#event:controlchange-generalpurposecontroller2
 * @fires InputChannel#event:controlchange-generalpurposecontroller3
 * @fires InputChannel#event:controlchange-generalpurposecontroller4
 * @fires InputChannel#event:controlchange-bankselectfine
 * @fires InputChannel#event:controlchange-modulationwheelfine
 * @fires InputChannel#event:controlchange-breathcontrollerfine
 * @fires InputChannel#event:controlchange-footcontrollerfine
 * @fires InputChannel#event:controlchange-portamentotimefine
 * @fires InputChannel#event:controlchange-dataentryfine
 * @fires InputChannel#event:controlchange-channelvolumefine
 * @fires InputChannel#event:controlchange-balancefine
 * @fires InputChannel#event:controlchange-panfine
 * @fires InputChannel#event:controlchange-expressionfine
 * @fires InputChannel#event:controlchange-effectcontrol1fine
 * @fires InputChannel#event:controlchange-effectcontrol2fine
 * @fires InputChannel#event:controlchange-damperpedal
 * @fires InputChannel#event:controlchange-portamento
 * @fires InputChannel#event:controlchange-sostenuto
 * @fires InputChannel#event:controlchange-softpedal
 * @fires InputChannel#event:controlchange-legatopedal
 * @fires InputChannel#event:controlchange-hold2
 * @fires InputChannel#event:controlchange-soundvariation
 * @fires InputChannel#event:controlchange-resonance
 * @fires InputChannel#event:controlchange-releasetime
 * @fires InputChannel#event:controlchange-attacktime
 * @fires InputChannel#event:controlchange-brightness
 * @fires InputChannel#event:controlchange-decaytime
 * @fires InputChannel#event:controlchange-vibratorate
 * @fires InputChannel#event:controlchange-vibratodepth
 * @fires InputChannel#event:controlchange-vibratodelay
 * @fires InputChannel#event:controlchange-generalpurposecontroller5
 * @fires InputChannel#event:controlchange-generalpurposecontroller6
 * @fires InputChannel#event:controlchange-generalpurposecontroller7
 * @fires InputChannel#event:controlchange-generalpurposecontroller8
 * @fires InputChannel#event:controlchange-portamentocontrol
 * @fires InputChannel#event:controlchange-highresolutionvelocityprefix
 * @fires InputChannel#event:controlchange-effect1depth
 * @fires InputChannel#event:controlchange-effect2depth
 * @fires InputChannel#event:controlchange-effect3depth
 * @fires InputChannel#event:controlchange-effect4depth
 * @fires InputChannel#event:controlchange-effect5depth
 * @fires InputChannel#event:controlchange-dataincrement
 * @fires InputChannel#event:controlchange-datadecrement
 * @fires InputChannel#event:controlchange-nonregisteredparameterfine
 * @fires InputChannel#event:controlchange-nonregisteredparametercoarse
 * @fires InputChannel#event:controlchange-registeredparameterfine
 * @fires InputChannel#event:controlchange-registeredparametercoarse
 * @fires InputChannel#event:controlchange-allsoundoff
 * @fires InputChannel#event:controlchange-resetallcontrollers
 * @fires InputChannel#event:controlchange-localcontrol
 * @fires InputChannel#event:controlchange-allnotesoff
 * @fires InputChannel#event:controlchange-omnimodeoff
 * @fires InputChannel#event:controlchange-omnimodeon
 * @fires InputChannel#event:controlchange-monomodeon
 * @fires InputChannel#event:controlchange-polymodeon
 * @fires InputChannel#event:
 *
 * @extends EventEmitter
 * @license Apache-2.0
 * @since 3.0.0
 */class HD extends Wn{constructor(e,n){super(),this._input=e,this._number=n,this._octaveOffset=0,this._nrpnBuffer=[],this._rpnBuffer=[],this.parameterNumberEventsEnabled=!0,this.notesState=new Array(128).fill(!1)}destroy(){this._input=null,this._number=null,this._octaveOffset=0,this._nrpnBuffer=[],this.notesState=new Array(128).fill(!1),this.parameterNumberEventsEnabled=!1,this.removeListener()}_processMidiMessageEvent(e){const n=Object.assign({},e);n.port=this.input,n.target=this,n.type="midimessage",this.emit(n.type,n),this._parseEventForStandardMessages(n)}_parseEventForStandardMessages(e){const n=Object.assign({},e);n.type=n.message.type||"unknownmessage";const i=e.message.dataBytes[0],r=e.message.dataBytes[1];if(n.type==="noteoff"||n.type==="noteon"&&r===0)this.notesState[i]=!1,n.type="noteoff",n.note=new $r(U.offsetNumber(i,this.octaveOffset+this.input.octaveOffset+H.octaveOffset),{rawAttack:0,rawRelease:r}),n.value=U.from7bitToFloat(r),n.rawValue=r,n.velocity=n.note.release,n.rawVelocity=n.note.rawRelease;else if(n.type==="noteon")this.notesState[i]=!0,n.note=new $r(U.offsetNumber(i,this.octaveOffset+this.input.octaveOffset+H.octaveOffset),{rawAttack:r}),n.value=U.from7bitToFloat(r),n.rawValue=r,n.velocity=n.note.attack,n.rawVelocity=n.note.rawAttack;else if(n.type==="keyaftertouch")n.note=new $r(U.offsetNumber(i,this.octaveOffset+this.input.octaveOffset+H.octaveOffset)),n.value=U.from7bitToFloat(r),n.rawValue=r,n.identifier=n.note.identifier,n.key=n.note.number,n.rawKey=i;else if(n.type==="controlchange"){n.controller={number:i,name:L.CONTROL_CHANGE_MESSAGES[i].name,description:L.CONTROL_CHANGE_MESSAGES[i].description,position:L.CONTROL_CHANGE_MESSAGES[i].position},n.subtype=n.controller.name||"controller"+i,n.value=U.from7bitToFloat(r),n.rawValue=r;const s=Object.assign({},n);s.type=`${n.type}-controller${i}`,delete s.subtype,this.emit(s.type,s);const o=Object.assign({},n);o.type=`${n.type}-`+L.CONTROL_CHANGE_MESSAGES[i].name,delete o.subtype,o.type.indexOf("controller")!==0&&this.emit(o.type,o),n.message.dataBytes[0]>=120&&this._parseChannelModeMessage(n),this.parameterNumberEventsEnabled&&this._isRpnOrNrpnController(n.message.dataBytes[0])&&this._parseEventForParameterNumber(n)}else n.type==="programchange"?(n.value=i,n.rawValue=n.value):n.type==="channelaftertouch"?(n.value=U.from7bitToFloat(i),n.rawValue=i):n.type==="pitchbend"?(n.value=((r<<7)+i-8192)/8192,n.rawValue=(r<<7)+i):n.type="unknownmessage";this.emit(n.type,n)}_parseChannelModeMessage(e){const n=Object.assign({},e);n.type=n.controller.name,n.type==="localcontrol"&&(n.value=n.message.data[2]===127,n.rawValue=n.message.data[2]),n.type==="omnimodeon"?(n.type="omnimode",n.value=!0,n.rawValue=n.message.data[2]):n.type==="omnimodeoff"&&(n.type="omnimode",n.value=!1,n.rawValue=n.message.data[2]),n.type==="monomodeon"?(n.type="monomode",n.value=!0,n.rawValue=n.message.data[2]):n.type==="polymodeon"&&(n.type="monomode",n.value=!1,n.rawValue=n.message.data[2]),this.emit(n.type,n)}_parseEventForParameterNumber(e){const n=e.message.dataBytes[0],i=e.message.dataBytes[1];n===99||n===101?(this._nrpnBuffer=[],this._rpnBuffer=[],n===99?this._nrpnBuffer=[e.message]:i!==127&&(this._rpnBuffer=[e.message])):n===98||n===100?n===98?(this._rpnBuffer=[],this._nrpnBuffer.length===1?this._nrpnBuffer.push(e.message):this._nrpnBuffer=[]):(this._nrpnBuffer=[],this._rpnBuffer.length===1&&i!==127?this._rpnBuffer.push(e.message):this._rpnBuffer=[]):(n===6||n===38||n===96||n===97)&&(this._rpnBuffer.length===2?this._dispatchParameterNumberEvent("rpn",this._rpnBuffer[0].dataBytes[1],this._rpnBuffer[1].dataBytes[1],e):this._nrpnBuffer.length===2?this._dispatchParameterNumberEvent("nrpn",this._nrpnBuffer[0].dataBytes[1],this._nrpnBuffer[1].dataBytes[1],e):(this._nrpnBuffer=[],this._rpnBuffer=[]))}_isRpnOrNrpnController(e){return e===6||e===38||e===96||e===97||e===98||e===99||e===100||e===101}_dispatchParameterNumberEvent(e,n,i,r){e=e==="nrpn"?"nrpn":"rpn";const s={target:r.target,timestamp:r.timestamp,message:r.message,parameterMsb:n,parameterLsb:i,value:U.from7bitToFloat(r.message.dataBytes[1]),rawValue:r.message.dataBytes[1]};e==="rpn"?s.parameter=Object.keys(L.REGISTERED_PARAMETERS).find(l=>L.REGISTERED_PARAMETERS[l][0]===n&&L.REGISTERED_PARAMETERS[l][1]===i):s.parameter=(n<<7)+i;const o=L.CONTROL_CHANGE_MESSAGES[r.message.dataBytes[0]].name;s.type=`${e}-${o}`,this.emit(s.type,s);const a=Object.assign({},s);a.type==="nrpn-dataincrement"?a.type="nrpn-databuttonincrement":a.type==="nrpn-datadecrement"?a.type="nrpn-databuttondecrement":a.type==="rpn-dataincrement"?a.type="rpn-databuttonincrement":a.type==="rpn-datadecrement"&&(a.type="rpn-databuttondecrement"),this.emit(a.type,a),s.type=e,s.subtype=o,this.emit(s.type,s)}getChannelModeByNumber(e){return H.validation&&(console.warn("The 'getChannelModeByNumber()' method has been moved to the 'Utilities' class."),e=Math.floor(e)),U.getChannelModeByNumber(e)}getCcNameByNumber(e){if(H.validation&&(console.warn("The 'getCcNameByNumber()' method has been moved to the 'Utilities' class."),e=parseInt(e),!(e>=0&&e<=127)))throw new RangeError("Invalid control change number.");return U.getCcNameByNumber(e)}getNoteState(e){e instanceof $r&&(e=e.identifier);const n=U.guessNoteNumber(e,H.octaveOffset+this.input.octaveOffset+this.octaveOffset);return this.notesState[n]}get octaveOffset(){return this._octaveOffset}set octaveOffset(e){if(this.validation&&(e=parseInt(e),isNaN(e)))throw new TypeError("The 'octaveOffset' property must be an integer.");this._octaveOffset=e}get input(){return this._input}get number(){return this._number}get nrpnEventsEnabled(){return this.parameterNumberEventsEnabled}set nrpnEventsEnabled(e){this.validation&&(e=!!e),this.parameterNumberEventsEnabled=e}}/**
 * The `Message` class represents a single MIDI message. It has several properties that make it
 * easy to make sense of the binary data it contains.
 *
 * @license Apache-2.0
 * @since 3.0.0
 */class L1{constructor(e){this.rawData=e,this.data=Array.from(this.rawData),this.statusByte=this.rawData[0],this.rawDataBytes=this.rawData.slice(1),this.dataBytes=this.data.slice(1),this.isChannelMessage=!1,this.isSystemMessage=!1,this.command=void 0,this.channel=void 0,this.manufacturerId=void 0,this.type=void 0,this.statusByte<240?(this.isChannelMessage=!0,this.command=this.statusByte>>4,this.channel=(this.statusByte&15)+1):(this.isSystemMessage=!0,this.command=this.statusByte),this.isChannelMessage?this.type=U.getPropertyByValue(L.CHANNEL_MESSAGES,this.command):this.isSystemMessage&&(this.type=U.getPropertyByValue(L.SYSTEM_MESSAGES,this.command)),this.statusByte===L.SYSTEM_MESSAGES.sysex&&(this.dataBytes[0]===0?(this.manufacturerId=this.dataBytes.slice(0,3),this.dataBytes=this.dataBytes.slice(3,this.rawDataBytes.length-1),this.rawDataBytes=this.rawDataBytes.slice(3,this.rawDataBytes.length-1)):(this.manufacturerId=[this.dataBytes[0]],this.dataBytes=this.dataBytes.slice(1,this.dataBytes.length-1),this.rawDataBytes=this.rawDataBytes.slice(1,this.rawDataBytes.length-1)))}}/**
 * The `Input` class represents a single MIDI input port. This object is automatically instantiated
 * by the library according to the host's MIDI subsystem and does not need to be directly
 * instantiated. Instead, you can access all `Input` objects by referring to the
 * [`WebMidi.inputs`](WebMidi#inputs) array. You can also retrieve inputs by using methods such as
 * [`WebMidi.getInputByName()`](WebMidi#getInputByName) and
 * [`WebMidi.getInputById()`](WebMidi#getInputById).
 *
 * Note that a single MIDI device may expose several inputs and/or outputs.
 *
 * **Important**: the `Input` class does not directly fire channel-specific MIDI messages
 * (such as [`noteon`](InputChannel#event:noteon) or
 * [`controlchange`](InputChannel#event:controlchange), etc.). The [`InputChannel`](InputChannel)
 * object does that. However, you can still use the
 * [`Input.addListener()`](#addListener) method to listen to channel-specific events on multiple
 * [`InputChannel`](InputChannel) objects at once.
 *
 * @fires Input#opened
 * @fires Input#disconnected
 * @fires Input#closed
 * @fires Input#midimessage
 *
 * @fires Input#sysex
 * @fires Input#timecode
 * @fires Input#songposition
 * @fires Input#songselect
 * @fires Input#tunerequest
 * @fires Input#clock
 * @fires Input#start
 * @fires Input#continue
 * @fires Input#stop
 * @fires Input#activesensing
 * @fires Input#reset
 *
 * @fires Input#unknownmidimessage
 *
 * @extends EventEmitter
 * @license Apache-2.0
 */class WD extends Wn{constructor(e){super(),this._midiInput=e,this._octaveOffset=0,this.channels=[];for(let n=1;n<=16;n++)this.channels[n]=new HD(this,n);this._forwarders=[],this._midiInput.onstatechange=this._onStateChange.bind(this),this._midiInput.onmidimessage=this._onMidiMessage.bind(this)}async destroy(){this.removeListener(),this.channels.forEach(e=>e.destroy()),this.channels=[],this._forwarders=[],this._midiInput&&(this._midiInput.onstatechange=null,this._midiInput.onmidimessage=null),await this.close(),this._midiInput=null}_onStateChange(e){let n={timestamp:H.time,target:this,port:this};e.port.connection==="open"?(n.type="opened",this.emit("opened",n)):e.port.connection==="closed"&&e.port.state==="connected"?(n.type="closed",this.emit("closed",n)):e.port.connection==="closed"&&e.port.state==="disconnected"?(n.type="disconnected",n.port={connection:e.port.connection,id:e.port.id,manufacturer:e.port.manufacturer,name:e.port.name,state:e.port.state,type:e.port.type},this.emit("disconnected",n)):e.port.connection==="pending"&&e.port.state==="disconnected"||console.warn("This statechange event was not caught: ",e.port.connection,e.port.state)}_onMidiMessage(e){const n=new L1(e.data),i={port:this,target:this,message:n,timestamp:e.timeStamp,type:"midimessage",data:n.data,rawData:n.data,statusByte:n.data[0],dataBytes:n.dataBytes};this.emit("midimessage",i),n.isSystemMessage?this._parseEvent(i):n.isChannelMessage&&this.channels[n.channel]._processMidiMessageEvent(i),this._forwarders.forEach(r=>r.forward(n))}_parseEvent(e){const n=Object.assign({},e);n.type=n.message.type||"unknownmidimessage",n.type==="songselect"&&(n.song=e.data[1]+1,n.value=e.data[1],n.rawValue=n.value),this.emit(n.type,n)}async open(){try{await this._midiInput.open()}catch(e){return Promise.reject(e)}return Promise.resolve(this)}async close(){if(!this._midiInput)return Promise.resolve(this);try{await this._midiInput.close()}catch(e){return Promise.reject(e)}return Promise.resolve(this)}getChannelModeByNumber(){H.validation&&console.warn("The 'getChannelModeByNumber()' method has been moved to the 'Utilities' class.")}addListener(e,n,i={}){if(H.validation&&typeof i=="function"){let r=n!=null?[].concat(n):void 0;n=i,i={channels:r}}if(L.CHANNEL_EVENTS.includes(e)){i.channels===void 0&&(i.channels=L.MIDI_CHANNEL_NUMBERS);let r=[];return U.sanitizeChannels(i.channels).forEach(s=>{r.push(this.channels[s].addListener(e,n,i))}),r}else return super.addListener(e,n,i)}addOneTimeListener(e,n,i={}){return i.remaining=1,this.addListener(e,n,i)}on(e,n,i,r){return this.addListener(e,n,i,r)}hasListener(e,n,i={}){if(H.validation&&typeof i=="function"){let r=[].concat(n);n=i,i={channels:r}}return L.CHANNEL_EVENTS.includes(e)?(i.channels===void 0&&(i.channels=L.MIDI_CHANNEL_NUMBERS),U.sanitizeChannels(i.channels).every(r=>this.channels[r].hasListener(e,n))):super.hasListener(e,n)}removeListener(e,n,i={}){if(H.validation&&typeof i=="function"){let r=[].concat(n);n=i,i={channels:r}}if(i.channels===void 0&&(i.channels=L.MIDI_CHANNEL_NUMBERS),e==null)return U.sanitizeChannels(i.channels).forEach(r=>{this.channels[r]&&this.channels[r].removeListener()}),super.removeListener();L.CHANNEL_EVENTS.includes(e)?U.sanitizeChannels(i.channels).forEach(r=>{this.channels[r].removeListener(e,n,i)}):super.removeListener(e,n,i)}addForwarder(e,n={}){let i;return e instanceof kg?i=e:i=new kg(e,n),this._forwarders.push(i),i}removeForwarder(e){this._forwarders=this._forwarders.filter(n=>n!==e)}hasForwarder(e){return this._forwarders.includes(e)}get name(){return this._midiInput.name}get id(){return this._midiInput.id}get connection(){return this._midiInput.connection}get manufacturer(){return this._midiInput.manufacturer}get octaveOffset(){return this._octaveOffset}set octaveOffset(e){if(this.validation&&(e=parseInt(e),isNaN(e)))throw new TypeError("The 'octaveOffset' property must be an integer.");this._octaveOffset=e}get state(){return this._midiInput.state}get type(){return this._midiInput.type}get nrpnEventsEnabled(){return H.validation&&console.warn("The 'nrpnEventsEnabled' property has been moved to the 'InputChannel' class."),!1}}/**
 * The `WebMidi` object makes it easier to work with the low-level Web MIDI API. Basically, it
 * simplifies sending outgoing MIDI messages and reacting to incoming MIDI messages.
 *
 * When using the WebMidi.js library, you should know that the `WebMidi` class has already been
 * instantiated. You cannot instantiate it yourself. If you use the **IIFE** version, you should
 * simply use the global object called `WebMidi`. If you use the **CJS** (CommonJS) or **ESM** (ES6
 * module) version, you get an already-instantiated object when you import the module.
 *
 * @fires WebMidi#connected
 * @fires WebMidi#disabled
 * @fires WebMidi#disconnected
 * @fires WebMidi#enabled
 * @fires WebMidi#error
 * @fires WebMidi#midiaccessgranted
 * @fires WebMidi#portschanged
 *
 * @extends EventEmitter
 * @license Apache-2.0
 */class XD extends Wn{constructor(){super(),this.defaults={note:{attack:U.from7bitToFloat(64),release:U.from7bitToFloat(64),duration:1/0}},this.interface=null,this.validation=!0,this._inputs=[],this._disconnectedInputs=[],this._outputs=[],this._disconnectedOutputs=[],this._stateChangeQueue=[],this._octaveOffset=0}async enable(e={},n=!1){if(U.isNode){try{window.navigator}catch{let a=await Object.getPrototypeOf(async function(){}).constructor(`
        let jzz = await import("jzz");
        return jzz.default;
        `)();global.navigator||(global.navigator={}),Object.assign(global.navigator,a)}try{}catch{global.performance=await Object.getPrototypeOf(async function(){}).constructor(`
        let perf_hooks = await import("perf_hooks");
        return perf_hooks.performance;
        `)()}}if(this.validation=e.validation!==!1,this.validation&&(typeof e=="function"&&(e={callback:e,sysex:n}),n&&(e.sysex=!0)),this.enabled)return typeof e.callback=="function"&&e.callback(),Promise.resolve();const i={timestamp:this.time,target:this,type:"error",error:void 0},r={timestamp:this.time,target:this,type:"midiaccessgranted"},s={timestamp:this.time,target:this,type:"enabled"};try{typeof e.requestMIDIAccessFunction=="function"?this.interface=await e.requestMIDIAccessFunction({sysex:e.sysex,software:e.software}):this.interface=await navigator.requestMIDIAccess({sysex:e.sysex,software:e.software})}catch(o){return i.error=o,this.emit("error",i),typeof e.callback=="function"&&e.callback(o),Promise.reject(o)}this.emit("midiaccessgranted",r),this.interface.onstatechange=this._onInterfaceStateChange.bind(this);try{await this._updateInputsAndOutputs()}catch(o){return i.error=o,this.emit("error",i),typeof e.callback=="function"&&e.callback(o),Promise.reject(o)}return this.emit("enabled",s),typeof e.callback=="function"&&e.callback(),Promise.resolve(this)}async disable(){return this.interface&&(this.interface.onstatechange=void 0),this._destroyInputsAndOutputs().then(()=>{navigator&&typeof navigator.close=="function"&&navigator.close(),this.interface=null;let e={timestamp:this.time,target:this,type:"disabled"};this.emit("disabled",e),this.removeListener()})}getInputById(e,n={disconnected:!1}){if(this.validation){if(!this.enabled)throw new Error("WebMidi is not enabled.");if(!e)return}if(n.disconnected){for(let i=0;i<this._disconnectedInputs.length;i++)if(this._disconnectedInputs[i].id===e.toString())return this._disconnectedInputs[i]}else for(let i=0;i<this.inputs.length;i++)if(this.inputs[i].id===e.toString())return this.inputs[i]}getInputByName(e,n={disconnected:!1}){if(this.validation){if(!this.enabled)throw new Error("WebMidi is not enabled.");if(!e)return;e=e.toString()}if(n.disconnected){for(let i=0;i<this._disconnectedInputs.length;i++)if(~this._disconnectedInputs[i].name.indexOf(e))return this._disconnectedInputs[i]}else for(let i=0;i<this.inputs.length;i++)if(~this.inputs[i].name.indexOf(e))return this.inputs[i]}getOutputByName(e,n={disconnected:!1}){if(this.validation){if(!this.enabled)throw new Error("WebMidi is not enabled.");if(!e)return;e=e.toString()}if(n.disconnected){for(let i=0;i<this._disconnectedOutputs.length;i++)if(~this._disconnectedOutputs[i].name.indexOf(e))return this._disconnectedOutputs[i]}else for(let i=0;i<this.outputs.length;i++)if(~this.outputs[i].name.indexOf(e))return this.outputs[i]}getOutputById(e,n={disconnected:!1}){if(this.validation){if(!this.enabled)throw new Error("WebMidi is not enabled.");if(!e)return}if(n.disconnected){for(let i=0;i<this._disconnectedOutputs.length;i++)if(this._disconnectedOutputs[i].id===e.toString())return this._disconnectedOutputs[i]}else for(let i=0;i<this.outputs.length;i++)if(this.outputs[i].id===e.toString())return this.outputs[i]}noteNameToNumber(e){return this.validation&&console.warn("The noteNameToNumber() method is deprecated. Use Utilities.toNoteNumber() instead."),U.toNoteNumber(e,this.octaveOffset)}getOctave(e){return this.validation&&(console.warn("The getOctave()is deprecated. Use Utilities.getNoteDetails() instead"),e=parseInt(e)),!isNaN(e)&&e>=0&&e<=127?U.getNoteDetails(U.offsetNumber(e,this.octaveOffset)).octave:!1}sanitizeChannels(e){return this.validation&&console.warn("The sanitizeChannels() method has been moved to the utilities class."),U.sanitizeChannels(e)}toMIDIChannels(e){return this.validation&&console.warn("The toMIDIChannels() method has been deprecated. Use Utilities.sanitizeChannels() instead."),U.sanitizeChannels(e)}guessNoteNumber(e){return this.validation&&console.warn("The guessNoteNumber() method has been deprecated. Use Utilities.guessNoteNumber() instead."),U.guessNoteNumber(e,this.octaveOffset)}getValidNoteArray(e,n={}){return this.validation&&console.warn("The getValidNoteArray() method has been moved to the Utilities.buildNoteArray()"),U.buildNoteArray(e,n)}convertToTimestamp(e){return this.validation&&console.warn("The convertToTimestamp() method has been moved to Utilities.toTimestamp()."),U.toTimestamp(e)}async _destroyInputsAndOutputs(){let e=[];return this.inputs.forEach(n=>e.push(n.destroy())),this.outputs.forEach(n=>e.push(n.destroy())),Promise.all(e).then(()=>{this._inputs=[],this._outputs=[]})}_onInterfaceStateChange(e){this._updateInputsAndOutputs();let n={timestamp:e.timeStamp,type:e.port.state,target:this};if(e.port.state==="connected"&&e.port.connection==="open"){e.port.type==="output"?n.port=this.getOutputById(e.port.id):e.port.type==="input"&&(n.port=this.getInputById(e.port.id)),this.emit(e.port.state,n);const i=Object.assign({},n);i.type="portschanged",this.emit(i.type,i)}else if(e.port.state==="disconnected"&&e.port.connection==="pending"){e.port.type==="input"?n.port=this.getInputById(e.port.id,{disconnected:!0}):e.port.type==="output"&&(n.port=this.getOutputById(e.port.id,{disconnected:!0})),this.emit(e.port.state,n);const i=Object.assign({},n);i.type="portschanged",this.emit(i.type,i)}}async _updateInputsAndOutputs(){return Promise.all([this._updateInputs(),this._updateOutputs()])}async _updateInputs(){if(!this.interface)return;for(let n=this._inputs.length-1;n>=0;n--){const i=this._inputs[n];Array.from(this.interface.inputs.values()).find(s=>s===i._midiInput)||(this._disconnectedInputs.push(i),this._inputs.splice(n,1))}let e=[];return this.interface.inputs.forEach(n=>{if(!this._inputs.find(i=>i._midiInput===n)){let i=this._disconnectedInputs.find(r=>r._midiInput===n);i||(i=new WD(n)),this._inputs.push(i),e.push(i.open())}}),Promise.all(e)}async _updateOutputs(){if(!this.interface)return;for(let n=this._outputs.length-1;n>=0;n--){const i=this._outputs[n];Array.from(this.interface.outputs.values()).find(s=>s===i._midiOutput)||(this._disconnectedOutputs.push(i),this._outputs.splice(n,1))}let e=[];return this.interface.outputs.forEach(n=>{if(!this._outputs.find(i=>i._midiOutput===n)){let i=this._disconnectedOutputs.find(r=>r._midiOutput===n);i||(i=new Wd(n)),this._outputs.push(i),e.push(i.open())}}),Promise.all(e)}get enabled(){return this.interface!==null}get inputs(){return this._inputs}get isNode(){return this.validation&&console.warn("WebMidi.isNode has been deprecated. Use Utilities.isNode instead."),U.isNode}get isBrowser(){return this.validation&&console.warn("WebMidi.isBrowser has been deprecated. Use Utilities.isBrowser instead."),U.isBrowser}get octaveOffset(){return this._octaveOffset}set octaveOffset(e){if(this.validation&&(e=parseInt(e),isNaN(e)))throw new TypeError("The 'octaveOffset' property must be an integer.");this._octaveOffset=e}get outputs(){return this._outputs}get supported(){return typeof navigator<"u"&&!!navigator.requestMIDIAccess}get sysexEnabled(){return!!(this.interface&&this.interface.sysexEnabled)}get time(){return performance.now()}get version(){return"3.1.12"}get flavour(){return"esm"}get CHANNEL_EVENTS(){return this.validation&&console.warn("The CHANNEL_EVENTS enum has been moved to Enumerations.CHANNEL_EVENTS."),L.CHANNEL_EVENTS}get MIDI_SYSTEM_MESSAGES(){return this.validation&&console.warn("The MIDI_SYSTEM_MESSAGES enum has been moved to Enumerations.SYSTEM_MESSAGES."),L.SYSTEM_MESSAGES}get MIDI_CHANNEL_MODE_MESSAGES(){return this.validation&&console.warn("The MIDI_CHANNEL_MODE_MESSAGES enum has been moved to Enumerations.CHANNEL_MODE_MESSAGES."),L.CHANNEL_MODE_MESSAGES}get MIDI_CONTROL_CHANGE_MESSAGES(){return this.validation&&console.warn("The MIDI_CONTROL_CHANGE_MESSAGES enum has been replaced by the Enumerations.CONTROL_CHANGE_MESSAGES array."),L.MIDI_CONTROL_CHANGE_MESSAGES}get MIDI_REGISTERED_PARAMETER(){return this.validation&&console.warn("The MIDI_REGISTERED_PARAMETER enum has been moved to Enumerations.REGISTERED_PARAMETERS."),L.REGISTERED_PARAMETERS}get NOTES(){return this.validation&&console.warn("The NOTES enum has been deprecated."),["C","C#","D","D#","E","F","F#","G","G#","A","A#","B"]}}const H=new XD;H.constructor=null;var O1={};/*!
 *  howler.js v2.2.4
 *  howlerjs.com
 *
 *  (c) 2013-2020, James Simpson of GoldFire Studios
 *  goldfirestudios.com
 *
 *  MIT License
 */(function(t){(function(){var e=function(){this.init()};e.prototype={init:function(){var u=this||n;return u._counter=1e3,u._html5AudioPool=[],u.html5PoolSize=10,u._codecs={},u._howls=[],u._muted=!1,u._volume=1,u._canPlayEvent="canplaythrough",u._navigator=typeof window<"u"&&window.navigator?window.navigator:null,u.masterGain=null,u.noAudio=!1,u.usingWebAudio=!0,u.autoSuspend=!0,u.ctx=null,u.autoUnlock=!0,u._setup(),u},volume:function(u){var c=this||n;if(u=parseFloat(u),c.ctx||f(),typeof u<"u"&&u>=0&&u<=1){if(c._volume=u,c._muted)return c;c.usingWebAudio&&c.masterGain.gain.setValueAtTime(u,n.ctx.currentTime);for(var h=0;h<c._howls.length;h++)if(!c._howls[h]._webAudio)for(var g=c._howls[h]._getSoundIds(),E=0;E<g.length;E++){var p=c._howls[h]._soundById(g[E]);p&&p._node&&(p._node.volume=p._volume*u)}return c}return c._volume},mute:function(u){var c=this||n;c.ctx||f(),c._muted=u,c.usingWebAudio&&c.masterGain.gain.setValueAtTime(u?0:c._volume,n.ctx.currentTime);for(var h=0;h<c._howls.length;h++)if(!c._howls[h]._webAudio)for(var g=c._howls[h]._getSoundIds(),E=0;E<g.length;E++){var p=c._howls[h]._soundById(g[E]);p&&p._node&&(p._node.muted=u?!0:p._muted)}return c},stop:function(){for(var u=this||n,c=0;c<u._howls.length;c++)u._howls[c].stop();return u},unload:function(){for(var u=this||n,c=u._howls.length-1;c>=0;c--)u._howls[c].unload();return u.usingWebAudio&&u.ctx&&typeof u.ctx.close<"u"&&(u.ctx.close(),u.ctx=null,f()),u},codecs:function(u){return(this||n)._codecs[u.replace(/^x-/,"")]},_setup:function(){var u=this||n;if(u.state=u.ctx&&u.ctx.state||"suspended",u._autoSuspend(),!u.usingWebAudio)if(typeof Audio<"u")try{var c=new Audio;typeof c.oncanplaythrough>"u"&&(u._canPlayEvent="canplay")}catch{u.noAudio=!0}else u.noAudio=!0;try{var c=new Audio;c.muted&&(u.noAudio=!0)}catch{}return u.noAudio||u._setupCodecs(),u},_setupCodecs:function(){var u=this||n,c=null;try{c=typeof Audio<"u"?new Audio:null}catch{return u}if(!c||typeof c.canPlayType!="function")return u;var h=c.canPlayType("audio/mpeg;").replace(/^no$/,""),g=u._navigator?u._navigator.userAgent:"",E=g.match(/OPR\/(\d+)/g),p=E&&parseInt(E[0].split("/")[1],10)<33,m=g.indexOf("Safari")!==-1&&g.indexOf("Chrome")===-1,b=g.match(/Version\/(.*?) /),A=m&&b&&parseInt(b[1],10)<15;return u._codecs={mp3:!!(!p&&(h||c.canPlayType("audio/mp3;").replace(/^no$/,""))),mpeg:!!h,opus:!!c.canPlayType('audio/ogg; codecs="opus"').replace(/^no$/,""),ogg:!!c.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/,""),oga:!!c.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/,""),wav:!!(c.canPlayType('audio/wav; codecs="1"')||c.canPlayType("audio/wav")).replace(/^no$/,""),aac:!!c.canPlayType("audio/aac;").replace(/^no$/,""),caf:!!c.canPlayType("audio/x-caf;").replace(/^no$/,""),m4a:!!(c.canPlayType("audio/x-m4a;")||c.canPlayType("audio/m4a;")||c.canPlayType("audio/aac;")).replace(/^no$/,""),m4b:!!(c.canPlayType("audio/x-m4b;")||c.canPlayType("audio/m4b;")||c.canPlayType("audio/aac;")).replace(/^no$/,""),mp4:!!(c.canPlayType("audio/x-mp4;")||c.canPlayType("audio/mp4;")||c.canPlayType("audio/aac;")).replace(/^no$/,""),weba:!!(!A&&c.canPlayType('audio/webm; codecs="vorbis"').replace(/^no$/,"")),webm:!!(!A&&c.canPlayType('audio/webm; codecs="vorbis"').replace(/^no$/,"")),dolby:!!c.canPlayType('audio/mp4; codecs="ec-3"').replace(/^no$/,""),flac:!!(c.canPlayType("audio/x-flac;")||c.canPlayType("audio/flac;")).replace(/^no$/,"")},u},_unlockAudio:function(){var u=this||n;if(!(u._audioUnlocked||!u.ctx)){u._audioUnlocked=!1,u.autoUnlock=!1,!u._mobileUnloaded&&u.ctx.sampleRate!==44100&&(u._mobileUnloaded=!0,u.unload()),u._scratchBuffer=u.ctx.createBuffer(1,1,22050);var c=function(h){for(;u._html5AudioPool.length<u.html5PoolSize;)try{var g=new Audio;g._unlocked=!0,u._releaseHtml5Audio(g)}catch{u.noAudio=!0;break}for(var E=0;E<u._howls.length;E++)if(!u._howls[E]._webAudio)for(var p=u._howls[E]._getSoundIds(),m=0;m<p.length;m++){var b=u._howls[E]._soundById(p[m]);b&&b._node&&!b._node._unlocked&&(b._node._unlocked=!0,b._node.load())}u._autoResume();var A=u.ctx.createBufferSource();A.buffer=u._scratchBuffer,A.connect(u.ctx.destination),typeof A.start>"u"?A.noteOn(0):A.start(0),typeof u.ctx.resume=="function"&&u.ctx.resume(),A.onended=function(){A.disconnect(0),u._audioUnlocked=!0,document.removeEventListener("touchstart",c,!0),document.removeEventListener("touchend",c,!0),document.removeEventListener("click",c,!0),document.removeEventListener("keydown",c,!0);for(var S=0;S<u._howls.length;S++)u._howls[S]._emit("unlock")}};return document.addEventListener("touchstart",c,!0),document.addEventListener("touchend",c,!0),document.addEventListener("click",c,!0),document.addEventListener("keydown",c,!0),u}},_obtainHtml5Audio:function(){var u=this||n;if(u._html5AudioPool.length)return u._html5AudioPool.pop();var c=new Audio().play();return c&&typeof Promise<"u"&&(c instanceof Promise||typeof c.then=="function")&&c.catch(function(){console.warn("HTML5 Audio pool exhausted, returning potentially locked audio object.")}),new Audio},_releaseHtml5Audio:function(u){var c=this||n;return u._unlocked&&c._html5AudioPool.push(u),c},_autoSuspend:function(){var u=this;if(!(!u.autoSuspend||!u.ctx||typeof u.ctx.suspend>"u"||!n.usingWebAudio)){for(var c=0;c<u._howls.length;c++)if(u._howls[c]._webAudio){for(var h=0;h<u._howls[c]._sounds.length;h++)if(!u._howls[c]._sounds[h]._paused)return u}return u._suspendTimer&&clearTimeout(u._suspendTimer),u._suspendTimer=setTimeout(function(){if(u.autoSuspend){u._suspendTimer=null,u.state="suspending";var g=function(){u.state="suspended",u._resumeAfterSuspend&&(delete u._resumeAfterSuspend,u._autoResume())};u.ctx.suspend().then(g,g)}},3e4),u}},_autoResume:function(){var u=this;if(!(!u.ctx||typeof u.ctx.resume>"u"||!n.usingWebAudio))return u.state==="running"&&u.ctx.state!=="interrupted"&&u._suspendTimer?(clearTimeout(u._suspendTimer),u._suspendTimer=null):u.state==="suspended"||u.state==="running"&&u.ctx.state==="interrupted"?(u.ctx.resume().then(function(){u.state="running";for(var c=0;c<u._howls.length;c++)u._howls[c]._emit("resume")}),u._suspendTimer&&(clearTimeout(u._suspendTimer),u._suspendTimer=null)):u.state==="suspending"&&(u._resumeAfterSuspend=!0),u}};var n=new e,i=function(u){var c=this;if(!u.src||u.src.length===0){console.error("An array of source files must be passed with any new Howl.");return}c.init(u)};i.prototype={init:function(u){var c=this;return n.ctx||f(),c._autoplay=u.autoplay||!1,c._format=typeof u.format!="string"?u.format:[u.format],c._html5=u.html5||!1,c._muted=u.mute||!1,c._loop=u.loop||!1,c._pool=u.pool||5,c._preload=typeof u.preload=="boolean"||u.preload==="metadata"?u.preload:!0,c._rate=u.rate||1,c._sprite=u.sprite||{},c._src=typeof u.src!="string"?u.src:[u.src],c._volume=u.volume!==void 0?u.volume:1,c._xhr={method:u.xhr&&u.xhr.method?u.xhr.method:"GET",headers:u.xhr&&u.xhr.headers?u.xhr.headers:null,withCredentials:u.xhr&&u.xhr.withCredentials?u.xhr.withCredentials:!1},c._duration=0,c._state="unloaded",c._sounds=[],c._endTimers={},c._queue=[],c._playLock=!1,c._onend=u.onend?[{fn:u.onend}]:[],c._onfade=u.onfade?[{fn:u.onfade}]:[],c._onload=u.onload?[{fn:u.onload}]:[],c._onloaderror=u.onloaderror?[{fn:u.onloaderror}]:[],c._onplayerror=u.onplayerror?[{fn:u.onplayerror}]:[],c._onpause=u.onpause?[{fn:u.onpause}]:[],c._onplay=u.onplay?[{fn:u.onplay}]:[],c._onstop=u.onstop?[{fn:u.onstop}]:[],c._onmute=u.onmute?[{fn:u.onmute}]:[],c._onvolume=u.onvolume?[{fn:u.onvolume}]:[],c._onrate=u.onrate?[{fn:u.onrate}]:[],c._onseek=u.onseek?[{fn:u.onseek}]:[],c._onunlock=u.onunlock?[{fn:u.onunlock}]:[],c._onresume=[],c._webAudio=n.usingWebAudio&&!c._html5,typeof n.ctx<"u"&&n.ctx&&n.autoUnlock&&n._unlockAudio(),n._howls.push(c),c._autoplay&&c._queue.push({event:"play",action:function(){c.play()}}),c._preload&&c._preload!=="none"&&c.load(),c},load:function(){var u=this,c=null;if(n.noAudio){u._emit("loaderror",null,"No audio support.");return}typeof u._src=="string"&&(u._src=[u._src]);for(var h=0;h<u._src.length;h++){var g,E;if(u._format&&u._format[h])g=u._format[h];else{if(E=u._src[h],typeof E!="string"){u._emit("loaderror",null,"Non-string found in selected audio sources - ignoring.");continue}g=/^data:audio\/([^;,]+);/i.exec(E),g||(g=/\.([^.]+)$/.exec(E.split("?",1)[0])),g&&(g=g[1].toLowerCase())}if(g||console.warn('No file extension was found. Consider using the "format" property or specify an extension.'),g&&n.codecs(g)){c=u._src[h];break}}if(!c){u._emit("loaderror",null,"No codec support for selected audio sources.");return}return u._src=c,u._state="loading",window.location.protocol==="https:"&&c.slice(0,5)==="http:"&&(u._html5=!0,u._webAudio=!1),new r(u),u._webAudio&&o(u),u},play:function(u,c){var h=this,g=null;if(typeof u=="number")g=u,u=null;else{if(typeof u=="string"&&h._state==="loaded"&&!h._sprite[u])return null;if(typeof u>"u"&&(u="__default",!h._playLock)){for(var E=0,p=0;p<h._sounds.length;p++)h._sounds[p]._paused&&!h._sounds[p]._ended&&(E++,g=h._sounds[p]._id);E===1?u=null:g=null}}var m=g?h._soundById(g):h._inactiveSound();if(!m)return null;if(g&&!u&&(u=m._sprite||"__default"),h._state!=="loaded"){m._sprite=u,m._ended=!1;var b=m._id;return h._queue.push({event:"play",action:function(){h.play(b)}}),b}if(g&&!m._paused)return c||h._loadQueue("play"),m._id;h._webAudio&&n._autoResume();var A=Math.max(0,m._seek>0?m._seek:h._sprite[u][0]/1e3),S=Math.max(0,(h._sprite[u][0]+h._sprite[u][1])/1e3-A),w=S*1e3/Math.abs(m._rate),D=h._sprite[u][0]/1e3,x=(h._sprite[u][0]+h._sprite[u][1])/1e3;m._sprite=u,m._ended=!1;var F=function(){m._paused=!1,m._seek=A,m._start=D,m._stop=x,m._loop=!!(m._loop||h._sprite[u][2])};if(A>=x){h._ended(m);return}var y=m._node;if(h._webAudio){var X=function(){h._playLock=!1,F(),h._refreshBuffer(m);var be=m._muted||h._muted?0:m._volume;y.gain.setValueAtTime(be,n.ctx.currentTime),m._playStart=n.ctx.currentTime,typeof y.bufferSource.start>"u"?m._loop?y.bufferSource.noteGrainOn(0,A,86400):y.bufferSource.noteGrainOn(0,A,S):m._loop?y.bufferSource.start(0,A,86400):y.bufferSource.start(0,A,S),w!==1/0&&(h._endTimers[m._id]=setTimeout(h._ended.bind(h,m),w)),c||setTimeout(function(){h._emit("play",m._id),h._loadQueue()},0)};n.state==="running"&&n.ctx.state!=="interrupted"?X():(h._playLock=!0,h.once("resume",X),h._clearTimer(m._id))}else{var G=function(){y.currentTime=A,y.muted=m._muted||h._muted||n._muted||y.muted,y.volume=m._volume*n.volume(),y.playbackRate=m._rate;try{var be=y.play();if(be&&typeof Promise<"u"&&(be instanceof Promise||typeof be.then=="function")?(h._playLock=!0,F(),be.then(function(){h._playLock=!1,y._unlocked=!0,c?h._loadQueue():h._emit("play",m._id)}).catch(function(){h._playLock=!1,h._emit("playerror",m._id,"Playback was unable to start. This is most commonly an issue on mobile devices and Chrome where playback was not within a user interaction."),m._ended=!0,m._paused=!0})):c||(h._playLock=!1,F(),h._emit("play",m._id)),y.playbackRate=m._rate,y.paused){h._emit("playerror",m._id,"Playback was unable to start. This is most commonly an issue on mobile devices and Chrome where playback was not within a user interaction.");return}u!=="__default"||m._loop?h._endTimers[m._id]=setTimeout(h._ended.bind(h,m),w):(h._endTimers[m._id]=function(){h._ended(m),y.removeEventListener("ended",h._endTimers[m._id],!1)},y.addEventListener("ended",h._endTimers[m._id],!1))}catch(de){h._emit("playerror",m._id,de)}};y.src==="data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA"&&(y.src=h._src,y.load());var Ee=window&&window.ejecta||!y.readyState&&n._navigator.isCocoonJS;if(y.readyState>=3||Ee)G();else{h._playLock=!0,h._state="loading";var re=function(){h._state="loaded",G(),y.removeEventListener(n._canPlayEvent,re,!1)};y.addEventListener(n._canPlayEvent,re,!1),h._clearTimer(m._id)}}return m._id},pause:function(u){var c=this;if(c._state!=="loaded"||c._playLock)return c._queue.push({event:"pause",action:function(){c.pause(u)}}),c;for(var h=c._getSoundIds(u),g=0;g<h.length;g++){c._clearTimer(h[g]);var E=c._soundById(h[g]);if(E&&!E._paused&&(E._seek=c.seek(h[g]),E._rateSeek=0,E._paused=!0,c._stopFade(h[g]),E._node))if(c._webAudio){if(!E._node.bufferSource)continue;typeof E._node.bufferSource.stop>"u"?E._node.bufferSource.noteOff(0):E._node.bufferSource.stop(0),c._cleanBuffer(E._node)}else(!isNaN(E._node.duration)||E._node.duration===1/0)&&E._node.pause();arguments[1]||c._emit("pause",E?E._id:null)}return c},stop:function(u,c){var h=this;if(h._state!=="loaded"||h._playLock)return h._queue.push({event:"stop",action:function(){h.stop(u)}}),h;for(var g=h._getSoundIds(u),E=0;E<g.length;E++){h._clearTimer(g[E]);var p=h._soundById(g[E]);p&&(p._seek=p._start||0,p._rateSeek=0,p._paused=!0,p._ended=!0,h._stopFade(g[E]),p._node&&(h._webAudio?p._node.bufferSource&&(typeof p._node.bufferSource.stop>"u"?p._node.bufferSource.noteOff(0):p._node.bufferSource.stop(0),h._cleanBuffer(p._node)):(!isNaN(p._node.duration)||p._node.duration===1/0)&&(p._node.currentTime=p._start||0,p._node.pause(),p._node.duration===1/0&&h._clearSound(p._node))),c||h._emit("stop",p._id))}return h},mute:function(u,c){var h=this;if(h._state!=="loaded"||h._playLock)return h._queue.push({event:"mute",action:function(){h.mute(u,c)}}),h;if(typeof c>"u")if(typeof u=="boolean")h._muted=u;else return h._muted;for(var g=h._getSoundIds(c),E=0;E<g.length;E++){var p=h._soundById(g[E]);p&&(p._muted=u,p._interval&&h._stopFade(p._id),h._webAudio&&p._node?p._node.gain.setValueAtTime(u?0:p._volume,n.ctx.currentTime):p._node&&(p._node.muted=n._muted?!0:u),h._emit("mute",p._id))}return h},volume:function(){var u=this,c=arguments,h,g;if(c.length===0)return u._volume;if(c.length===1||c.length===2&&typeof c[1]>"u"){var E=u._getSoundIds(),p=E.indexOf(c[0]);p>=0?g=parseInt(c[0],10):h=parseFloat(c[0])}else c.length>=2&&(h=parseFloat(c[0]),g=parseInt(c[1],10));var m;if(typeof h<"u"&&h>=0&&h<=1){if(u._state!=="loaded"||u._playLock)return u._queue.push({event:"volume",action:function(){u.volume.apply(u,c)}}),u;typeof g>"u"&&(u._volume=h),g=u._getSoundIds(g);for(var b=0;b<g.length;b++)m=u._soundById(g[b]),m&&(m._volume=h,c[2]||u._stopFade(g[b]),u._webAudio&&m._node&&!m._muted?m._node.gain.setValueAtTime(h,n.ctx.currentTime):m._node&&!m._muted&&(m._node.volume=h*n.volume()),u._emit("volume",m._id))}else return m=g?u._soundById(g):u._sounds[0],m?m._volume:0;return u},fade:function(u,c,h,g){var E=this;if(E._state!=="loaded"||E._playLock)return E._queue.push({event:"fade",action:function(){E.fade(u,c,h,g)}}),E;u=Math.min(Math.max(0,parseFloat(u)),1),c=Math.min(Math.max(0,parseFloat(c)),1),h=parseFloat(h),E.volume(u,g);for(var p=E._getSoundIds(g),m=0;m<p.length;m++){var b=E._soundById(p[m]);if(b){if(g||E._stopFade(p[m]),E._webAudio&&!b._muted){var A=n.ctx.currentTime,S=A+h/1e3;b._volume=u,b._node.gain.setValueAtTime(u,A),b._node.gain.linearRampToValueAtTime(c,S)}E._startFadeInterval(b,u,c,h,p[m],typeof g>"u")}}return E},_startFadeInterval:function(u,c,h,g,E,p){var m=this,b=c,A=h-c,S=Math.abs(A/.01),w=Math.max(4,S>0?g/S:g),D=Date.now();u._fadeTo=h,u._interval=setInterval(function(){var x=(Date.now()-D)/g;D=Date.now(),b+=A*x,b=Math.round(b*100)/100,A<0?b=Math.max(h,b):b=Math.min(h,b),m._webAudio?u._volume=b:m.volume(b,u._id,!0),p&&(m._volume=b),(h<c&&b<=h||h>c&&b>=h)&&(clearInterval(u._interval),u._interval=null,u._fadeTo=null,m.volume(h,u._id),m._emit("fade",u._id))},w)},_stopFade:function(u){var c=this,h=c._soundById(u);return h&&h._interval&&(c._webAudio&&h._node.gain.cancelScheduledValues(n.ctx.currentTime),clearInterval(h._interval),h._interval=null,c.volume(h._fadeTo,u),h._fadeTo=null,c._emit("fade",u)),c},loop:function(){var u=this,c=arguments,h,g,E;if(c.length===0)return u._loop;if(c.length===1)if(typeof c[0]=="boolean")h=c[0],u._loop=h;else return E=u._soundById(parseInt(c[0],10)),E?E._loop:!1;else c.length===2&&(h=c[0],g=parseInt(c[1],10));for(var p=u._getSoundIds(g),m=0;m<p.length;m++)E=u._soundById(p[m]),E&&(E._loop=h,u._webAudio&&E._node&&E._node.bufferSource&&(E._node.bufferSource.loop=h,h&&(E._node.bufferSource.loopStart=E._start||0,E._node.bufferSource.loopEnd=E._stop,u.playing(p[m])&&(u.pause(p[m],!0),u.play(p[m],!0)))));return u},rate:function(){var u=this,c=arguments,h,g;if(c.length===0)g=u._sounds[0]._id;else if(c.length===1){var E=u._getSoundIds(),p=E.indexOf(c[0]);p>=0?g=parseInt(c[0],10):h=parseFloat(c[0])}else c.length===2&&(h=parseFloat(c[0]),g=parseInt(c[1],10));var m;if(typeof h=="number"){if(u._state!=="loaded"||u._playLock)return u._queue.push({event:"rate",action:function(){u.rate.apply(u,c)}}),u;typeof g>"u"&&(u._rate=h),g=u._getSoundIds(g);for(var b=0;b<g.length;b++)if(m=u._soundById(g[b]),m){u.playing(g[b])&&(m._rateSeek=u.seek(g[b]),m._playStart=u._webAudio?n.ctx.currentTime:m._playStart),m._rate=h,u._webAudio&&m._node&&m._node.bufferSource?m._node.bufferSource.playbackRate.setValueAtTime(h,n.ctx.currentTime):m._node&&(m._node.playbackRate=h);var A=u.seek(g[b]),S=(u._sprite[m._sprite][0]+u._sprite[m._sprite][1])/1e3-A,w=S*1e3/Math.abs(m._rate);(u._endTimers[g[b]]||!m._paused)&&(u._clearTimer(g[b]),u._endTimers[g[b]]=setTimeout(u._ended.bind(u,m),w)),u._emit("rate",m._id)}}else return m=u._soundById(g),m?m._rate:u._rate;return u},seek:function(){var u=this,c=arguments,h,g;if(c.length===0)u._sounds.length&&(g=u._sounds[0]._id);else if(c.length===1){var E=u._getSoundIds(),p=E.indexOf(c[0]);p>=0?g=parseInt(c[0],10):u._sounds.length&&(g=u._sounds[0]._id,h=parseFloat(c[0]))}else c.length===2&&(h=parseFloat(c[0]),g=parseInt(c[1],10));if(typeof g>"u")return 0;if(typeof h=="number"&&(u._state!=="loaded"||u._playLock))return u._queue.push({event:"seek",action:function(){u.seek.apply(u,c)}}),u;var m=u._soundById(g);if(m)if(typeof h=="number"&&h>=0){var b=u.playing(g);b&&u.pause(g,!0),m._seek=h,m._ended=!1,u._clearTimer(g),!u._webAudio&&m._node&&!isNaN(m._node.duration)&&(m._node.currentTime=h);var A=function(){b&&u.play(g,!0),u._emit("seek",g)};if(b&&!u._webAudio){var S=function(){u._playLock?setTimeout(S,0):A()};setTimeout(S,0)}else A()}else if(u._webAudio){var w=u.playing(g)?n.ctx.currentTime-m._playStart:0,D=m._rateSeek?m._rateSeek-m._seek:0;return m._seek+(D+w*Math.abs(m._rate))}else return m._node.currentTime;return u},playing:function(u){var c=this;if(typeof u=="number"){var h=c._soundById(u);return h?!h._paused:!1}for(var g=0;g<c._sounds.length;g++)if(!c._sounds[g]._paused)return!0;return!1},duration:function(u){var c=this,h=c._duration,g=c._soundById(u);return g&&(h=c._sprite[g._sprite][1]/1e3),h},state:function(){return this._state},unload:function(){for(var u=this,c=u._sounds,h=0;h<c.length;h++)c[h]._paused||u.stop(c[h]._id),u._webAudio||(u._clearSound(c[h]._node),c[h]._node.removeEventListener("error",c[h]._errorFn,!1),c[h]._node.removeEventListener(n._canPlayEvent,c[h]._loadFn,!1),c[h]._node.removeEventListener("ended",c[h]._endFn,!1),n._releaseHtml5Audio(c[h]._node)),delete c[h]._node,u._clearTimer(c[h]._id);var g=n._howls.indexOf(u);g>=0&&n._howls.splice(g,1);var E=!0;for(h=0;h<n._howls.length;h++)if(n._howls[h]._src===u._src||u._src.indexOf(n._howls[h]._src)>=0){E=!1;break}return s&&E&&delete s[u._src],n.noAudio=!1,u._state="unloaded",u._sounds=[],u=null,null},on:function(u,c,h,g){var E=this,p=E["_on"+u];return typeof c=="function"&&p.push(g?{id:h,fn:c,once:g}:{id:h,fn:c}),E},off:function(u,c,h){var g=this,E=g["_on"+u],p=0;if(typeof c=="number"&&(h=c,c=null),c||h)for(p=0;p<E.length;p++){var m=h===E[p].id;if(c===E[p].fn&&m||!c&&m){E.splice(p,1);break}}else if(u)g["_on"+u]=[];else{var b=Object.keys(g);for(p=0;p<b.length;p++)b[p].indexOf("_on")===0&&Array.isArray(g[b[p]])&&(g[b[p]]=[])}return g},once:function(u,c,h){var g=this;return g.on(u,c,h,1),g},_emit:function(u,c,h){for(var g=this,E=g["_on"+u],p=E.length-1;p>=0;p--)(!E[p].id||E[p].id===c||u==="load")&&(setTimeout((function(m){m.call(this,c,h)}).bind(g,E[p].fn),0),E[p].once&&g.off(u,E[p].fn,E[p].id));return g._loadQueue(u),g},_loadQueue:function(u){var c=this;if(c._queue.length>0){var h=c._queue[0];h.event===u&&(c._queue.shift(),c._loadQueue()),u||h.action()}return c},_ended:function(u){var c=this,h=u._sprite;if(!c._webAudio&&u._node&&!u._node.paused&&!u._node.ended&&u._node.currentTime<u._stop)return setTimeout(c._ended.bind(c,u),100),c;var g=!!(u._loop||c._sprite[h][2]);if(c._emit("end",u._id),!c._webAudio&&g&&c.stop(u._id,!0).play(u._id),c._webAudio&&g){c._emit("play",u._id),u._seek=u._start||0,u._rateSeek=0,u._playStart=n.ctx.currentTime;var E=(u._stop-u._start)*1e3/Math.abs(u._rate);c._endTimers[u._id]=setTimeout(c._ended.bind(c,u),E)}return c._webAudio&&!g&&(u._paused=!0,u._ended=!0,u._seek=u._start||0,u._rateSeek=0,c._clearTimer(u._id),c._cleanBuffer(u._node),n._autoSuspend()),!c._webAudio&&!g&&c.stop(u._id,!0),c},_clearTimer:function(u){var c=this;if(c._endTimers[u]){if(typeof c._endTimers[u]!="function")clearTimeout(c._endTimers[u]);else{var h=c._soundById(u);h&&h._node&&h._node.removeEventListener("ended",c._endTimers[u],!1)}delete c._endTimers[u]}return c},_soundById:function(u){for(var c=this,h=0;h<c._sounds.length;h++)if(u===c._sounds[h]._id)return c._sounds[h];return null},_inactiveSound:function(){var u=this;u._drain();for(var c=0;c<u._sounds.length;c++)if(u._sounds[c]._ended)return u._sounds[c].reset();return new r(u)},_drain:function(){var u=this,c=u._pool,h=0,g=0;if(!(u._sounds.length<c)){for(g=0;g<u._sounds.length;g++)u._sounds[g]._ended&&h++;for(g=u._sounds.length-1;g>=0;g--){if(h<=c)return;u._sounds[g]._ended&&(u._webAudio&&u._sounds[g]._node&&u._sounds[g]._node.disconnect(0),u._sounds.splice(g,1),h--)}}},_getSoundIds:function(u){var c=this;if(typeof u>"u"){for(var h=[],g=0;g<c._sounds.length;g++)h.push(c._sounds[g]._id);return h}else return[u]},_refreshBuffer:function(u){var c=this;return u._node.bufferSource=n.ctx.createBufferSource(),u._node.bufferSource.buffer=s[c._src],u._panner?u._node.bufferSource.connect(u._panner):u._node.bufferSource.connect(u._node),u._node.bufferSource.loop=u._loop,u._loop&&(u._node.bufferSource.loopStart=u._start||0,u._node.bufferSource.loopEnd=u._stop||0),u._node.bufferSource.playbackRate.setValueAtTime(u._rate,n.ctx.currentTime),c},_cleanBuffer:function(u){var c=this,h=n._navigator&&n._navigator.vendor.indexOf("Apple")>=0;if(!u.bufferSource)return c;if(n._scratchBuffer&&u.bufferSource&&(u.bufferSource.onended=null,u.bufferSource.disconnect(0),h))try{u.bufferSource.buffer=n._scratchBuffer}catch{}return u.bufferSource=null,c},_clearSound:function(u){var c=/MSIE |Trident\//.test(n._navigator&&n._navigator.userAgent);c||(u.src="data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA")}};var r=function(u){this._parent=u,this.init()};r.prototype={init:function(){var u=this,c=u._parent;return u._muted=c._muted,u._loop=c._loop,u._volume=c._volume,u._rate=c._rate,u._seek=0,u._paused=!0,u._ended=!0,u._sprite="__default",u._id=++n._counter,c._sounds.push(u),u.create(),u},create:function(){var u=this,c=u._parent,h=n._muted||u._muted||u._parent._muted?0:u._volume;return c._webAudio?(u._node=typeof n.ctx.createGain>"u"?n.ctx.createGainNode():n.ctx.createGain(),u._node.gain.setValueAtTime(h,n.ctx.currentTime),u._node.paused=!0,u._node.connect(n.masterGain)):n.noAudio||(u._node=n._obtainHtml5Audio(),u._errorFn=u._errorListener.bind(u),u._node.addEventListener("error",u._errorFn,!1),u._loadFn=u._loadListener.bind(u),u._node.addEventListener(n._canPlayEvent,u._loadFn,!1),u._endFn=u._endListener.bind(u),u._node.addEventListener("ended",u._endFn,!1),u._node.src=c._src,u._node.preload=c._preload===!0?"auto":c._preload,u._node.volume=h*n.volume(),u._node.load()),u},reset:function(){var u=this,c=u._parent;return u._muted=c._muted,u._loop=c._loop,u._volume=c._volume,u._rate=c._rate,u._seek=0,u._rateSeek=0,u._paused=!0,u._ended=!0,u._sprite="__default",u._id=++n._counter,u},_errorListener:function(){var u=this;u._parent._emit("loaderror",u._id,u._node.error?u._node.error.code:0),u._node.removeEventListener("error",u._errorFn,!1)},_loadListener:function(){var u=this,c=u._parent;c._duration=Math.ceil(u._node.duration*10)/10,Object.keys(c._sprite).length===0&&(c._sprite={__default:[0,c._duration*1e3]}),c._state!=="loaded"&&(c._state="loaded",c._emit("load"),c._loadQueue()),u._node.removeEventListener(n._canPlayEvent,u._loadFn,!1)},_endListener:function(){var u=this,c=u._parent;c._duration===1/0&&(c._duration=Math.ceil(u._node.duration*10)/10,c._sprite.__default[1]===1/0&&(c._sprite.__default[1]=c._duration*1e3),c._ended(u)),u._node.removeEventListener("ended",u._endFn,!1)}};var s={},o=function(u){var c=u._src;if(s[c]){u._duration=s[c].duration,d(u);return}if(/^data:[^;]+;base64,/.test(c)){for(var h=atob(c.split(",")[1]),g=new Uint8Array(h.length),E=0;E<h.length;++E)g[E]=h.charCodeAt(E);l(g.buffer,u)}else{var p=new XMLHttpRequest;p.open(u._xhr.method,c,!0),p.withCredentials=u._xhr.withCredentials,p.responseType="arraybuffer",u._xhr.headers&&Object.keys(u._xhr.headers).forEach(function(m){p.setRequestHeader(m,u._xhr.headers[m])}),p.onload=function(){var m=(p.status+"")[0];if(m!=="0"&&m!=="2"&&m!=="3"){u._emit("loaderror",null,"Failed loading audio file with status: "+p.status+".");return}l(p.response,u)},p.onerror=function(){u._webAudio&&(u._html5=!0,u._webAudio=!1,u._sounds=[],delete s[c],u.load())},a(p)}},a=function(u){try{u.send()}catch{u.onerror()}},l=function(u,c){var h=function(){c._emit("loaderror",null,"Decoding audio data failed.")},g=function(E){E&&c._sounds.length>0?(s[c._src]=E,d(c,E)):h()};typeof Promise<"u"&&n.ctx.decodeAudioData.length===1?n.ctx.decodeAudioData(u).then(g).catch(h):n.ctx.decodeAudioData(u,g,h)},d=function(u,c){c&&!u._duration&&(u._duration=c.duration),Object.keys(u._sprite).length===0&&(u._sprite={__default:[0,u._duration*1e3]}),u._state!=="loaded"&&(u._state="loaded",u._emit("load"),u._loadQueue())},f=function(){if(n.usingWebAudio){try{typeof AudioContext<"u"?n.ctx=new AudioContext:typeof webkitAudioContext<"u"?n.ctx=new webkitAudioContext:n.usingWebAudio=!1}catch{n.usingWebAudio=!1}n.ctx||(n.usingWebAudio=!1);var u=/iP(hone|od|ad)/.test(n._navigator&&n._navigator.platform),c=n._navigator&&n._navigator.appVersion.match(/OS (\d+)_(\d+)_?(\d+)?/),h=c?parseInt(c[1],10):null;if(u&&h&&h<9){var g=/safari/.test(n._navigator&&n._navigator.userAgent.toLowerCase());n._navigator&&!g&&(n.usingWebAudio=!1)}n.usingWebAudio&&(n.masterGain=typeof n.ctx.createGain>"u"?n.ctx.createGainNode():n.ctx.createGain(),n.masterGain.gain.setValueAtTime(n._muted?0:n._volume,n.ctx.currentTime),n.masterGain.connect(n.ctx.destination)),n._setup()}};t.Howler=n,t.Howl=i,typeof Ws<"u"?(Ws.HowlerGlobal=e,Ws.Howler=n,Ws.Howl=i,Ws.Sound=r):typeof window<"u"&&(window.HowlerGlobal=e,window.Howler=n,window.Howl=i,window.Sound=r)})();/*!
 *  Spatial Plugin - Adds support for stereo and 3D audio where Web Audio is supported.
 *  
 *  howler.js v2.2.4
 *  howlerjs.com
 *
 *  (c) 2013-2020, James Simpson of GoldFire Studios
 *  goldfirestudios.com
 *
 *  MIT License
 */(function(){HowlerGlobal.prototype._pos=[0,0,0],HowlerGlobal.prototype._orientation=[0,0,-1,0,1,0],HowlerGlobal.prototype.stereo=function(n){var i=this;if(!i.ctx||!i.ctx.listener)return i;for(var r=i._howls.length-1;r>=0;r--)i._howls[r].stereo(n);return i},HowlerGlobal.prototype.pos=function(n,i,r){var s=this;if(!s.ctx||!s.ctx.listener)return s;if(i=typeof i!="number"?s._pos[1]:i,r=typeof r!="number"?s._pos[2]:r,typeof n=="number")s._pos=[n,i,r],typeof s.ctx.listener.positionX<"u"?(s.ctx.listener.positionX.setTargetAtTime(s._pos[0],Howler.ctx.currentTime,.1),s.ctx.listener.positionY.setTargetAtTime(s._pos[1],Howler.ctx.currentTime,.1),s.ctx.listener.positionZ.setTargetAtTime(s._pos[2],Howler.ctx.currentTime,.1)):s.ctx.listener.setPosition(s._pos[0],s._pos[1],s._pos[2]);else return s._pos;return s},HowlerGlobal.prototype.orientation=function(n,i,r,s,o,a){var l=this;if(!l.ctx||!l.ctx.listener)return l;var d=l._orientation;if(i=typeof i!="number"?d[1]:i,r=typeof r!="number"?d[2]:r,s=typeof s!="number"?d[3]:s,o=typeof o!="number"?d[4]:o,a=typeof a!="number"?d[5]:a,typeof n=="number")l._orientation=[n,i,r,s,o,a],typeof l.ctx.listener.forwardX<"u"?(l.ctx.listener.forwardX.setTargetAtTime(n,Howler.ctx.currentTime,.1),l.ctx.listener.forwardY.setTargetAtTime(i,Howler.ctx.currentTime,.1),l.ctx.listener.forwardZ.setTargetAtTime(r,Howler.ctx.currentTime,.1),l.ctx.listener.upX.setTargetAtTime(s,Howler.ctx.currentTime,.1),l.ctx.listener.upY.setTargetAtTime(o,Howler.ctx.currentTime,.1),l.ctx.listener.upZ.setTargetAtTime(a,Howler.ctx.currentTime,.1)):l.ctx.listener.setOrientation(n,i,r,s,o,a);else return d;return l},Howl.prototype.init=function(n){return function(i){var r=this;return r._orientation=i.orientation||[1,0,0],r._stereo=i.stereo||null,r._pos=i.pos||null,r._pannerAttr={coneInnerAngle:typeof i.coneInnerAngle<"u"?i.coneInnerAngle:360,coneOuterAngle:typeof i.coneOuterAngle<"u"?i.coneOuterAngle:360,coneOuterGain:typeof i.coneOuterGain<"u"?i.coneOuterGain:0,distanceModel:typeof i.distanceModel<"u"?i.distanceModel:"inverse",maxDistance:typeof i.maxDistance<"u"?i.maxDistance:1e4,panningModel:typeof i.panningModel<"u"?i.panningModel:"HRTF",refDistance:typeof i.refDistance<"u"?i.refDistance:1,rolloffFactor:typeof i.rolloffFactor<"u"?i.rolloffFactor:1},r._onstereo=i.onstereo?[{fn:i.onstereo}]:[],r._onpos=i.onpos?[{fn:i.onpos}]:[],r._onorientation=i.onorientation?[{fn:i.onorientation}]:[],n.call(this,i)}}(Howl.prototype.init),Howl.prototype.stereo=function(n,i){var r=this;if(!r._webAudio)return r;if(r._state!=="loaded")return r._queue.push({event:"stereo",action:function(){r.stereo(n,i)}}),r;var s=typeof Howler.ctx.createStereoPanner>"u"?"spatial":"stereo";if(typeof i>"u")if(typeof n=="number")r._stereo=n,r._pos=[n,0,0];else return r._stereo;for(var o=r._getSoundIds(i),a=0;a<o.length;a++){var l=r._soundById(o[a]);if(l)if(typeof n=="number")l._stereo=n,l._pos=[n,0,0],l._node&&(l._pannerAttr.panningModel="equalpower",(!l._panner||!l._panner.pan)&&e(l,s),s==="spatial"?typeof l._panner.positionX<"u"?(l._panner.positionX.setValueAtTime(n,Howler.ctx.currentTime),l._panner.positionY.setValueAtTime(0,Howler.ctx.currentTime),l._panner.positionZ.setValueAtTime(0,Howler.ctx.currentTime)):l._panner.setPosition(n,0,0):l._panner.pan.setValueAtTime(n,Howler.ctx.currentTime)),r._emit("stereo",l._id);else return l._stereo}return r},Howl.prototype.pos=function(n,i,r,s){var o=this;if(!o._webAudio)return o;if(o._state!=="loaded")return o._queue.push({event:"pos",action:function(){o.pos(n,i,r,s)}}),o;if(i=typeof i!="number"?0:i,r=typeof r!="number"?-.5:r,typeof s>"u")if(typeof n=="number")o._pos=[n,i,r];else return o._pos;for(var a=o._getSoundIds(s),l=0;l<a.length;l++){var d=o._soundById(a[l]);if(d)if(typeof n=="number")d._pos=[n,i,r],d._node&&((!d._panner||d._panner.pan)&&e(d,"spatial"),typeof d._panner.positionX<"u"?(d._panner.positionX.setValueAtTime(n,Howler.ctx.currentTime),d._panner.positionY.setValueAtTime(i,Howler.ctx.currentTime),d._panner.positionZ.setValueAtTime(r,Howler.ctx.currentTime)):d._panner.setPosition(n,i,r)),o._emit("pos",d._id);else return d._pos}return o},Howl.prototype.orientation=function(n,i,r,s){var o=this;if(!o._webAudio)return o;if(o._state!=="loaded")return o._queue.push({event:"orientation",action:function(){o.orientation(n,i,r,s)}}),o;if(i=typeof i!="number"?o._orientation[1]:i,r=typeof r!="number"?o._orientation[2]:r,typeof s>"u")if(typeof n=="number")o._orientation=[n,i,r];else return o._orientation;for(var a=o._getSoundIds(s),l=0;l<a.length;l++){var d=o._soundById(a[l]);if(d)if(typeof n=="number")d._orientation=[n,i,r],d._node&&(d._panner||(d._pos||(d._pos=o._pos||[0,0,-.5]),e(d,"spatial")),typeof d._panner.orientationX<"u"?(d._panner.orientationX.setValueAtTime(n,Howler.ctx.currentTime),d._panner.orientationY.setValueAtTime(i,Howler.ctx.currentTime),d._panner.orientationZ.setValueAtTime(r,Howler.ctx.currentTime)):d._panner.setOrientation(n,i,r)),o._emit("orientation",d._id);else return d._orientation}return o},Howl.prototype.pannerAttr=function(){var n=this,i=arguments,r,s,o;if(!n._webAudio)return n;if(i.length===0)return n._pannerAttr;if(i.length===1)if(typeof i[0]=="object")r=i[0],typeof s>"u"&&(r.pannerAttr||(r.pannerAttr={coneInnerAngle:r.coneInnerAngle,coneOuterAngle:r.coneOuterAngle,coneOuterGain:r.coneOuterGain,distanceModel:r.distanceModel,maxDistance:r.maxDistance,refDistance:r.refDistance,rolloffFactor:r.rolloffFactor,panningModel:r.panningModel}),n._pannerAttr={coneInnerAngle:typeof r.pannerAttr.coneInnerAngle<"u"?r.pannerAttr.coneInnerAngle:n._coneInnerAngle,coneOuterAngle:typeof r.pannerAttr.coneOuterAngle<"u"?r.pannerAttr.coneOuterAngle:n._coneOuterAngle,coneOuterGain:typeof r.pannerAttr.coneOuterGain<"u"?r.pannerAttr.coneOuterGain:n._coneOuterGain,distanceModel:typeof r.pannerAttr.distanceModel<"u"?r.pannerAttr.distanceModel:n._distanceModel,maxDistance:typeof r.pannerAttr.maxDistance<"u"?r.pannerAttr.maxDistance:n._maxDistance,refDistance:typeof r.pannerAttr.refDistance<"u"?r.pannerAttr.refDistance:n._refDistance,rolloffFactor:typeof r.pannerAttr.rolloffFactor<"u"?r.pannerAttr.rolloffFactor:n._rolloffFactor,panningModel:typeof r.pannerAttr.panningModel<"u"?r.pannerAttr.panningModel:n._panningModel});else return o=n._soundById(parseInt(i[0],10)),o?o._pannerAttr:n._pannerAttr;else i.length===2&&(r=i[0],s=parseInt(i[1],10));for(var a=n._getSoundIds(s),l=0;l<a.length;l++)if(o=n._soundById(a[l]),o){var d=o._pannerAttr;d={coneInnerAngle:typeof r.coneInnerAngle<"u"?r.coneInnerAngle:d.coneInnerAngle,coneOuterAngle:typeof r.coneOuterAngle<"u"?r.coneOuterAngle:d.coneOuterAngle,coneOuterGain:typeof r.coneOuterGain<"u"?r.coneOuterGain:d.coneOuterGain,distanceModel:typeof r.distanceModel<"u"?r.distanceModel:d.distanceModel,maxDistance:typeof r.maxDistance<"u"?r.maxDistance:d.maxDistance,refDistance:typeof r.refDistance<"u"?r.refDistance:d.refDistance,rolloffFactor:typeof r.rolloffFactor<"u"?r.rolloffFactor:d.rolloffFactor,panningModel:typeof r.panningModel<"u"?r.panningModel:d.panningModel};var f=o._panner;f||(o._pos||(o._pos=n._pos||[0,0,-.5]),e(o,"spatial"),f=o._panner),f.coneInnerAngle=d.coneInnerAngle,f.coneOuterAngle=d.coneOuterAngle,f.coneOuterGain=d.coneOuterGain,f.distanceModel=d.distanceModel,f.maxDistance=d.maxDistance,f.refDistance=d.refDistance,f.rolloffFactor=d.rolloffFactor,f.panningModel=d.panningModel}return n},Sound.prototype.init=function(n){return function(){var i=this,r=i._parent;i._orientation=r._orientation,i._stereo=r._stereo,i._pos=r._pos,i._pannerAttr=r._pannerAttr,n.call(this),i._stereo?r.stereo(i._stereo):i._pos&&r.pos(i._pos[0],i._pos[1],i._pos[2],i._id)}}(Sound.prototype.init),Sound.prototype.reset=function(n){return function(){var i=this,r=i._parent;return i._orientation=r._orientation,i._stereo=r._stereo,i._pos=r._pos,i._pannerAttr=r._pannerAttr,i._stereo?r.stereo(i._stereo):i._pos?r.pos(i._pos[0],i._pos[1],i._pos[2],i._id):i._panner&&(i._panner.disconnect(0),i._panner=void 0,r._refreshBuffer(i)),n.call(this)}}(Sound.prototype.reset);var e=function(n,i){i=i||"spatial",i==="spatial"?(n._panner=Howler.ctx.createPanner(),n._panner.coneInnerAngle=n._pannerAttr.coneInnerAngle,n._panner.coneOuterAngle=n._pannerAttr.coneOuterAngle,n._panner.coneOuterGain=n._pannerAttr.coneOuterGain,n._panner.distanceModel=n._pannerAttr.distanceModel,n._panner.maxDistance=n._pannerAttr.maxDistance,n._panner.refDistance=n._pannerAttr.refDistance,n._panner.rolloffFactor=n._pannerAttr.rolloffFactor,n._panner.panningModel=n._pannerAttr.panningModel,typeof n._panner.positionX<"u"?(n._panner.positionX.setValueAtTime(n._pos[0],Howler.ctx.currentTime),n._panner.positionY.setValueAtTime(n._pos[1],Howler.ctx.currentTime),n._panner.positionZ.setValueAtTime(n._pos[2],Howler.ctx.currentTime)):n._panner.setPosition(n._pos[0],n._pos[1],n._pos[2]),typeof n._panner.orientationX<"u"?(n._panner.orientationX.setValueAtTime(n._orientation[0],Howler.ctx.currentTime),n._panner.orientationY.setValueAtTime(n._orientation[1],Howler.ctx.currentTime),n._panner.orientationZ.setValueAtTime(n._orientation[2],Howler.ctx.currentTime)):n._panner.setOrientation(n._orientation[0],n._orientation[1],n._orientation[2])):(n._panner=Howler.ctx.createStereoPanner(),n._panner.pan.setValueAtTime(n._stereo,Howler.ctx.currentTime)),n._panner.connect(n._node),n._paused||n._parent.pause(n._id,!0).play(n._id,!0)}})()})(O1);class zD{constructor(){this.sounds={},this.loadSounds()}loadSounds(){const e=["C","Cs","D","Ds","E","F","Fs","G","Gs","A","As","B"],n=["1","2","3","4","5","6","7","8"];e.forEach(i=>{n.forEach(r=>{const s=`${i}${r}`,o=s.replace("#","s");this.sounds[s]=new O1.Howl({src:[`/audio/notes/${o}.mp3`],preload:!0,volume:1,onloaderror:(a,l)=>console.error(`Error loading ${s}:`,l)})})})}playNote(e){const n=this.convertToSoundFormat(e);this.sounds[n]?(this.sounds[n].volume(1),this.sounds[n].play()):console.error(`Sound not found for note: ${n}`)}convertToSoundFormat(e){const n=e.match(/([A-G][#b]?)(\d+)/);if(!n)return e;const[,i,r]=n,s={"C#":"Cs",Db:"Cs","D#":"Ds",Eb:"Ds","F#":"Fs",Gb:"Fs","G#":"Gs",Ab:"Gs","A#":"As",Bb:"As"};return s[i]?`${s[i]}${r}`:(i.includes("s"),e)}testPlayAllNotes(){Object.keys(this.sounds).forEach((e,n)=>{setTimeout(()=>{this.playNote(e)},n*500)})}}const YD=new zD;class VD{constructor(){cn(this,"addNoteOnListener",e=>(this.noteOnListeners.push(e),()=>{this.removeNoteOnListener(e)}));cn(this,"addNoteOffListener",e=>(this.noteOffListeners.push(e),()=>{this.removeNoteOffListener(e)}));cn(this,"removeNoteOnListener",e=>{const n=this.noteOnListeners.indexOf(e);n!==-1&&(this.noteOnListeners.splice(n,1),console.log("Note-on listener removed"))});cn(this,"removeNoteOffListener",e=>{const n=this.noteOffListeners.indexOf(e);n!==-1&&(this.noteOffListeners.splice(n,1),console.log("Note-off listener removed"))});cn(this,"removeAllListeners",()=>{this.noteOnListeners=[],this.noteOffListeners=[],console.log("All MIDI listeners removed")});cn(this,"handleNotePlay",e=>(YD.playNote(e),console.log("Playing note:",e),this.noteOnListeners.forEach(n=>n(e)),this.noteOnListeners.forEach(n=>n(e)),e));cn(this,"handleNoteOff",e=>{this.noteOffListeners.forEach(n=>n(e))});cn(this,"setupMidi",async()=>{try{await H.enable();const e=H.inputs;console.log(e);const n=e.map(r=>r.name);console.log("Connected MIDI devices:",e.map(r=>r.name));const i=H.getInputByName("KOMPLETE KONTROL A25 MIDI");if(i)i.addListener("noteon",r=>{const s=this.useFlats?this.getEnharmonicEquivalent(r.note.identifier):r.note.identifier;console.log("MIDI Note On:",s),this.handleNotePlay(s)}),i.addListener("noteoff",r=>{const s=this.useFlats?this.getEnharmonicEquivalent(r.note.identifier):r.note.identifier;console.log("MIDI Note Off:",s),this.handleNoteOff(s)});else if(console.log("KOMPLETE KONTROL A25 MIDI not found"),e.length>0){const r=e[0];console.log(`Connecting to available MIDI device: ${r.name}`),r.addListener("noteon",s=>{const o=this.useFlats?this.getEnharmonicEquivalent(s.note.identifier):s.note.identifier;console.log("MIDI Note On:",o),this.handleNotePlay(o)}),r.addListener("noteoff",s=>{const o=this.useFlats?this.getEnharmonicEquivalent(s.note.identifier):s.note.identifier;console.log("MIDI Note Off:",o),this.handleNoteOff(o)})}}catch{console.log("MIDI device not found or WebMidi not supported")}});this.noteOnListeners=[],this.noteOffListeners=[],this.useFlats=!0}getEnharmonicEquivalent(e){const n={"C#":"Db","D#":"Eb","F#":"Gb","G#":"Ab","A#":"Bb"},i={Db:"C#",Eb:"D#",Gb:"F#",Ab:"G#",Bb:"A#"},r=e.match(/([A-G][#b]?)(\d+)/);if(!r)return e;const[,s,o]=r;return this.useFlats&&n[s]?`${n[s]}${o}`:!this.useFlats&&i[s]?`${i[s]}${o}`:e}setAccidentalPreference(e){this.useFlats=e,console.log(`Accidental preference set to: ${e?"flats":"sharps"}`)}}const xr=new VD,y1=B.createContext(),uf=()=>B.useContext(y1),qD=({children:t})=>{const[e,n]=B.useState([]);B.useEffect(()=>{const r=l=>{console.log("Context received note on:",l),n(d=>d.includes(l)?d:[...d,l])},s=l=>{console.log("Context received note off:",l),n(d=>d.filter(f=>f!==l))},o=xr.addNoteOnListener(r),a=xr.addNoteOffListener(s);return console.log("MIDI listeners registered for PianoContext"),()=>{console.log("Cleaning up MIDI listeners for PianoContext"),o==null||o(),a==null||a()}},[]);const i={activeNotes:e};return v.jsx(y1.Provider,{value:i,children:t})},R1=B.createContext(),lf=()=>B.useContext(R1),JD=({children:t})=>{const[e,n]=B.useState(!0),s={useFlats:e,toggleAccidentals:()=>{n(o=>!o)},highlightedNotes:e?["Db","Eb","Gb","Ab","Bb"]:[]};return v.jsx(R1.Provider,{value:s,children:t})};const cf=B.createContext();function ZD({children:t}){const e=B.useRef(),[n,i]=B.useState(null),[r,s]=B.useState(null),a={modalRef:e,modalContent:n,setModalContent:i,setOnModalClose:s,closeModal:()=>{i(null),typeof r=="function"&&(s(null),r())}};return v.jsxs(v.Fragment,{children:[v.jsx(cf.Provider,{value:a,children:t}),v.jsx("div",{ref:e})]})}function KD(){const{modalRef:t,modalContent:e,closeModal:n}=B.useContext(cf);return!t||!t.current||!e?null:Rp.createPortal(v.jsxs("div",{id:"modal",children:[v.jsx("div",{id:"modal-background",onClick:n}),v.jsx("div",{id:"modal-content",children:e})]}),t.current)}const df=()=>B.useContext(cf);function Lg({modalComponent:t,itemText:e,onItemClick:n,onModalClose:i}){const{setModalContent:r,setOnModalClose:s}=df(),o=()=>{i&&s(i),r(t),typeof n=="function"&&n()};return v.jsx("li",{onClick:o,children:e})}function QD(){const t=Rt(),[e,n]=B.useState(""),[i,r]=B.useState(""),[s,o]=B.useState({}),{closeModal:a}=df(),l=async()=>{await t(Ka({email:"demo@aa.io",password:"password"}))||a()},d=async()=>{await t(Ka({email:"admin_demo@aa.io",password:"password"}))||a()},f=async u=>{u.preventDefault();const c=await t(Ka({email:e,password:i}));c?o(c):a()};return v.jsx(v.Fragment,{children:v.jsxs("form",{className:"login-modal",onSubmit:f,children:[v.jsxs("label",{children:[v.jsx("p",{className:"email-word",children:"Email"}),v.jsx("input",{type:"text",value:e,onChange:u=>n(u.target.value),required:!0})]}),s.email&&v.jsx("p",{children:s.email}),v.jsxs("label",{children:[v.jsx("p",{children:"Password"}),v.jsx("input",{type:"password",value:i,onChange:u=>r(u.target.value),required:!0})]}),s.password&&v.jsx("p",{children:s.password}),v.jsx("button",{type:"submit",children:v.jsx("p",{className:"login-word",children:"Log In"})}),v.jsx("button",{type:"button",onClick:l,children:v.jsx("p",{className:"demoUser-word",children:"Demo User"})}),v.jsx("button",{type:"button",onClick:d,children:v.jsx("p",{className:"adminDemoUser-word",children:"Admin Demo"})})]})})}function GD(){const t=Rt(),[e,n]=B.useState(""),[i,r]=B.useState(""),[s,o]=B.useState(""),[a,l]=B.useState(""),[d,f]=B.useState({}),{closeModal:u}=df(),c=async h=>{if(h.preventDefault(),s!==a)return f({confirmPassword:"Confirm Password field must be the same as the Password field"});const g=await t(S1({email:e,username:i,password:s}));g?f(g):u()};return v.jsxs(v.Fragment,{children:[d.server&&v.jsx("p",{children:d.server}),v.jsxs("form",{className:"signup-modal",onSubmit:c,children:[v.jsxs("label",{children:[v.jsx("p",{className:"email-word",children:"Email"}),v.jsx("input",{type:"text",value:e,onChange:h=>n(h.target.value),required:!0})]}),d.email&&v.jsx("p",{children:d.email}),v.jsxs("label",{children:[v.jsx("p",{className:"username-word",children:"User Name"}),v.jsx("input",{type:"text",value:i,onChange:h=>r(h.target.value),required:!0})]}),d.username&&v.jsx("p",{children:d.username}),v.jsxs("label",{children:[v.jsx("p",{className:"password-word",children:"Password"}),v.jsx("input",{type:"password",value:s,onChange:h=>o(h.target.value),required:!0})]}),d.password&&v.jsx("p",{children:d.password}),v.jsxs("label",{children:[v.jsx("p",{className:"confirm-password-word",children:"Confirm Password"}),v.jsx("input",{type:"password",value:a,onChange:h=>l(h.target.value),required:!0})]}),d.confirmPassword&&v.jsx("p",{children:d.confirmPassword}),v.jsx("button",{type:"submit",children:"Sign Up"})]})]})}var I1={color:void 0,size:void 0,className:void 0,style:void 0,attr:void 0},Og=bi.createContext&&bi.createContext(I1),_D=["attr","size","title"];function $D(t,e){if(t==null)return{};var n=ex(t,e),i,r;if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(t);for(r=0;r<s.length;r++)i=s[r],!(e.indexOf(i)>=0)&&Object.prototype.propertyIsEnumerable.call(t,i)&&(n[i]=t[i])}return n}function ex(t,e){if(t==null)return{};var n={};for(var i in t)if(Object.prototype.hasOwnProperty.call(t,i)){if(e.indexOf(i)>=0)continue;n[i]=t[i]}return n}function Pu(){return Pu=Object.assign?Object.assign.bind():function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(t[i]=n[i])}return t},Pu.apply(this,arguments)}function yg(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);e&&(i=i.filter(function(r){return Object.getOwnPropertyDescriptor(t,r).enumerable})),n.push.apply(n,i)}return n}function ku(t){for(var e=1;e<arguments.length;e++){var n=arguments[e]!=null?arguments[e]:{};e%2?yg(Object(n),!0).forEach(function(i){tx(t,i,n[i])}):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):yg(Object(n)).forEach(function(i){Object.defineProperty(t,i,Object.getOwnPropertyDescriptor(n,i))})}return t}function tx(t,e,n){return e=nx(e),e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function nx(t){var e=ix(t,"string");return typeof e=="symbol"?e:e+""}function ix(t,e){if(typeof t!="object"||!t)return t;var n=t[Symbol.toPrimitive];if(n!==void 0){var i=n.call(t,e||"default");if(typeof i!="object")return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return(e==="string"?String:Number)(t)}function j1(t){return t&&t.map((e,n)=>bi.createElement(e.tag,ku({key:n},e.attr),j1(e.child)))}function rx(t){return e=>bi.createElement(sx,Pu({attr:ku({},t.attr)},e),j1(t.child))}function sx(t){var e=n=>{var{attr:i,size:r,title:s}=t,o=$D(t,_D),a=r||n.size||"1em",l;return n.className&&(l=n.className),t.className&&(l=(l?l+" ":"")+t.className),bi.createElement("svg",Pu({stroke:"currentColor",fill:"currentColor",strokeWidth:"0"},n.attr,i,o,{className:l,style:ku(ku({color:t.color||n.color},n.style),t.style),height:a,width:a,xmlns:"http://www.w3.org/2000/svg"}),s&&bi.createElement("title",null,s),t.children)};return Og!==void 0?bi.createElement(Og.Consumer,null,n=>e(n)):e(I1)}function ox(t){return rx({tag:"svg",attr:{viewBox:"0 0 24 24",fill:"none",stroke:"currentColor",strokeWidth:"2",strokeLinecap:"round",strokeLinejoin:"round"},child:[{tag:"rect",attr:{width:"20",height:"16",x:"2",y:"4",rx:"2"},child:[]},{tag:"path",attr:{d:"M6 8h4"},child:[]},{tag:"path",attr:{d:"M14 8h.01"},child:[]},{tag:"path",attr:{d:"M18 8h.01"},child:[]},{tag:"path",attr:{d:"M2 12h20"},child:[]},{tag:"path",attr:{d:"M6 12v4"},child:[]},{tag:"path",attr:{d:"M10 12v4"},child:[]},{tag:"path",attr:{d:"M14 12v4"},child:[]},{tag:"path",attr:{d:"M18 12v4"},child:[]}]})(t)}function ax(){const t=Rt(),e=Zt(),[n,i]=B.useState(!1),r=Zn(d=>d.session.user),s=B.useRef(),o=d=>{d.stopPropagation(),i(!n)};B.useEffect(()=>{if(!n)return;const d=f=>{s.current&&!s.current.contains(f.target)&&i(!1)};return document.addEventListener("click",d),()=>document.removeEventListener("click",d)},[n]);const a=()=>i(!1),l=d=>{d.preventDefault(),t(A1()),a(),e("/")};return v.jsxs(v.Fragment,{children:[v.jsx("button",{className:"p-button",onClick:o,children:v.jsx(ox,{className:"pButton"})}),n&&v.jsx("ul",{className:"profile-dropdown",ref:s,children:r?v.jsxs("div",{children:[v.jsx("li",{children:r.username}),v.jsx("li",{children:r.email}),v.jsx("li",{children:v.jsx("button",{onClick:l,children:"Log Out"})})]}):v.jsxs(v.Fragment,{children:[v.jsx(Lg,{itemText:v.jsx("p",{className:"login-word",children:"Login"}),onItemClick:a,modalComponent:v.jsx(QD,{})}),v.jsx(Lg,{itemText:v.jsx("p",{className:"signin-word",children:"Sign Up"}),onItemClick:a,modalComponent:v.jsx(GD,{})})]})})]})}const ux=()=>{const t=Zt(),e=()=>{t("/course")};return v.jsx("div",{children:v.jsx("button",{onClick:e,className:"course-button",children:v.jsx("p",{className:"allCourses-word",children:"All Courses"})})})},lx=()=>{const t=Zt(),e=()=>{t("/review")};return v.jsx("div",{children:v.jsx("button",{onClick:e,className:"review-button",children:v.jsx("p",{className:"review-word",children:"Review"})})})};function cx(){const t=Zn(s=>s.session.user),e=Zt(),n=Rt(),i=()=>{n(A1()).then(()=>{e("/")})},r=s=>(s.preventDefault(),s.stopPropagation(),t?!0:(alert("Please login to access this feature"),!1));return v.jsx("div",{children:v.jsxs("ul",{className:"nav",children:[v.jsx("li",{children:v.jsx(f1,{to:"/",children:v.jsx("p",{className:"home-icon",children:"Home"})})}),t?v.jsxs(v.Fragment,{children:[v.jsx("li",{children:v.jsx(ux,{})}),v.jsx("li",{children:v.jsx(lx,{})}),v.jsx("li",{})]}):v.jsxs(v.Fragment,{children:[v.jsx("li",{children:v.jsx("div",{onClick:r,className:"disabled-link",children:v.jsx("span",{children:"Courses"})})}),v.jsx("li",{children:v.jsx("div",{onClick:r,className:"disabled-link",children:v.jsx("span",{children:"Reviews"})})}),v.jsx("li",{children:v.jsx("button",{onClick:r,className:"disabled-button",children:"Start Key Challenge"})})]}),v.jsx("li",{children:v.jsx(ax,{onLogout:i})})]})})}const dx=()=>{const{useFlats:t}=lf();return B.useEffect(()=>{xr.setAccidentalPreference(t)},[t]),null};function hx(){const t=Rt(),[e,n]=B.useState(!1);return B.useEffect(()=>{t(eD()).then(()=>n(!0))},[t]),B.useEffect(()=>{xr.setupMidi()},[]),v.jsx(v.Fragment,{children:v.jsx(JD,{children:v.jsx(qD,{children:v.jsxs(ZD,{children:[v.jsx(cx,{}),e&&v.jsx(vw,{}),v.jsx(KD,{}),v.jsx(dx,{})]})})})})}const Xd={},U1=[];function se(t,e){if(Array.isArray(t))for(const n of t)se(n,e);else if(typeof t!="object")H1(Object.getOwnPropertyNames(e)),Xd[t]=Object.assign(Xd[t]||{},e);else for(const n in t)se(n,t[n])}function _t(t){return Xd[t]||{}}function H1(t){U1.push(...t)}function W1(t,e){var n,i=t.length,r=[];for(n=0;n<i;n++)r.push(e(t[n]));return r}function Bc(t){return t%360*Math.PI/180}function Fa(t){return t.toLowerCase().replace(/-(.)/g,function(e,n){return n.toUpperCase()})}function X1(t){return t.charAt(0).toUpperCase()+t.slice(1)}function Ps(t,e,n,i){return e!=null&&n!=null||(i=i||t.bbox(),e==null?e=i.width/i.height*n:n==null&&(n=i.height/i.width*e)),{width:e,height:n}}function zd(t,e){const n=t.origin;let i,r;if(typeof n=="string"||n==null){const s=(n||"center").toLowerCase().trim(),{height:o,width:a,x:l,y:d}=e.bbox(),f=s.includes("left")?l:s.includes("right")?l+a:l+a/2,u=s.includes("top")?d:s.includes("bottom")?d+o:d+o/2;i=t.ox!=null?t.ox:f,r=t.oy!=null?t.oy:u}else i=n[0],r=n[1];return[i,r]}const hf="http://www.w3.org/2000/svg",Rg="http://www.w3.org/2000/xmlns/",ea="http://www.w3.org/1999/xlink",Ce={window:typeof window>"u"?null:window,document:typeof document>"u"?null:document};class ff{}const vs={},mf="___SYMBOL___ROOT___";function gf(t){return Ce.document.createElementNS(hf,t)}function zt(t){if(t instanceof ff)return t;if(typeof t=="object")return Tc(t);if(t==null)return new vs[mf];if(typeof t=="string"&&t.charAt(0)!=="<")return Tc(Ce.document.querySelector(t));var e=gf("svg");return e.innerHTML=t,t=Tc(e.firstChild)}function He(t,e){return e instanceof Ce.window.Node?e:gf(t)}function Nt(t){if(!t)return null;if(t.instance instanceof ff)return t.instance;var e=X1(t.nodeName||"Dom");return e==="LinearGradient"||e==="RadialGradient"?e="Gradient":vs[e]||(e="Dom"),new vs[e](t)}let Tc=Nt;function Ae(t,e=t.name,n=!1){return vs[e]=t,n&&(vs[mf]=t),H1(Object.getOwnPropertyNames(t.prototype)),t}let fx=1e3;function Ig(t){return"Svgjs"+X1(t)+fx++}function me(t,e,n){var i,r;for(r=(t=Array.isArray(t)?t:[t]).length-1;r>=0;r--)for(i in e){let s=e[i];n&&(s=Be(e[i])),t[r].prototype[i]=s}}function Be(t){return function(...e){const n=e[e.length-1];return!n||n.constructor!==Object||n instanceof Array?t.apply(this,e):t.apply(this,e.slice(0,-1)).attr(n)}}se("Dom",{siblings:function(){return this.parent().children()},position:function(){return this.parent().index(this)},next:function(){return this.siblings()[this.position()+1]},prev:function(){return this.siblings()[this.position()-1]},forward:function(){var t=this.position()+1,e=this.parent();return e.removeElement(this).add(this,t),typeof e.isRoot=="function"&&e.isRoot()&&e.node.appendChild(e.defs().node),this},backward:function(){var t=this.position();return t>0&&this.parent().removeElement(this).add(this,t-1),this},front:function(){var t=this.parent();return t.node.appendChild(this.node),typeof t.isRoot=="function"&&t.isRoot()&&t.node.appendChild(t.defs().node),this},back:function(){return this.position()>0&&this.parent().removeElement(this).add(this,0),this},before:function(t){(t=zt(t)).remove();var e=this.position();return this.parent().add(t,e),this},after:function(t){(t=zt(t)).remove();var e=this.position();return this.parent().add(t,e+1),this},insertBefore:function(t){return(t=zt(t)).before(this),this},insertAfter:function(t){return(t=zt(t)).after(this),this}});const z1=/^([+-]?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?)([a-z%]*)$/i,mx=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i,gx=/rgb\((\d+),(\d+),(\d+)\)/,Ex=/(#[a-z0-9\-_]+)/i,bx=/\)\s*,?\s*/,px=/\s/g,jg=/^#[a-f0-9]{3,6}$/i,Ug=/^rgb\(/,Hg=/^(\s+)?$/,Wg=/^[+-]?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,Sx=/\.(jpg|jpeg|png|gif|svg)(\?[^=]+.*)?/i,ci=/[\s,]+/,Ax=/([^e])-/gi,Y1=/[MLHVCSQTAZ]/gi,vx=/[MLHVCSQTAZ]/i,Cx=/((\d?\.\d+(?:e[+-]?\d+)?)((?:\.\d+(?:e[+-]?\d+)?)+))+/gi,wx=/\./g;se("Dom",{classes:function(){var t=this.attr("class");return t==null?[]:t.trim().split(ci)},hasClass:function(t){return this.classes().indexOf(t)!==-1},addClass:function(t){if(!this.hasClass(t)){var e=this.classes();e.push(t),this.attr("class",e.join(" "))}return this},removeClass:function(t){return this.hasClass(t)&&this.attr("class",this.classes().filter(function(e){return e!==t}).join(" ")),this},toggleClass:function(t){return this.hasClass(t)?this.removeClass(t):this.addClass(t)}}),se("Dom",{css:function(t,e){const n={};if(arguments.length===0)return this.node.style.cssText.split(/\s*;\s*/).filter(function(i){return!!i.length}).forEach(function(i){const r=i.split(/\s*:\s*/);n[r[0]]=r[1]}),n;if(arguments.length<2){if(Array.isArray(t)){for(const i of t){const r=Fa(i);n[r]=this.node.style[r]}return n}if(typeof t=="string")return this.node.style[Fa(t)];if(typeof t=="object")for(const i in t)this.node.style[Fa(i)]=t[i]==null||Hg.test(t[i])?"":t[i]}return arguments.length===2&&(this.node.style[Fa(t)]=e==null||Hg.test(e)?"":e),this},show:function(){return this.css("display","")},hide:function(){return this.css("display","none")},visible:function(){return this.css("display")!=="none"}}),se("Dom",{data:function(t,e,n){if(typeof t=="object")for(e in t)this.data(e,t[e]);else if(arguments.length<2)try{return JSON.parse(this.attr("data-"+t))}catch{return this.attr("data-"+t)}else this.attr("data-"+t,e===null?null:n===!0||typeof e=="string"||typeof e=="number"?e:JSON.stringify(e));return this}}),se("Dom",{remember:function(t,e){if(typeof arguments[0]=="object")for(var n in t)this.remember(n,t[n]);else{if(arguments.length===1)return this.memory()[t];this.memory()[t]=e}return this},forget:function(){if(arguments.length===0)this._memory={};else for(var t=arguments.length-1;t>=0;t--)delete this.memory()[arguments[t]];return this},memory:function(){return this._memory=this._memory||{}}});let Dx=0;const xx={};function V1(t){let e=t.getEventHolder();return e===Ce.window&&(e=xx),e.events||(e.events={}),e.events}function Ef(t){return t.getEventTarget()}function Lu(t,e,n,i,r){var s=n.bind(i||t),o=zt(t),a=V1(o),l=Ef(o);e=Array.isArray(e)?e:e.split(ci),n._svgjsListenerId||(n._svgjsListenerId=++Dx),e.forEach(function(d){var f=d.split(".")[0],u=d.split(".")[1]||"*";a[f]=a[f]||{},a[f][u]=a[f][u]||{},a[f][u][n._svgjsListenerId]=s,l.addEventListener(f,s,r||!1)})}function fr(t,e,n,i){var r=zt(t),s=V1(r),o=Ef(r);(typeof n!="function"||(n=n._svgjsListenerId))&&(e=Array.isArray(e)?e:(e||"").split(ci)).forEach(function(a){var l,d,f=a&&a.split(".")[0],u=a&&a.split(".")[1];if(n)s[f]&&s[f][u||"*"]&&(o.removeEventListener(f,s[f][u||"*"][n],i||!1),delete s[f][u||"*"][n]);else if(f&&u){if(s[f]&&s[f][u]){for(d in s[f][u])fr(o,[f,u].join("."),d);delete s[f][u]}}else if(u)for(a in s)for(l in s[a])u===l&&fr(o,[a,u].join("."));else if(f){if(s[f]){for(l in s[f])fr(o,[f,l].join("."));delete s[f]}}else{for(a in s)fr(o,a);(function(c){const h=c.getEventHolder();h.events&&(h.events={})})(r)}})}function Bx(t){const e=Math.round(t),n=Math.max(0,Math.min(255,e)).toString(16);return n.length===1?"0"+n:n}function jr(t,e){for(let n=e.length;n--;)if(t[e[n]]==null)return!1;return!0}function Nc(t,e,n){return n<0&&(n+=1),n>1&&(n-=1),n<1/6?t+6*(e-t)*n:n<.5?e:n<2/3?t+(e-t)*(2/3-n)*6:t}class Ne{constructor(...e){this.init(...e)}init(e=0,n=0,i=0,r=0,s="rgb"){if(e=e||0,this.space)for(const u in this.space)delete this[this.space[u]];if(typeof e=="number")s=typeof r=="string"?r:s,r=typeof r=="string"?0:r,Object.assign(this,{_a:e,_b:n,_c:i,_d:r,space:s});else if(e instanceof Array)this.space=n||(typeof e[3]=="string"?e[3]:e[4])||"rgb",Object.assign(this,{_a:e[0],_b:e[1],_c:e[2],_d:e[3]||0});else if(e instanceof Object){const u=function(c,h){const g=jr(c,"rgb")?{_a:c.r,_b:c.g,_c:c.b,space:"rgb"}:jr(c,"xyz")?{_a:c.x,_b:c.y,_c:c.z,_d:0,space:"xyz"}:jr(c,"hsl")?{_a:c.h,_b:c.s,_c:c.l,_d:0,space:"hsl"}:jr(c,"lab")?{_a:c.l,_b:c.a,_c:c.b,_d:0,space:"lab"}:jr(c,"lch")?{_a:c.l,_b:c.c,_c:c.h,_d:0,space:"lch"}:jr(c,"cmyk")?{_a:c.c,_b:c.m,_c:c.y,_d:c.k,space:"cmyk"}:{_a:0,_b:0,_c:0,space:"rgb"};return g.space=h||g.space,g}(e,n);Object.assign(this,u)}else if(typeof e=="string")if(Ug.test(e)){const u=e.replace(px,""),[c,h,g]=gx.exec(u).slice(1,4).map(E=>parseInt(E));Object.assign(this,{_a:c,_b:h,_c:g,_d:0,space:"rgb"})}else{if(!jg.test(e))throw Error("Unsupported string format, can't construct Color");{const u=E=>parseInt(E,16),[,c,h,g]=mx.exec(function(E){return E.length===4?["#",E.substring(1,2),E.substring(1,2),E.substring(2,3),E.substring(2,3),E.substring(3,4),E.substring(3,4)].join(""):E}(e)).map(u);Object.assign(this,{_a:c,_b:h,_c:g,_d:0,space:"rgb"})}}const{_a:o,_b:a,_c:l,_d:d}=this,f=this.space==="rgb"?{r:o,g:a,b:l}:this.space==="xyz"?{x:o,y:a,z:l}:this.space==="hsl"?{h:o,s:a,l}:this.space==="lab"?{l:o,a,b:l}:this.space==="lch"?{l:o,c:a,h:l}:this.space==="cmyk"?{c:o,m:a,y:l,k:d}:{};Object.assign(this,f)}rgb(){if(this.space==="rgb")return this;if((e=this.space)==="lab"||e==="xyz"||e==="lch"){let{x:n,y:i,z:r}=this;if(this.space==="lab"||this.space==="lch"){let{l:h,a:g,b:E}=this;if(this.space==="lch"){const{c:D,h:x}=this,F=Math.PI/180;g=D*Math.cos(F*x),E=D*Math.sin(F*x)}const p=(h+16)/116,m=g/500+p,b=p-E/200,A=16/116,S=.008856,w=7.787;n=.95047*(m**3>S?m**3:(m-A)/w),i=1*(p**3>S?p**3:(p-A)/w),r=1.08883*(b**3>S?b**3:(b-A)/w)}const s=3.2406*n+-1.5372*i+-.4986*r,o=-.9689*n+1.8758*i+.0415*r,a=.0557*n+-.204*i+1.057*r,l=Math.pow,d=.0031308,f=s>d?1.055*l(s,1/2.4)-.055:12.92*s,u=o>d?1.055*l(o,1/2.4)-.055:12.92*o,c=a>d?1.055*l(a,1/2.4)-.055:12.92*a;return new Ne(255*f,255*u,255*c)}if(this.space==="hsl"){let{h:n,s:i,l:r}=this;if(n/=360,i/=100,r/=100,i===0)return r*=255,new Ne(r,r,r);const s=r<.5?r*(1+i):r+i-r*i,o=2*r-s,a=255*Nc(o,s,n+1/3),l=255*Nc(o,s,n),d=255*Nc(o,s,n-1/3);return new Ne(a,l,d)}if(this.space==="cmyk"){const{c:n,m:i,y:r,k:s}=this,o=255*(1-Math.min(1,n*(1-s)+s)),a=255*(1-Math.min(1,i*(1-s)+s)),l=255*(1-Math.min(1,r*(1-s)+s));return new Ne(o,a,l)}return this;var e}lab(){const{x:e,y:n,z:i}=this.xyz();return new Ne(116*n-16,500*(e-n),200*(n-i),"lab")}xyz(){const{_a:e,_b:n,_c:i}=this.rgb(),[r,s,o]=[e,n,i].map(p=>p/255),a=r>.04045?Math.pow((r+.055)/1.055,2.4):r/12.92,l=s>.04045?Math.pow((s+.055)/1.055,2.4):s/12.92,d=o>.04045?Math.pow((o+.055)/1.055,2.4):o/12.92,f=(.4124*a+.3576*l+.1805*d)/.95047,u=(.2126*a+.7152*l+.0722*d)/1,c=(.0193*a+.1192*l+.9505*d)/1.08883,h=f>.008856?Math.pow(f,1/3):7.787*f+16/116,g=u>.008856?Math.pow(u,1/3):7.787*u+16/116,E=c>.008856?Math.pow(c,1/3):7.787*c+16/116;return new Ne(h,g,E,"xyz")}lch(){const{l:e,a:n,b:i}=this.lab(),r=Math.sqrt(n**2+i**2);let s=180*Math.atan2(i,n)/Math.PI;return s<0&&(s*=-1,s=360-s),new Ne(e,r,s,"lch")}hsl(){const{_a:e,_b:n,_c:i}=this.rgb(),[r,s,o]=[e,n,i].map(c=>c/255),a=Math.max(r,s,o),l=Math.min(r,s,o),d=(a+l)/2,f=a===l,u=a-l;return new Ne(360*(f?0:a===r?((s-o)/u+(s<o?6:0))/6:a===s?((o-r)/u+2)/6:a===o?((r-s)/u+4)/6:0),100*(f?0:d>.5?u/(2-a-l):u/(a+l)),100*d,"hsl")}cmyk(){const{_a:e,_b:n,_c:i}=this.rgb(),[r,s,o]=[e,n,i].map(l=>l/255),a=Math.min(1-r,1-s,1-o);return a===1?new Ne(0,0,0,1,"cmyk"):new Ne((1-r-a)/(1-a),(1-s-a)/(1-a),(1-o-a)/(1-a),a,"cmyk")}_clamped(){const{_a:e,_b:n,_c:i}=this.rgb(),{max:r,min:s,round:o}=Math;return[e,n,i].map(a=>r(0,s(o(a),255)))}toHex(){const[e,n,i]=this._clamped().map(Bx);return`#${e}${n}${i}`}toString(){return this.toHex()}toRgb(){const[e,n,i]=this._clamped();return`rgb(${e},${n},${i})`}toArray(){const{_a:e,_b:n,_c:i,_d:r,space:s}=this;return[e,n,i,r,s]}static random(e="vibrant",n,i){const{random:r,round:s,sin:o,PI:a}=Math;if(e==="vibrant"){const l=24*r()+57,d=38*r()+45,f=360*r();return new Ne(l,d,f,"lch")}if(e==="sine"){const l=s(80*o(2*a*(n=n??r())/.5+.01)+150),d=s(50*o(2*a*n/.5+4.6)+200),f=s(100*o(2*a*n/.5+2.3)+150);return new Ne(l,d,f)}if(e==="pastel"){const l=8*r()+86,d=17*r()+9,f=360*r();return new Ne(l,d,f,"lch")}if(e==="dark"){const l=10+10*r(),d=50*r()+86,f=360*r();return new Ne(l,d,f,"lch")}if(e==="rgb"){const l=255*r(),d=255*r(),f=255*r();return new Ne(l,d,f)}if(e==="lab"){const l=100*r(),d=256*r()-128,f=256*r()-128;return new Ne(l,d,f,"lab")}if(e==="grey"){const l=255*r();return new Ne(l,l,l)}}static test(e){return typeof e=="string"&&(jg.test(e)||Ug.test(e))}static isRgb(e){return e&&typeof e.r=="number"&&typeof e.g=="number"&&typeof e.b=="number"}static isColor(e){return e&&(e instanceof Ne||this.isRgb(e)||this.test(e))}}class it{constructor(...e){this.init(...e)}init(e,n){const s=Array.isArray(e)?{x:e[0],y:e[1]}:typeof e=="object"?{x:e.x,y:e.y}:{x:e,y:n};return this.x=s.x==null?0:s.x,this.y=s.y==null?0:s.y,this}clone(){return new it(this)}transform(e){return this.clone().transformO(e)}transformO(e){_.isMatrixLike(e)||(e=new _(e));const{x:n,y:i}=this;return this.x=e.a*n+e.c*i+e.e,this.y=e.b*n+e.d*i+e.f,this}toArray(){return[this.x,this.y]}}function Ur(t,e,n){return Math.abs(e-t)<(n||1e-6)}class _{constructor(...e){this.init(...e)}init(e){var n=_.fromArray([1,0,0,1,0,0]);return e=e instanceof si?e.matrixify():typeof e=="string"?_.fromArray(e.split(ci).map(parseFloat)):Array.isArray(e)?_.fromArray(e):typeof e=="object"&&_.isMatrixLike(e)?e:typeof e=="object"?new _().transform(e):arguments.length===6?_.fromArray([].slice.call(arguments)):n,this.a=e.a!=null?e.a:n.a,this.b=e.b!=null?e.b:n.b,this.c=e.c!=null?e.c:n.c,this.d=e.d!=null?e.d:n.d,this.e=e.e!=null?e.e:n.e,this.f=e.f!=null?e.f:n.f,this}clone(){return new _(this)}transform(e){if(_.isMatrixLike(e))return new _(e).multiplyO(this);var n=_.formatTransforms(e);const{x:i,y:r}=new it(n.ox,n.oy).transform(this);var s=new _().translateO(n.rx,n.ry).lmultiplyO(this).translateO(-i,-r).scaleO(n.scaleX,n.scaleY).skewO(n.skewX,n.skewY).shearO(n.shear).rotateO(n.theta).translateO(i,r);if(isFinite(n.px)||isFinite(n.py)){const o=new it(i,r).transform(s),a=n.px?n.px-o.x:0,l=n.py?n.py-o.y:0;s.translateO(a,l)}return s.translateO(n.tx,n.ty),s}compose(e){e.origin&&(e.originX=e.origin[0],e.originY=e.origin[1]);var n=e.originX||0,i=e.originY||0,r=e.scaleX||1,s=e.scaleY||1,o=e.shear||0,a=e.rotate||0,l=e.translateX||0,d=e.translateY||0;return new _().translateO(-n,-i).scaleO(r,s).shearO(o).rotateO(a).translateO(l,d).lmultiplyO(this).translateO(n,i)}decompose(e=0,n=0){var i=this.a,r=this.b,s=this.c,o=this.d,a=this.e,l=this.f,d=i*o-r*s,f=d>0?1:-1,u=f*Math.sqrt(i*i+r*r),c=Math.atan2(f*r,f*i),h=180/Math.PI*c,g=Math.cos(c),E=Math.sin(c),p=(i*s+r*o)/d,m=s*u/(p*i-r)||o*u/(p*r+i);return{scaleX:u,scaleY:m,shear:p,rotate:h,translateX:a-e+e*g*u+n*(p*g*u-E*m),translateY:l-n+e*E*u+n*(p*E*u+g*m),originX:e,originY:n,a:this.a,b:this.b,c:this.c,d:this.d,e:this.e,f:this.f}}multiply(e){return this.clone().multiplyO(e)}multiplyO(e){var n=e instanceof _?e:new _(e);return _.matrixMultiply(this,n,this)}lmultiply(e){return this.clone().lmultiplyO(e)}lmultiplyO(e){var n=e instanceof _?e:new _(e);return _.matrixMultiply(n,this,this)}inverseO(){var e=this.a,n=this.b,i=this.c,r=this.d,s=this.e,o=this.f,a=e*r-n*i;if(!a)throw new Error("Cannot invert "+this);var l=r/a,d=-n/a,f=-i/a,u=e/a,c=-(l*s+f*o),h=-(d*s+u*o);return this.a=l,this.b=d,this.c=f,this.d=u,this.e=c,this.f=h,this}inverse(){return this.clone().inverseO()}translate(e,n){return this.clone().translateO(e,n)}translateO(e,n){return this.e+=e||0,this.f+=n||0,this}scale(e,n,i,r){return this.clone().scaleO(...arguments)}scaleO(e,n=e,i=0,r=0){arguments.length===3&&(r=i,i=n,n=e);const{a:s,b:o,c:a,d:l,e:d,f}=this;return this.a=s*e,this.b=o*n,this.c=a*e,this.d=l*n,this.e=d*e-i*e+i,this.f=f*n-r*n+r,this}rotate(e,n,i){return this.clone().rotateO(e,n,i)}rotateO(e,n=0,i=0){e=Bc(e);const r=Math.cos(e),s=Math.sin(e),{a:o,b:a,c:l,d,e:f,f:u}=this;return this.a=o*r-a*s,this.b=a*r+o*s,this.c=l*r-d*s,this.d=d*r+l*s,this.e=f*r-u*s+i*s-n*r+n,this.f=u*r+f*s-n*s-i*r+i,this}flip(e,n){return this.clone().flipO(e,n)}flipO(e,n){return e==="x"?this.scaleO(-1,1,n,0):e==="y"?this.scaleO(1,-1,0,n):this.scaleO(-1,-1,e,n||e)}shear(e,n,i){return this.clone().shearO(e,n,i)}shearO(e,n=0,i=0){const{a:r,b:s,c:o,d:a,e:l,f:d}=this;return this.a=r+s*e,this.c=o+a*e,this.e=l+d*e-i*e,this}skew(e,n,i,r){return this.clone().skewO(...arguments)}skewO(e,n=e,i=0,r=0){arguments.length===3&&(r=i,i=n,n=e),e=Bc(e),n=Bc(n);const s=Math.tan(e),o=Math.tan(n),{a,b:l,c:d,d:f,e:u,f:c}=this;return this.a=a+l*s,this.b=l+a*o,this.c=d+f*s,this.d=f+d*o,this.e=u+c*s-r*s,this.f=c+u*o-i*o,this}skewX(e,n,i){return this.skew(e,0,n,i)}skewXO(e,n,i){return this.skewO(e,0,n,i)}skewY(e,n,i){return this.skew(0,e,n,i)}skewYO(e,n,i){return this.skewO(0,e,n,i)}aroundO(e,n,i){var r=e||0,s=n||0;return this.translateO(-r,-s).lmultiplyO(i).translateO(r,s)}around(e,n,i){return this.clone().aroundO(e,n,i)}equals(e){var n=new _(e);return Ur(this.a,n.a)&&Ur(this.b,n.b)&&Ur(this.c,n.c)&&Ur(this.d,n.d)&&Ur(this.e,n.e)&&Ur(this.f,n.f)}toString(){return"matrix("+this.a+","+this.b+","+this.c+","+this.d+","+this.e+","+this.f+")"}toArray(){return[this.a,this.b,this.c,this.d,this.e,this.f]}valueOf(){return{a:this.a,b:this.b,c:this.c,d:this.d,e:this.e,f:this.f}}static fromArray(e){return{a:e[0],b:e[1],c:e[2],d:e[3],e:e[4],f:e[5]}}static isMatrixLike(e){return e.a!=null||e.b!=null||e.c!=null||e.d!=null||e.e!=null||e.f!=null}static formatTransforms(e){var n=e.flip==="both"||e.flip===!0,i=e.flip&&(n||e.flip==="x")?-1:1,r=e.flip&&(n||e.flip==="y")?-1:1,s=e.skew&&e.skew.length?e.skew[0]:isFinite(e.skew)?e.skew:isFinite(e.skewX)?e.skewX:0,o=e.skew&&e.skew.length?e.skew[1]:isFinite(e.skew)?e.skew:isFinite(e.skewY)?e.skewY:0,a=e.scale&&e.scale.length?e.scale[0]*i:isFinite(e.scale)?e.scale*i:isFinite(e.scaleX)?e.scaleX*i:i,l=e.scale&&e.scale.length?e.scale[1]*r:isFinite(e.scale)?e.scale*r:isFinite(e.scaleY)?e.scaleY*r:r,d=e.shear||0,f=e.rotate||e.theta||0,u=new it(e.origin||e.around||e.ox||e.originX,e.oy||e.originY),c=u.x,h=u.y,g=new it(e.position||e.px||e.positionX,e.py||e.positionY),E=g.x,p=g.y,m=new it(e.translate||e.tx||e.translateX,e.ty||e.translateY),b=m.x,A=m.y,S=new it(e.relative||e.rx||e.relativeX,e.ry||e.relativeY);return{scaleX:a,scaleY:l,skewX:s,skewY:o,shear:d,theta:f,rx:S.x,ry:S.y,tx:b,ty:A,ox:c,oy:h,px:E,py:p}}static matrixMultiply(e,n,i){var r=e.a*n.a+e.c*n.b,s=e.b*n.a+e.d*n.b,o=e.a*n.c+e.c*n.d,a=e.b*n.c+e.d*n.d,l=e.e+e.a*n.e+e.c*n.f,d=e.f+e.b*n.e+e.d*n.f;return i.a=r,i.b=s,i.c=o,i.d=a,i.e=l,i.f=d,i}}function Ri(){if(!Ri.nodes){const t=zt().size(2,0);t.node.style.cssText=["opacity: 0","position: absolute","left: -100%","top: -100%","overflow: hidden"].join(";"),t.attr("focusable","false"),t.attr("aria-hidden","true");const e=t.path().node;Ri.nodes={svg:t,path:e}}if(!Ri.nodes.svg.node.parentNode){const t=Ce.document.body||Ce.document.documentElement;Ri.nodes.svg.addTo(t)}return Ri.nodes}function q1(t){return!(t.width||t.height||t.x||t.y)}Ae(_,"Matrix");class nn{constructor(...e){this.init(...e)}init(e){return e=typeof e=="string"?e.split(ci).map(parseFloat):Array.isArray(e)?e:typeof e=="object"?[e.left!=null?e.left:e.x,e.top!=null?e.top:e.y,e.width,e.height]:arguments.length===4?[].slice.call(arguments):[0,0,0,0],this.x=e[0]||0,this.y=e[1]||0,this.width=this.w=e[2]||0,this.height=this.h=e[3]||0,this.x2=this.x+this.w,this.y2=this.y+this.h,this.cx=this.x+this.w/2,this.cy=this.y+this.h/2,this}merge(e){const n=Math.min(this.x,e.x),i=Math.min(this.y,e.y),r=Math.max(this.x+this.width,e.x+e.width)-n,s=Math.max(this.y+this.height,e.y+e.height)-i;return new nn(n,i,r,s)}transform(e){e instanceof _||(e=new _(e));let n=1/0,i=-1/0,r=1/0,s=-1/0;return[new it(this.x,this.y),new it(this.x2,this.y),new it(this.x,this.y2),new it(this.x2,this.y2)].forEach(function(o){o=o.transform(e),n=Math.min(n,o.x),i=Math.max(i,o.x),r=Math.min(r,o.y),s=Math.max(s,o.y)}),new nn(n,r,i-n,s-r)}addOffset(){return this.x+=Ce.window.pageXOffset,this.y+=Ce.window.pageYOffset,this}toString(){return this.x+" "+this.y+" "+this.width+" "+this.height}toArray(){return[this.x,this.y,this.width,this.height]}isNulled(){return q1(this)}}function Xg(t,e){let n;try{if(n=t(this.node),q1(n)&&(i=this.node)!==Ce.document&&!(Ce.document.documentElement.contains||function(r){for(;r.parentNode;)r=r.parentNode;return r===Ce.document}).call(Ce.document.documentElement,i))throw new Error("Element not in the dom")}catch{n=e(this)}var i;return n}se({viewbox:{viewbox(t,e,n,i){return t==null?new nn(this.attr("viewBox")):this.attr("viewBox",new nn(t,e,n,i))},zoom(t,e){let n=this.node.clientWidth,i=this.node.clientHeight;const r=this.viewbox();if(!n&&!i){var s=window.getComputedStyle(this.node);n=parseFloat(s.getPropertyValue("width")),i=parseFloat(s.getPropertyValue("height"))}const o=n/r.width,a=i/r.height,l=Math.min(o,a);if(t==null)return l;let d=l/t;d===1/0&&(d=Number.MIN_VALUE),e=e||new it(n/2/o+r.x,i/2/a+r.y);const f=new nn(r).transform(new _({scale:d,origin:e}));return this.viewbox(f)}}}),Ae(nn,"Box");const Tl=function(){try{return Function("name","baseClass","_constructor",["baseClass = baseClass || Array","return {","  [name]: class extends baseClass {","    constructor (...args) {","      super(...args)","      _constructor && _constructor.apply(this, args)","    }","  }","}[name]"].join(`
`))}catch{return(e,n=Array,i)=>{const r=function(){n.apply(this,arguments),i&&i.apply(this,arguments)};return(r.prototype=Object.create(n.prototype)).constructor=r,r.prototype.map=function(s){const o=new r;return o.push.apply(o,Array.prototype.map.call(this,s)),o},r}}}(),Br=Tl("List",Array,function(t=[]){if(typeof t=="number")return this;this.length=0,this.push(...t)});me(Br,{each(t,...e){return typeof t=="function"?this.map(n=>t.call(n,n)):this.map(n=>n[t](...e))},toArray(){return Array.prototype.concat.apply([],this)}});const Tx=["toArray","constructor","each"];function Lr(t,e){return new Br(W1((e||Ce.document).querySelectorAll(t),function(n){return Nt(n)}))}Br.extend=function(t){t=t.reduce((e,n)=>(Tx.includes(n)||n[0]==="_"||(e[n]=function(...i){return this.each(n,...i)}),e),{}),me(Br,t)};class ta extends ff{constructor({events:e={}}={}){super(),this.events=e}addEventListener(){}dispatch(e,n){return function(i,r,s){var o=Ef(i);return r instanceof Ce.window.Event||(r=new Ce.window.CustomEvent(r,{detail:s,cancelable:!0})),o.dispatchEvent(r),r}(this,e,n)}dispatchEvent(e){const n=this.getEventHolder().events;if(!n)return!0;const i=n[e.type];for(const r in i)for(const s in i[r])i[r][s](e);return!e.defaultPrevented}fire(e,n){return this.dispatch(e,n),this}getEventHolder(){return this}getEventTarget(){return this}off(e,n){return fr(this,e,n),this}on(e,n,i,r){return Lu(this,e,n,i,r),this}removeEventListener(){}}function zg(){}Ae(ta,"EventTarget");const Fc=400,Nx=">",Fx=0,Mx={"fill-opacity":1,"stroke-opacity":1,"stroke-width":0,"stroke-linejoin":"miter","stroke-linecap":"butt",fill:"#000000",stroke:"#000000",opacity:1,x:0,y:0,cx:0,cy:0,width:0,height:0,r:0,rx:0,ry:0,offset:0,"stop-opacity":1,"stop-color":"#000000","text-anchor":"start"},Tr=Tl("SVGArray",Array,function(t){this.init(t)});me(Tr,{init(t){return typeof t=="number"||(this.length=0,this.push(...this.parse(t))),this},toArray(){return Array.prototype.concat.apply([],this)},toString(){return this.join(" ")},valueOf(){const t=[];return t.push(...this),t},parse:(t=[])=>t instanceof Array?t:t.trim().split(ci).map(parseFloat),clone(){return new this.constructor(this)},toSet(){return new Set(this)}});class te{constructor(...e){this.init(...e)}init(e,n){return n=Array.isArray(e)?e[1]:n,e=Array.isArray(e)?e[0]:e,this.value=0,this.unit=n||"",typeof e=="number"?this.value=isNaN(e)?0:isFinite(e)?e:e<0?-34e37:34e37:typeof e=="string"?(n=e.match(z1))&&(this.value=parseFloat(n[1]),n[5]==="%"?this.value/=100:n[5]==="s"&&(this.value*=1e3),this.unit=n[5]):e instanceof te&&(this.value=e.valueOf(),this.unit=e.unit),this}toString(){return(this.unit==="%"?~~(1e8*this.value)/1e6:this.unit==="s"?this.value/1e3:this.value)+this.unit}toJSON(){return this.toString()}toArray(){return[this.value,this.unit]}valueOf(){return this.value}plus(e){return e=new te(e),new te(this+e,this.unit||e.unit)}minus(e){return e=new te(e),new te(this-e,this.unit||e.unit)}times(e){return e=new te(e),new te(this*e,this.unit||e.unit)}divide(e){return e=new te(e),new te(this/e,this.unit||e.unit)}convert(e){return new te(this.value,e)}}const J1=[];class Cs extends ta{constructor(e,n){super(e),this.node=e,this.type=e.nodeName,n&&e!==n&&this.attr(n)}add(e,n){return e=zt(e),n==null?this.node.appendChild(e.node):e.node!==this.node.childNodes[n]&&this.node.insertBefore(e.node,this.node.childNodes[n]),this}addTo(e){return zt(e).put(this)}children(){return new Br(W1(this.node.children,function(e){return Nt(e)}))}clear(){for(;this.node.hasChildNodes();)this.node.removeChild(this.node.lastChild);return this}clone(){return this.writeDataToDom(),function e(n){for(var i=n.children.length-1;i>=0;i--)e(n.children[i]);return n.id?Nt(n).id(Ig(n.nodeName)):Nt(n)}(this.node.cloneNode(!0))}each(e,n){var i,r,s=this.children();for(i=0,r=s.length;i<r;i++)e.apply(s[i],[i,s]),n&&s[i].each(e,n);return this}element(e){return this.put(new Cs(gf(e)))}first(){return Nt(this.node.firstChild)}get(e){return Nt(this.node.childNodes[e])}getEventHolder(){return this.node}getEventTarget(){return this.node}has(e){return this.index(e)>=0}id(e){return e!==void 0||this.node.id||(this.node.id=Ig(this.type)),this.attr("id",e)}index(e){return[].slice.call(this.node.childNodes).indexOf(e.node)}last(){return Nt(this.node.lastChild)}matches(e){const n=this.node;return(n.matches||n.matchesSelector||n.msMatchesSelector||n.mozMatchesSelector||n.webkitMatchesSelector||n.oMatchesSelector).call(n,e)}parent(e){var n=this;if(!n.node.parentNode)return null;if(n=Nt(n.node.parentNode),!e)return n;for(;n;){if(typeof e=="string"?n.matches(e):n instanceof e)return n;if(!n.node.parentNode||n.node.parentNode.nodeName==="#document"||n.node.parentNode.nodeName==="#document-fragment")return null;n=Nt(n.node.parentNode)}}put(e,n){return this.add(e,n),e}putIn(e){return zt(e).add(this)}remove(){return this.parent()&&this.parent().removeElement(this),this}removeElement(e){return this.node.removeChild(e.node),this}replace(e){return e=zt(e),this.node.parentNode.replaceChild(e.node,this.node),e}round(e=2,n){const i=10**e,r=this.attr();n||(n=Object.keys(r));const s={};return n.forEach(o=>{s[o]=Math.round(r[o]*i)/i}),this.attr(s),this}toString(){return this.id()}svg(e,n){var i,r,s;if(e===!1&&(n=!1,e=null),e==null||typeof e=="function"){n=n==null||n,this.writeDataToDom();let a=this;if(e!=null){if(a=Nt(a.node.cloneNode(!0)),n){const l=e(a);if(a=l||a,l===!1)return""}a.each(function(){const l=e(this),d=l||this;l===!1?this.remove():l&&this!==d&&this.replace(d)},!0)}return n?a.node.outerHTML:a.node.innerHTML}for(n=n!=null&&n,i=Ce.document.createElementNS(hf,"svg"),s=Ce.document.createDocumentFragment(),i.innerHTML=e,r=i.children.length;r--;)s.appendChild(i.firstElementChild);const o=this.parent();return n?this.replace(s)&&o:this.add(s)}words(e){return this.node.textContent=e,this}writeDataToDom(){return this.each(function(){this.writeDataToDom()}),this}}me(Cs,{attr:function(t,e,n){if(t==null){t={},e=this.node.attributes;for(const i of e)t[i.nodeName]=Wg.test(i.nodeValue)?parseFloat(i.nodeValue):i.nodeValue;return t}if(t instanceof Array)return t.reduce((i,r)=>(i[r]=this.attr(r),i),{});if(typeof t=="object"&&t.constructor===Object)for(e in t)this.attr(e,t[e]);else if(e===null)this.node.removeAttribute(t);else{if(e==null)return(e=this.node.getAttribute(t))==null?Mx[t]:Wg.test(e)?parseFloat(e):e;typeof(e=J1.reduce((i,r)=>r(t,i,this),e))=="number"?e=new te(e):Ne.isColor(e)?e=new Ne(e):e.constructor===Array&&(e=new Tr(e)),t==="leading"?this.leading&&this.leading(e):typeof n=="string"?this.node.setAttributeNS(n,t,e.toString()):this.node.setAttribute(t,e.toString()),!this.rebuild||t!=="font-size"&&t!=="x"||this.rebuild()}return this},find:function(t){return Lr(t,this.node)},findOne:function(t){return Nt(this.node.querySelector(t))}}),Ae(Cs,"Dom");class si extends Cs{constructor(e,n){super(e,n),this.dom={},this.node.instance=this,e.hasAttribute("svgjs:data")&&this.setData(JSON.parse(e.getAttribute("svgjs:data"))||{})}center(e,n){return this.cx(e).cy(n)}cx(e){return e==null?this.x()+this.width()/2:this.x(e-this.width()/2)}cy(e){return e==null?this.y()+this.height()/2:this.y(e-this.height()/2)}defs(){return this.root().defs()}dmove(e,n){return this.dx(e).dy(n)}dx(e=0){return this.x(new te(e).plus(this.x()))}dy(e=0){return this.y(new te(e).plus(this.y()))}root(){const e=this.parent(vs[mf]);return e&&e.root()}getEventHolder(){return this}height(e){return this.attr("height",e)}inside(e,n){const i=this.bbox();return e>i.x&&n>i.y&&e<i.x+i.width&&n<i.y+i.height}move(e,n){return this.x(e).y(n)}parents(e=Ce.document){e=zt(e);const n=new Br;let i=this;for(;(i=i.parent())&&i.node!==e.node&&i.node!==Ce.document;)n.push(i);return n}reference(e){if(!(e=this.attr(e)))return null;const n=e.match(Ex);return n?zt(n[1]):null}setData(e){return this.dom=e,this}size(e,n){const i=Ps(this,e,n);return this.width(new te(i.width)).height(new te(i.height))}width(e){return this.attr("width",e)}writeDataToDom(){return this.node.removeAttribute("svgjs:data"),Object.keys(this.dom).length&&this.node.setAttribute("svgjs:data",JSON.stringify(this.dom)),super.writeDataToDom()}x(e){return this.attr("x",e)}y(e){return this.attr("y",e)}}me(si,{bbox:function(){return new nn(Xg.call(this,t=>t.getBBox(),t=>{try{const e=t.clone().addTo(Ri().svg).show(),n=e.node.getBBox();return e.remove(),n}catch(e){throw new Error('Getting bbox of element "'+t.node.nodeName+'" is not possible. '+e.toString())}}))},rbox:function(t){const e=new nn(Xg.call(this,n=>n.getBoundingClientRect(),n=>{throw new Error('Getting rbox of element "'+n.node.nodeName+'" is not possible')}));return t?e.transform(t.screenCTM().inverse()):e.addOffset()},point:function(t,e){return new it(t,e).transform(this.screenCTM().inverse())},ctm:function(){return new _(this.node.getCTM())},screenCTM:function(){if(typeof this.isRoot=="function"&&!this.isRoot()){var t=this.rect(1,1),e=t.node.getScreenCTM();return t.remove(),new _(e)}return new _(this.node.getScreenCTM())}}),Ae(si,"Element");var to={stroke:["color","width","opacity","linecap","linejoin","miterlimit","dasharray","dashoffset"],fill:["color","opacity","rule"],prefix:function(t,e){return e==="color"?t:t+"-"+e}};function bf(t){return this.attr("rx",t)}function pf(t){return this.attr("ry",t)}function Z1(t){return t==null?this.cx()-this.rx():this.cx(t+this.rx())}function K1(t){return t==null?this.cy()-this.ry():this.cy(t+this.ry())}function Q1(t){return t==null?this.attr("cx"):this.attr("cx",t)}function G1(t){return t==null?this.attr("cy"):this.attr("cy",t)}function _1(t){return t==null?2*this.rx():this.rx(new te(t).divide(2))}function $1(t){return t==null?2*this.ry():this.ry(new te(t).divide(2))}["fill","stroke"].forEach(function(t){var e,n={};n[t]=function(i){if(i===void 0)return this.attr(t);if(typeof i=="string"||i instanceof Ne||Ne.isRgb(i)||i instanceof si)this.attr(t,i);else for(e=to[t].length-1;e>=0;e--)i[to[t][e]]!=null&&this.attr(to.prefix(t,to[t][e]),i[to[t][e]]);return this},se(["Element","Runner"],n)}),se(["Element","Runner"],{matrix:function(t,e,n,i,r,s){return t==null?new _(this):this.attr("transform",new _(t,e,n,i,r,s))},rotate:function(t,e,n){return this.transform({rotate:t,ox:e,oy:n},!0)},skew:function(t,e,n,i){return arguments.length===1||arguments.length===3?this.transform({skew:t,ox:e,oy:n},!0):this.transform({skew:[t,e],ox:n,oy:i},!0)},shear:function(t,e,n){return this.transform({shear:t,ox:e,oy:n},!0)},scale:function(t,e,n,i){return arguments.length===1||arguments.length===3?this.transform({scale:t,ox:e,oy:n},!0):this.transform({scale:[t,e],ox:n,oy:i},!0)},translate:function(t,e){return this.transform({translate:[t,e]},!0)},relative:function(t,e){return this.transform({relative:[t,e]},!0)},flip:function(t,e){var n=typeof t=="string"?t:"both",i=t==="both"&&isFinite(e)?[e,e]:t==="x"?[e,0]:t==="y"?[0,e]:isFinite(t)?[t,t]:[0,0];return this.transform({flip:n,origin:i},!0)},opacity:function(t){return this.attr("opacity",t)}}),se("radius",{radius:function(t,e){var n=(this._element||this).type;return n==="radialGradient"||n==="radialGradient"?this.attr("r",new te(t)):this.rx(t).ry(e??t)}}),se("Path",{length:function(){return this.node.getTotalLength()},pointAt:function(t){return new it(this.node.getPointAtLength(t))}}),se(["Element","Runner"],{font:function(t,e){if(typeof t=="object"){for(e in t)this.font(e,t[e]);return this}return t==="leading"?this.leading(e):t==="anchor"?this.attr("text-anchor",e):t==="size"||t==="family"||t==="weight"||t==="stretch"||t==="variant"||t==="style"?this.attr("font-"+t,e):this.attr(t,e)}}),se("Text",{ax(t){return this.attr("x",t)},ay(t){return this.attr("y",t)},amove(t,e){return this.ax(t).ay(e)}}),se("Element",["click","dblclick","mousedown","mouseup","mouseover","mouseout","mousemove","mouseenter","mouseleave","touchstart","touchmove","touchleave","touchend","touchcancel"].reduce(function(t,e){return t[e]=function(n){return n===null?fr(this,e):Lu(this,e,n),this},t},{})),se("Element",{untransform:function(){return this.attr("transform",null)},matrixify:function(){return(this.attr("transform")||"").split(bx).slice(0,-1).map(function(t){var e=t.trim().split("(");return[e[0],e[1].split(ci).map(function(n){return parseFloat(n)})]}).reverse().reduce(function(t,e){return e[0]==="matrix"?t.lmultiply(_.fromArray(e[1])):t[e[0]].apply(t,e[1])},new _)},toParent:function(t){if(this===t)return this;var e=this.screenCTM(),n=t.screenCTM().inverse();return this.addTo(t).untransform().transform(n.multiply(e)),this},toRoot:function(){return this.toParent(this.root())},transform:function(t,e){if(t==null||typeof t=="string"){var n=new _(this).decompose();return t==null?n:n[t]}_.isMatrixLike(t)||(t={...t,origin:zd(t,this)});var i=new _(e===!0?this:e||!1).transform(t);return this.attr("transform",i)}});var Yg,Px=Object.freeze({__proto__:null,rx:bf,ry:pf,x:Z1,y:K1,cx:Q1,cy:G1,width:_1,height:$1});class Nn extends si{}Ae(Nn,"Shape");class Qa extends Nn{constructor(e){super(He("circle",e),e)}radius(e){return this.attr("r",e)}rx(e){return this.attr("r",e)}ry(e){return this.rx(e)}size(e){return this.radius(new te(e).divide(2))}}me(Qa,{x:Z1,y:K1,cx:Q1,cy:G1,width:_1,height:$1}),se({Container:{circle:Be(function(t){return this.put(new Qa).size(t).move(0,0)})}}),Ae(Qa,"Circle");class Kt extends si{flatten(e){return this.each(function(){return this instanceof Kt?this.flatten(e).ungroup(e):this.toParent(e)}),this.node.firstElementChild||this.remove(),this}ungroup(e){return e=e||this.parent(),this.each(function(){return this.toParent(e)}),this.remove(),this}}Ae(Kt,"Container");class Sf extends Kt{constructor(e){super(He("defs",e),e)}flatten(){return this}ungroup(){return this}}Ae(Sf,"Defs");class Ga extends Nn{constructor(e){super(He("ellipse",e),e)}size(e,n){var i=Ps(this,e,n);return this.rx(new te(i.width).divide(2)).ry(new te(i.height).divide(2))}}me(Ga,Px),se("Container",{ellipse:Be(function(t=0,e=t){return this.put(new Ga).size(t,e).move(0,0)})}),Ae(Ga,"Ellipse");class eS extends si{constructor(e){super(He("stop",e),e)}update(e){return(typeof e=="number"||e instanceof te)&&(e={offset:arguments[0],color:arguments[1],opacity:arguments[2]}),e.opacity!=null&&this.attr("stop-opacity",e.opacity),e.color!=null&&this.attr("stop-color",e.color),e.offset!=null&&this.attr("offset",new te(e.offset)),this}}function tS(t,e){return(this._element||this).type==="radialGradient"?this.attr({fx:new te(t),fy:new te(e)}):this.attr({x1:new te(t),y1:new te(e)})}function Yd(t,e){return(this._element||this).type==="radialGradient"?this.attr({cx:new te(t),cy:new te(e)}):this.attr({x2:new te(t),y2:new te(e)})}Ae(eS,"Stop");class _a extends Kt{constructor(e,n){super(He(e+"Gradient",typeof e=="string"?null:e),n)}stop(e,n,i){return this.put(new eS).update(e,n,i)}update(e){return this.clear(),typeof e=="function"&&e.call(this,this),this}url(){return"url(#"+this.id()+")"}toString(){return this.url()}attr(e,n,i){return e==="transform"&&(e="gradientTransform"),super.attr(e,n,i)}targets(){return Lr('svg [fill*="'+this.id()+'"]')}bbox(){return new nn}}me(_a,Object.freeze({__proto__:null,from:tS,to:Yd})),se({Container:{gradient:Be(function(t,e){return this.defs().gradient(t,e)})},Defs:{gradient:Be(function(t,e){return this.put(new _a(t)).update(e)})}}),Ae(_a,"Gradient");class Vo extends Kt{constructor(e){super(He("pattern",e),e)}url(){return"url(#"+this.id()+")"}update(e){return this.clear(),typeof e=="function"&&e.call(this,this),this}toString(){return this.url()}attr(e,n,i){return e==="transform"&&(e="patternTransform"),super.attr(e,n,i)}targets(){return Lr('svg [fill*="'+this.id()+'"]')}bbox(){return new nn}}se({Container:{pattern(...t){return this.defs().pattern(...t)}},Defs:{pattern:Be(function(t,e,n){return this.put(new Vo).update(n).attr({x:0,y:0,width:t,height:e,patternUnits:"userSpaceOnUse"})})}}),Ae(Vo,"Pattern");class $a extends Nn{constructor(e){super(He("image",e),e)}load(e,n){if(!e)return this;var i=new Ce.window.Image;return Lu(i,"load",function(r){var s=this.parent(Vo);this.width()===0&&this.height()===0&&this.size(i.width,i.height),s instanceof Vo&&s.width()===0&&s.height()===0&&s.size(this.width(),this.height()),typeof n=="function"&&n.call(this,r)},this),Lu(i,"load error",function(){fr(i)}),this.attr("href",i.src=e,ea)}}Yg=function(t,e,n){return t!=="fill"&&t!=="stroke"||Sx.test(e)&&(e=n.root().defs().image(e)),e instanceof $a&&(e=n.root().defs().pattern(0,0,i=>{i.add(e)})),e},J1.push(Yg),se({Container:{image:Be(function(t,e){return this.put(new $a).size(0,0).load(t,e)})}}),Ae($a,"Image");const qn=Tl("PointArray",Tr);me(qn,{toString(){for(var t=0,e=this.length,n=[];t<e;t++)n.push(this[t].join(","));return n.join(" ")},toLine(){return{x1:this[0][0],y1:this[0][1],x2:this[1][0],y2:this[1][1]}},at(t){if(!this.destination)return this;for(var e=0,n=this.length,i=[];e<n;e++)i.push([this[e][0]+(this.destination[e][0]-this[e][0])*t,this[e][1]+(this.destination[e][1]-this[e][1])*t]);return new qn(i)},parse(t=[[0,0]]){var e=[];if(t instanceof Array){if(t[0]instanceof Array)return t}else t=t.trim().split(ci).map(parseFloat);t.length%2!=0&&t.pop();for(var n=0,i=t.length;n<i;n+=2)e.push([t[n],t[n+1]]);return e},transform(t){const e=[];for(let n=0;n<this.length;n++){const i=this[n];e.push([t.a*i[0]+t.c*i[1]+t.e,t.b*i[0]+t.d*i[1]+t.f])}return new qn(e)},move(t,e){var n=this.bbox();if(t-=n.x,e-=n.y,!isNaN(t)&&!isNaN(e))for(var i=this.length-1;i>=0;i--)this[i]=[this[i][0]+t,this[i][1]+e];return this},size(t,e){var n,i=this.bbox();for(n=this.length-1;n>=0;n--)i.width&&(this[n][0]=(this[n][0]-i.x)*t/i.width+i.x),i.height&&(this[n][1]=(this[n][1]-i.y)*e/i.height+i.y);return this},bbox(){var t=-1/0,e=-1/0,n=1/0,i=1/0;return this.forEach(function(r){t=Math.max(r[0],t),e=Math.max(r[1],e),n=Math.min(r[0],n),i=Math.min(r[1],i)}),{x:n,y:i,width:t-n,height:e-i}}});const kx=qn;var Af=Object.freeze({__proto__:null,MorphArray:kx,x:function(t){return t==null?this.bbox().x:this.move(t,this.bbox().y)},y:function(t){return t==null?this.bbox().y:this.move(this.bbox().x,t)},width:function(t){const e=this.bbox();return t==null?e.width:this.size(t,e.height)},height:function(t){const e=this.bbox();return t==null?e.height:this.size(e.width,t)}});class oo extends Nn{constructor(e){super(He("line",e),e)}array(){return new qn([[this.attr("x1"),this.attr("y1")],[this.attr("x2"),this.attr("y2")]])}plot(e,n,i,r){return e==null?this.array():(e=n!==void 0?{x1:e,y1:n,x2:i,y2:r}:new qn(e).toLine(),this.attr(e))}move(e,n){return this.attr(this.array().move(e,n).toLine())}size(e,n){var i=Ps(this,e,n);return this.attr(this.array().size(i.width,i.height).toLine())}}me(oo,Af),se({Container:{line:Be(function(...t){return oo.prototype.plot.apply(this.put(new oo),t[0]!=null?t:[0,0,0,0])})}}),Ae(oo,"Line");class eu extends Kt{constructor(e){super(He("marker",e),e)}width(e){return this.attr("markerWidth",e)}height(e){return this.attr("markerHeight",e)}ref(e,n){return this.attr("refX",e).attr("refY",n)}update(e){return this.clear(),typeof e=="function"&&e.call(this,this),this}toString(){return"url(#"+this.id()+")"}}function es(t,e){return function(n){return n==null?this[n]:(this[t]=n,e&&e.call(this),this)}}se({Container:{marker(...t){return this.defs().marker(...t)}},Defs:{marker:Be(function(t,e,n){return this.put(new eu).size(t,e).ref(t/2,e/2).viewbox(0,0,t,e).attr("orient","auto").update(n)})},marker:{marker(t,e,n,i){var r=["marker"];return t!=="all"&&r.push(t),r=r.join("-"),t=arguments[1]instanceof eu?arguments[1]:this.defs().marker(e,n,i),this.attr(r,t)}}}),Ae(eu,"Marker");const Lx={"-":function(t){return t},"<>":function(t){return-Math.cos(t*Math.PI)/2+.5},">":function(t){return Math.sin(t*Math.PI/2)},"<":function(t){return 1-Math.cos(t*Math.PI/2)},bezier:function(t,e,n,i){return function(r){return r<0?t>0?e/t*r:n>0?i/n*r:0:r>1?n<1?(1-i)/(1-n)*r+(i-n)/(1-n):t<1?(1-e)/(1-t)*r+(e-t)/(1-t):1:3*r*(1-r)**2*e+3*r**2*(1-r)*i+r**3}},steps:function(t,e="end"){e=e.split("-").reverse()[0];let n=t;return e==="none"?--n:e==="both"&&++n,(i,r=!1)=>{let s=Math.floor(i*t);const o=i*s%1==0;return e!=="start"&&e!=="both"||++s,r&&o&&--s,i>=0&&s<0&&(s=0),i<=1&&s>n&&(s=n),s/n}}};class vf{done(){return!1}}class Vd extends vf{constructor(e){super(),this.ease=Lx[e||Nx]||e}step(e,n,i){return typeof e!="number"?i<1?e:n:e+(n-e)*this.ease(i)}}class Ou extends vf{constructor(e){super(),this.stepper=e}step(e,n,i,r){return this.stepper(e,n,i,r)}done(e){return e.done}}function Vg(){var t=(this._duration||500)/1e3,e=this._overshoot||0,n=Math.PI,i=Math.log(e/100+1e-10),r=-i/Math.sqrt(n*n+i*i),s=3.9/(r*t);this.d=2*r*s,this.k=s*s}me(class extends Ou{constructor(t,e){super(),this.duration(t||500).overshoot(e||0)}step(t,e,n,i){if(typeof t=="string")return t;if(i.done=n===1/0,n===1/0)return e;if(n===0)return t;n>100&&(n=16),n/=1e3;var r=i.velocity||0,s=-this.d*r-this.k*(t-e),o=t+r*n+s*n*n/2;return i.velocity=r+s*n,i.done=Math.abs(e-o)+Math.abs(r)<.002,i.done?e:o}},{duration:es("_duration",Vg),overshoot:es("_overshoot",Vg)});me(class extends Ou{constructor(t,e,n,i){super(),t=t??.1,e=e??.01,n=n??0,i=i??1e3,this.p(t).i(e).d(n).windup(i)}step(t,e,n,i){if(typeof t=="string")return t;if(i.done=n===1/0,n===1/0)return e;if(n===0)return t;var r=e-t,s=(i.integral||0)+r*n,o=(r-(i.error||0))/n,a=this.windup;return a!==!1&&(s=Math.max(-a,Math.min(s,a))),i.error=r,i.integral=s,i.done=Math.abs(r)<.001,i.done?e:t+(this.P*r+this.I*s+this.D*o)}},{windup:es("windup"),p:es("P"),i:es("I"),d:es("D")});const bn=Tl("PathArray",Tr);function Ox(t,e,n,i){return n+i.replace(wx," .")}const qd={M:function(t,e,n){return e.x=n.x=t[0],e.y=n.y=t[1],["M",e.x,e.y]},L:function(t,e){return e.x=t[0],e.y=t[1],["L",t[0],t[1]]},H:function(t,e){return e.x=t[0],["H",t[0]]},V:function(t,e){return e.y=t[0],["V",t[0]]},C:function(t,e){return e.x=t[4],e.y=t[5],["C",t[0],t[1],t[2],t[3],t[4],t[5]]},S:function(t,e){return e.x=t[2],e.y=t[3],["S",t[0],t[1],t[2],t[3]]},Q:function(t,e){return e.x=t[2],e.y=t[3],["Q",t[0],t[1],t[2],t[3]]},T:function(t,e){return e.x=t[0],e.y=t[1],["T",t[0],t[1]]},Z:function(t,e,n){return e.x=n.x,e.y=n.y,["Z"]},A:function(t,e){return e.x=t[5],e.y=t[6],["A",t[0],t[1],t[2],t[3],t[4],t[5],t[6]]}},Mc="mlhvqtcsaz".split("");for(var Ma=0,yx=Mc.length;Ma<yx;++Ma)qd[Mc[Ma]]=function(t){return function(e,n,i){if(t==="H")e[0]=e[0]+n.x;else if(t==="V")e[0]=e[0]+n.y;else if(t==="A")e[5]=e[5]+n.x,e[6]=e[6]+n.y;else for(var r=0,s=e.length;r<s;++r)e[r]=e[r]+(r%2?n.y:n.x);return qd[t](e,n,i)}}(Mc[Ma].toUpperCase());me(bn,{toString(){return function(t){for(var e=0,n=t.length,i="";e<n;e++)i+=t[e][0],t[e][1]!=null&&(i+=t[e][1],t[e][2]!=null&&(i+=" ",i+=t[e][2],t[e][3]!=null&&(i+=" ",i+=t[e][3],i+=" ",i+=t[e][4],t[e][5]!=null&&(i+=" ",i+=t[e][5],i+=" ",i+=t[e][6],t[e][7]!=null&&(i+=" ",i+=t[e][7])))));return i+" "}(this)},move(t,e){var n=this.bbox();if(t-=n.x,e-=n.y,!isNaN(t)&&!isNaN(e))for(var i,r=this.length-1;r>=0;r--)(i=this[r][0])==="M"||i==="L"||i==="T"?(this[r][1]+=t,this[r][2]+=e):i==="H"?this[r][1]+=t:i==="V"?this[r][1]+=e:i==="C"||i==="S"||i==="Q"?(this[r][1]+=t,this[r][2]+=e,this[r][3]+=t,this[r][4]+=e,i==="C"&&(this[r][5]+=t,this[r][6]+=e)):i==="A"&&(this[r][6]+=t,this[r][7]+=e);return this},size(t,e){var n,i,r=this.bbox();for(r.width=r.width===0?1:r.width,r.height=r.height===0?1:r.height,n=this.length-1;n>=0;n--)(i=this[n][0])==="M"||i==="L"||i==="T"?(this[n][1]=(this[n][1]-r.x)*t/r.width+r.x,this[n][2]=(this[n][2]-r.y)*e/r.height+r.y):i==="H"?this[n][1]=(this[n][1]-r.x)*t/r.width+r.x:i==="V"?this[n][1]=(this[n][1]-r.y)*e/r.height+r.y:i==="C"||i==="S"||i==="Q"?(this[n][1]=(this[n][1]-r.x)*t/r.width+r.x,this[n][2]=(this[n][2]-r.y)*e/r.height+r.y,this[n][3]=(this[n][3]-r.x)*t/r.width+r.x,this[n][4]=(this[n][4]-r.y)*e/r.height+r.y,i==="C"&&(this[n][5]=(this[n][5]-r.x)*t/r.width+r.x,this[n][6]=(this[n][6]-r.y)*e/r.height+r.y)):i==="A"&&(this[n][1]=this[n][1]*t/r.width,this[n][2]=this[n][2]*e/r.height,this[n][6]=(this[n][6]-r.x)*t/r.width+r.x,this[n][7]=(this[n][7]-r.y)*e/r.height+r.y);return this},equalCommands(t){var e,n,i;for(t=new bn(t),i=this.length===t.length,e=0,n=this.length;i&&e<n;e++)i=this[e][0]===t[e][0];return i},morph(t){return t=new bn(t),this.equalCommands(t)?this.destination=t:this.destination=null,this},at(t){if(!this.destination)return this;var e,n,i,r,s=this.destination.value,o=[],a=new bn;for(e=0,n=this.length;e<n;e++){for(o[e]=[this[e][0]],i=1,r=this[e].length;i<r;i++)o[e][i]=this[e][i]+(s[e][i]-this[e][i])*t;o[e][0]==="A"&&(o[e][4]=+(o[e][4]!==0),o[e][5]=+(o[e][5]!==0))}return a.value=o,a},parse(t=[["M",0,0]]){if(t instanceof bn)return t;var e,n={M:2,L:2,H:1,V:1,C:6,S:4,Q:4,T:2,A:7,Z:0};t=typeof t=="string"?t.replace(Cx,Ox).replace(Y1," $& ").replace(Ax,"$1 -").trim().split(ci):t.reduce(function(l,d){return[].concat.call(l,d)},[]);var i=[],r=new it,s=new it,o=0,a=t.length;do vx.test(t[o])?(e=t[o],++o):e==="M"?e="L":e==="m"&&(e="l"),i.push(qd[e].call(null,t.slice(o,o+=n[e.toUpperCase()]).map(parseFloat),r,s));while(a>o);return i},bbox(){return Ri().path.setAttribute("d",this.toString()),Ri.nodes.path.getBBox()}});class ur{constructor(e){this._stepper=e||new Vd("-"),this._from=null,this._to=null,this._type=null,this._context=null,this._morphObj=null}from(e){return e==null?this._from:(this._from=this._set(e),this)}to(e){return e==null?this._to:(this._to=this._set(e),this)}type(e){return e==null?this._type:(this._type=e,this)}_set(e){if(!this._type){var n=typeof e;n==="number"?this.type(te):n==="string"?Ne.isColor(e)?this.type(Ne):ci.test(e)?this.type(Y1.test(e)?bn:Tr):z1.test(e)?this.type(te):this.type(Jd):Zd.indexOf(e.constructor)>-1?this.type(e.constructor):Array.isArray(e)?this.type(Tr):n==="object"?this.type(nS):this.type(Jd)}var i=new this._type(e);return this._type===Ne&&(i=this._to?i[this._to[4]]():this._from?i[this._from[4]]():i),i=i.toArray(),this._morphObj=this._morphObj||new this._type,this._context=this._context||Array.apply(null,Array(i.length)).map(Object).map(function(r){return r.done=!0,r}),i}stepper(e){return e==null?this._stepper:(this._stepper=e,this)}done(){return this._context.map(this._stepper.done).reduce(function(e,n){return e&&n},!0)}at(e){var n=this;return this._morphObj.fromArray(this._from.map(function(i,r){return n._stepper.step(i,n._to[r],e,n._context[r],n._context)}))}}class Jd{constructor(...e){this.init(...e)}init(e){return e=Array.isArray(e)?e[0]:e,this.value=e,this}valueOf(){return this.value}toArray(){return[this.value]}}class na{constructor(...e){this.init(...e)}init(e){return Array.isArray(e)&&(e={scaleX:e[0],scaleY:e[1],shear:e[2],rotate:e[3],translateX:e[4],translateY:e[5],originX:e[6],originY:e[7]}),Object.assign(this,na.defaults,e),this}toArray(){var e=this;return[e.scaleX,e.scaleY,e.shear,e.rotate,e.translateX,e.translateY,e.originX,e.originY]}}na.defaults={scaleX:1,scaleY:1,shear:0,rotate:0,translateX:0,translateY:0,originX:0,originY:0};class nS{constructor(...e){this.init(...e)}init(e){if(this.values=[],!Array.isArray(e)){e=e||{};var n=[];for(const i in e)n.push([i,e[i]]);return n.sort((i,r)=>i[0]-r[0]),this.values=n.reduce((i,r)=>i.concat(r),[]),this}this.values=e}valueOf(){for(var e={},n=this.values,i=0,r=n.length;i<r;i+=2)e[n[i]]=n[i+1];return e}toArray(){return this.values}}const Zd=[Jd,na,nS];class us extends Nn{constructor(e){super(He("path",e),e)}array(){return this._array||(this._array=new bn(this.attr("d")))}plot(e){return e==null?this.array():this.clear().attr("d",typeof e=="string"?e:this._array=new bn(e))}clear(){return delete this._array,this}move(e,n){return this.attr("d",this.array().move(e,n))}x(e){return e==null?this.bbox().x:this.move(e,this.bbox().y)}y(e){return e==null?this.bbox().y:this.move(this.bbox().x,e)}size(e,n){var i=Ps(this,e,n);return this.attr("d",this.array().size(i.width,i.height))}width(e){return e==null?this.bbox().width:this.size(e,this.bbox().height)}height(e){return e==null?this.bbox().height:this.size(this.bbox().width,e)}targets(){return Lr('svg textpath [href*="'+this.id()+'"]')}}us.prototype.MorphArray=bn,se({Container:{path:Be(function(t){return this.put(new us).plot(t||new bn)})}}),Ae(us,"Path");var iS=Object.freeze({__proto__:null,array:function(){return this._array||(this._array=new qn(this.attr("points")))},plot:function(t){return t==null?this.array():this.clear().attr("points",typeof t=="string"?t:this._array=new qn(t))},clear:function(){return delete this._array,this},move:function(t,e){return this.attr("points",this.array().move(t,e))},size:function(t,e){const n=Ps(this,t,e);return this.attr("points",this.array().size(n.width,n.height))}});class ao extends Nn{constructor(e){super(He("polygon",e),e)}}se({Container:{polygon:Be(function(t){return this.put(new ao).plot(t||new qn)})}}),me(ao,Af),me(ao,iS),Ae(ao,"Polygon");class uo extends Nn{constructor(e){super(He("polyline",e),e)}}se({Container:{polyline:Be(function(t){return this.put(new uo).plot(t||new qn)})}}),me(uo,Af),me(uo,iS),Ae(uo,"Polyline");class tu extends Nn{constructor(e){super(He("rect",e),e)}}me(tu,{rx:bf,ry:pf}),se({Container:{rect:Be(function(t,e){return this.put(new tu).size(t,e)})}}),Ae(tu,"Rect");class Pc{constructor(){this._first=null,this._last=null}push(e){var n=e.next?e:{value:e,next:null,prev:null};return this._last?(n.prev=this._last,this._last.next=n,this._last=n):(this._last=n,this._first=n),n}shift(){var e=this._first;return e?(this._first=e.next,this._first&&(this._first.prev=null),this._last=this._first?this._last:null,e.value):null}first(){return this._first&&this._first.value}last(){return this._last&&this._last.value}remove(e){e.prev&&(e.prev.next=e.next),e.next&&(e.next.prev=e.prev),e===this._last&&(this._last=e.prev),e===this._first&&(this._first=e.next),e.prev=null,e.next=null}}const we={nextDraw:null,frames:new Pc,timeouts:new Pc,immediates:new Pc,timer:()=>Ce.window.performance||Ce.window.Date,transforms:[],frame(t){var e=we.frames.push({run:t});return we.nextDraw===null&&(we.nextDraw=Ce.window.requestAnimationFrame(we._draw)),e},timeout(t,e){e=e||0;var n=we.timer().now()+e,i=we.timeouts.push({run:t,time:n});return we.nextDraw===null&&(we.nextDraw=Ce.window.requestAnimationFrame(we._draw)),i},immediate(t){var e=we.immediates.push(t);return we.nextDraw===null&&(we.nextDraw=Ce.window.requestAnimationFrame(we._draw)),e},cancelFrame(t){t!=null&&we.frames.remove(t)},clearTimeout(t){t!=null&&we.timeouts.remove(t)},cancelImmediate(t){t!=null&&we.immediates.remove(t)},_draw(t){for(var e=null,n=we.timeouts.last();(e=we.timeouts.shift())&&(t>=e.time?e.run():we.timeouts.push(e),e!==n););for(var i=null,r=we.frames.last();i!==r&&(i=we.frames.shift());)i.run(t);for(var s=null;s=we.immediates.shift();)s();we.nextDraw=we.timeouts.first()||we.frames.first()?Ce.window.requestAnimationFrame(we._draw):null}};var Rx=function(t){var e=t.start,n=t.runner.duration();return{start:e,duration:n,end:e+n,runner:t.runner}};const Ix=function(){const t=Ce.window;return(t.performance||t.Date).now()};class rS extends ta{constructor(e=Ix){super(),this._timeSource=e,this._startTime=0,this._speed=1,this._persist=0,this._nextFrame=null,this._paused=!0,this._runners=[],this._runnerIds=[],this._lastRunnerId=-1,this._time=0,this._lastSourceTime=0,this._lastStepTime=0,this._step=this._stepFn.bind(this,!1),this._stepImmediate=this._stepFn.bind(this,!0)}schedule(e,n,i){if(e==null)return this._runners.map(Rx);var r=0,s=this.getEndTime();if(n=n||0,i==null||i==="last"||i==="after")r=s;else if(i==="absolute"||i==="start")r=n,n=0;else if(i==="now")r=this._time;else{if(i!=="relative")throw new Error('Invalid value for the "when" parameter');{const l=this._runners[e.id];l&&(r=l.start+n,n=0)}}e.unschedule(),e.timeline(this);const o=e.persist(),a={persist:o===null?this._persist:o,start:r+n,runner:e};return this._lastRunnerId=e.id,this._runners.push(a),this._runners.sort((l,d)=>l.start-d.start),this._runnerIds=this._runners.map(l=>l.runner.id),this.updateTime()._continue(),this}unschedule(e){var n=this._runnerIds.indexOf(e.id);return n<0||(this._runners.splice(n,1),this._runnerIds.splice(n,1),e.timeline(null)),this}getEndTime(){var e=this._runners[this._runnerIds.indexOf(this._lastRunnerId)],n=e?e.runner.duration():0;return(e?e.start:0)+n}getEndTimeOfTimeline(){let e=0;for(var n=0;n<this._runners.length;n++){const r=this._runners[n];var i=r?r.runner.duration():0;const s=(r?r.start:0)+i;s>e&&(e=s)}return e}updateTime(){return this.active()||(this._lastSourceTime=this._timeSource()),this}play(){return this._paused=!1,this.updateTime()._continue()}pause(){return this._paused=!0,this._continue()}stop(){return this.time(0),this.pause()}finish(){return this.time(this.getEndTimeOfTimeline()+1),this.pause()}speed(e){return e==null?this._speed:(this._speed=e,this)}reverse(e){var n=this.speed();if(e==null)return this.speed(-n);var i=Math.abs(n);return this.speed(e?i:-i)}seek(e){return this.time(this._time+e)}time(e){return e==null?this._time:(this._time=e,this._continue(!0))}persist(e){return e==null?this._persist:(this._persist=e,this)}source(e){return e==null?this._timeSource:(this._timeSource=e,this)}_stepFn(e=!1){var n=this._timeSource(),i=n-this._lastSourceTime;e&&(i=0);var r=this._speed*i+(this._time-this._lastStepTime);this._lastSourceTime=n,e||(this._time+=r,this._time=this._time<0?0:this._time),this._lastStepTime=this._time,this.fire("time",this._time);for(var s=this._runners.length;s--;){const d=this._runners[s],f=d.runner;this._time-d.start<=0&&f.reset()}for(var o=!1,a=0,l=this._runners.length;a<l;a++){const d=this._runners[a],f=d.runner;let u=r;const c=this._time-d.start;c<=0?o=!0:(c<u&&(u=c),f.active()&&(f.step(u).done?d.persist!==!0&&f.duration()-f.time()+this._time+d.persist<this._time&&(f.unschedule(),--a,--l):o=!0))}return o&&!(this._speed<0&&this._time===0)||this._runnerIds.length&&this._speed<0&&this._time>0?this._continue():(this.pause(),this.fire("finished")),this}_continue(e=!1){return we.cancelFrame(this._nextFrame),this._nextFrame=null,e?this._stepImmediate():(this._paused||(this._nextFrame=we.frame(this._step)),this)}active(){return!!this._nextFrame}}se({Element:{timeline:function(t){return t==null?(this._timeline=this._timeline||new rS,this._timeline):(this._timeline=t,this)}}});class pn extends ta{constructor(e){super(),this.id=pn.id++,e=typeof(e=e??Fc)=="function"?new Ou(e):e,this._element=null,this._timeline=null,this.done=!1,this._queue=[],this._duration=typeof e=="number"&&e,this._isDeclarative=e instanceof Ou,this._stepper=this._isDeclarative?e:new Vd,this._history={},this.enabled=!0,this._time=0,this._lastTime=0,this._reseted=!0,this.transforms=new _,this.transformId=1,this._haveReversed=!1,this._reverse=!1,this._loopsDone=0,this._swing=!1,this._wait=0,this._times=1,this._frameId=null,this._persist=!!this._isDeclarative||null}element(e){return e==null?this._element:(this._element=e,e._prepareRunner(),this)}timeline(e){return e===void 0?this._timeline:(this._timeline=e,this)}animate(e,n,i){var r=pn.sanitise(e,n,i),s=new pn(r.duration);return this._timeline&&s.timeline(this._timeline),this._element&&s.element(this._element),s.loop(r).schedule(r.delay,r.when)}schedule(e,n,i){if(e instanceof rS||(i=n,n=e,e=this.timeline()),!e)throw Error("Runner cannot be scheduled without timeline");return e.schedule(this,n,i),this}unschedule(){var e=this.timeline();return e&&e.unschedule(this),this}loop(e,n,i){return typeof e=="object"&&(n=e.swing,i=e.wait,e=e.times),this._times=e||1/0,this._swing=n||!1,this._wait=i||0,this._times===!0&&(this._times=1/0),this}delay(e){return this.animate(0,e)}queue(e,n,i,r){return this._queue.push({initialiser:e||zg,runner:n||zg,retarget:i,isTransform:r,initialised:!1,finished:!1}),this.timeline()&&this.timeline()._continue(),this}during(e){return this.queue(null,e)}after(e){return this.on("finished",e)}time(e){if(e==null)return this._time;const n=e-this._time;return this.step(n),this}duration(){return this._times*(this._wait+this._duration)-this._wait}loops(e){var n=this._duration+this._wait;if(e==null){var i=Math.floor(this._time/n),r=(this._time-i*n)/this._duration;return Math.min(i+r,this._times)}var s=e%1,o=n*Math.floor(e)+this._duration*s;return this.time(o)}persist(e){return e==null?this._persist:(this._persist=e,this)}position(e){var n,i=this._time,r=this._duration,s=this._wait,o=this._times,a=this._swing,l=this._reverse;if(e==null){const c=function(h){var g=a*Math.floor(h%(2*(s+r))/(s+r)),E=g&&!l||!g&&l,p=Math.pow(-1,E)*(h%(s+r))/r+E;return Math.max(Math.min(p,1),0)};var d=o*(s+r)-s;return n=i<=0?Math.round(c(1e-5)):i<d?c(i):Math.round(c(d-1e-5))}var f=Math.floor(this.loops()),u=a&&f%2==0;return n=f+(u&&!l||l&&u?e:1-e),this.loops(n)}progress(e){return e==null?Math.min(1,this._time/this.duration()):this.time(e*this.duration())}step(e){if(!this.enabled)return this;e=e??16,this._time+=e;var n=this.position(),i=this._lastPosition!==n&&this._time>=0;this._lastPosition=n;var r=this.duration(),s=this._lastTime<=0&&this._time>0,o=this._lastTime<r&&this._time>=r;this._lastTime=this._time,s&&this.fire("start",this);var a=this._isDeclarative;if(this.done=!a&&!o&&this._time>=r,this._reseted=!1,i||a){this._initialise(i),this.transforms=new _;var l=this._run(a?e:n);this.fire("step",this)}return this.done=this.done||l&&a,o&&this.fire("finished",this),this}reset(){return this._reseted||(this.time(0),this._reseted=!0),this}finish(){return this.step(1/0)}reverse(e){return this._reverse=e??!this._reverse,this}ease(e){return this._stepper=new Vd(e),this}active(e){return e==null?this.enabled:(this.enabled=e,this)}_rememberMorpher(e,n){if(this._history[e]={morpher:n,caller:this._queue[this._queue.length-1]},this._isDeclarative){var i=this.timeline();i&&i.play()}}_tryRetarget(e,n,i){if(this._history[e]){if(!this._history[e].caller.initialised){const s=this._queue.indexOf(this._history[e].caller);return this._queue.splice(s,1),!1}this._history[e].caller.retarget?this._history[e].caller.retarget(n,i):this._history[e].morpher.to(n),this._history[e].caller.finished=!1;var r=this.timeline();return r&&r.play(),!0}return!1}_initialise(e){if(e||this._isDeclarative)for(var n=0,i=this._queue.length;n<i;++n){var r=this._queue[n],s=this._isDeclarative||!r.initialised&&e;e=!r.finished,s&&e&&(r.initialiser.call(this),r.initialised=!0)}}_run(e){for(var n=!0,i=0,r=this._queue.length;i<r;++i){var s=this._queue[i],o=s.runner.call(this,e);s.finished=s.finished||o===!0,n=n&&s.finished}return n}addTransform(e,n){return this.transforms.lmultiplyO(e),this}clearTransform(){return this.transforms=new _,this}clearTransformsFromQueue(){this.done&&this._timeline&&this._timeline._runnerIds.includes(this.id)||(this._queue=this._queue.filter(e=>!e.isTransform))}static sanitise(e,n,i){var r=1,s=!1,o=0;return n=n||Fx,i=i||"last",typeof(e=e||Fc)!="object"||e instanceof vf||(n=e.delay||n,i=e.when||i,s=e.swing||s,r=e.times||r,o=e.wait||o,e=e.duration||Fc),{duration:e,delay:n,swing:s,times:r,wait:o,when:i}}}pn.id=0;class yu{constructor(e=new _,n=-1,i=!0){this.transforms=e,this.id=n,this.done=i}clearTransformsFromQueue(){}}me([pn,yu],{mergeWith(t){return new yu(t.transforms.lmultiply(this.transforms),t.id)}});const sS=(t,e)=>t.lmultiplyO(e),oS=t=>t.transforms;function jx(){const t=this._transformationRunners.runners.map(oS).reduce(sS,new _);this.transform(t),this._transformationRunners.merge(),this._transformationRunners.length()===1&&(this._frameId=null)}class Ux{constructor(){this.runners=[],this.ids=[]}add(e){if(this.runners.includes(e))return;const n=e.id+1;return this.runners.push(e),this.ids.push(n),this}getByID(e){return this.runners[this.ids.indexOf(e+1)]}remove(e){const n=this.ids.indexOf(e+1);return this.ids.splice(n,1),this.runners.splice(n,1),this}merge(){let e=null;return this.runners.forEach((n,i)=>{e&&n.done&&e.done&&(!n._timeline||!n._timeline._runnerIds.includes(n.id))&&(!e._timeline||!e._timeline._runnerIds.includes(e.id))&&(this.remove(n.id),this.edit(e.id,n.mergeWith(e))),e=n}),this}edit(e,n){const i=this.ids.indexOf(e+1);return this.ids.splice(i,1,e+1),this.runners.splice(i,1,n),this}length(){return this.ids.length}clearBefore(e){const n=this.ids.indexOf(e+1)||1;return this.ids.splice(0,n,0),this.runners.splice(0,n,new yu).forEach(i=>i.clearTransformsFromQueue()),this}}se({Element:{animate(t,e,n){var i=pn.sanitise(t,e,n),r=this.timeline();return new pn(i.duration).loop(i).element(this).timeline(r.play()).schedule(i.delay,i.when)},delay(t,e){return this.animate(0,t,e)},_clearTransformRunnersBefore(t){this._transformationRunners.clearBefore(t.id)},_currentTransform(t){return this._transformationRunners.runners.filter(e=>e.id<=t.id).map(oS).reduce(sS,new _)},_addRunner(t){this._transformationRunners.add(t),we.cancelImmediate(this._frameId),this._frameId=we.immediate(jx.bind(this))},_prepareRunner(){this._frameId==null&&(this._transformationRunners=new Ux().add(new yu(new _(this))))}}}),me(pn,{attr(t,e){return this.styleAttr("attr",t,e)},css(t,e){return this.styleAttr("css",t,e)},styleAttr(t,e,n){if(typeof e=="object"){for(var i in e)this.styleAttr(t,i,e[i]);return this}var r=new ur(this._stepper).to(n);return this.queue(function(){r=r.from(this.element()[t](e))},function(s){return this.element()[t](e,r.at(s)),r.done()}),this},zoom(t,e){if(this._tryRetarget("zoom",Yd,e))return this;var n=new ur(this._stepper).to(new te(t));return this.queue(function(){n=n.from(this.element().zoom())},function(i){return this.element().zoom(n.at(i),e),n.done()},function(i,r){e=r,n.to(i)}),this._rememberMorpher("zoom",n),this},transform(t,e,n){if(e=t.relative||e,this._isDeclarative&&!e&&this._tryRetarget("transform",t))return this;var i=_.isMatrixLike(t);n=t.affine!=null?t.affine:n??!i;const r=new ur(this._stepper).type(n?na:_);let s,o,a,l,d;return this.queue(function(){o=o||this.element(),s=s||zd(t,o),d=new _(e?void 0:o),o._addRunner(this),e||o._clearTransformRunnersBefore(this)},function(f){e||this.clearTransform();const{x:u,y:c}=new it(s).transform(o._currentTransform(this));let h=new _({...t,origin:[u,c]}),g=this._isDeclarative&&a?a:d;if(n){h=h.decompose(u,c),g=g.decompose(u,c);const p=h.rotate,m=g.rotate,b=[p-360,p,p+360],A=b.map(D=>Math.abs(D-m)),S=Math.min(...A),w=A.indexOf(S);h.rotate=b[w]}e&&(i||(h.rotate=t.rotate||0),this._isDeclarative&&l&&(g.rotate=l)),r.from(g),r.to(h);const E=r.at(f);return l=E.rotate,a=new _(E),this.addTransform(a),o._addRunner(this),r.done()},function(f){(f.origin||"center").toString()!==(t.origin||"center").toString()&&(s=zd(t,o)),t={...f,origin:s}},!0),this._isDeclarative&&this._rememberMorpher("transform",r),this},x(t,e){return this._queueNumber("x",t)},y(t){return this._queueNumber("y",t)},dx(t=0){return this._queueNumberDelta("x",t)},dy(t=0){return this._queueNumberDelta("y",t)},dmove(t,e){return this.dx(t).dy(e)},_queueNumberDelta(t,e){if(e=new te(e),this._tryRetarget(t,e))return this;var n=new ur(this._stepper).to(e),i=null;return this.queue(function(){i=this.element()[t](),n.from(i),n.to(i+e)},function(r){return this.element()[t](n.at(r)),n.done()},function(r){n.to(i+new te(r))}),this._rememberMorpher(t,n),this},_queueObject(t,e){if(this._tryRetarget(t,e))return this;var n=new ur(this._stepper).to(e);return this.queue(function(){n.from(this.element()[t]())},function(i){return this.element()[t](n.at(i)),n.done()}),this._rememberMorpher(t,n),this},_queueNumber(t,e){return this._queueObject(t,new te(e))},cx(t){return this._queueNumber("cx",t)},cy(t){return this._queueNumber("cy",t)},move(t,e){return this.x(t).y(e)},center(t,e){return this.cx(t).cy(e)},size(t,e){var n;return t&&e||(n=this._element.bbox()),t||(t=n.width/n.height*e),e||(e=n.height/n.width*t),this.width(t).height(e)},width(t){return this._queueNumber("width",t)},height(t){return this._queueNumber("height",t)},plot(t,e,n,i){if(arguments.length===4)return this.plot([t,e,n,i]);if(this._tryRetarget("plot",t))return this;var r=new ur(this._stepper).type(this._element.MorphArray).to(t);return this.queue(function(){r.from(this._element.array())},function(s){return this._element.plot(r.at(s)),r.done()}),this._rememberMorpher("plot",r),this},leading(t){return this._queueNumber("leading",t)},viewbox(t,e,n,i){return this._queueObject("viewbox",new nn(t,e,n,i))},update(t){return typeof t!="object"?this.update({offset:arguments[0],color:arguments[1],opacity:arguments[2]}):(t.opacity!=null&&this.attr("stop-opacity",t.opacity),t.color!=null&&this.attr("stop-color",t.color),t.offset!=null&&this.attr("offset",t.offset),this)}}),me(pn,{rx:bf,ry:pf,from:tS,to:Yd}),Ae(pn,"Runner");class Kd extends Kt{constructor(e){super(He("svg",e),e),this.namespace()}isRoot(){return!(this.node.parentNode&&this.node.parentNode instanceof Ce.window.SVGElement&&this.node.parentNode.nodeName!=="#document")}root(){return this.isRoot()?this:super.root()}namespace(){return this.isRoot()?this.attr({xmlns:hf,version:"1.1"}).attr("xmlns:xlink",ea,Rg).attr("xmlns:svgjs","http://svgjs.com/svgjs",Rg):this.root().namespace()}defs(){return this.isRoot()?Nt(this.node.querySelector("defs"))||this.put(new Sf):this.root().defs()}parent(e){return this.isRoot()?this.node.parentNode.nodeName==="#document"?null:Nt(this.node.parentNode):super.parent(e)}clear(){for(;this.node.hasChildNodes();)this.node.removeChild(this.node.lastChild);return delete this._defs,this}}se({Container:{nested:Be(function(){return this.put(new Kd)})}}),Ae(Kd,"Svg",!0);class Qd extends Kt{constructor(e){super(He("symbol",e),e)}}se({Container:{symbol:Be(function(){return this.put(new Qd)})}}),Ae(Qd,"Symbol");var aS=Object.freeze({__proto__:null,plain:function(t){return this._build===!1&&this.clear(),this.node.appendChild(Ce.document.createTextNode(t)),this},length:function(){return this.node.getComputedTextLength()}});class vn extends Nn{constructor(e){super(He("text",e),e),this.dom.leading=new te(1.3),this._rebuild=!0,this._build=!1}x(e,n=this.bbox()){return e==null?n.x:this.attr("x",this.attr("x")+e-n.x)}y(e,n=this.bbox()){return e==null?n.y:this.attr("y",this.attr("y")+e-n.y)}move(e,n,i=this.bbox()){return this.x(e,i).y(n,i)}cx(e,n=this.bbox()){return e==null?n.cx:this.attr("x",this.attr("x")+e-n.cx)}cy(e,n=this.bbox()){return e==null?n.cy:this.attr("y",this.attr("y")+e-n.cy)}center(e,n,i=this.bbox()){return this.cx(e,i).cy(n,i)}text(e){if(e===void 0){var n=this.node.childNodes,i=0;e="";for(var r=0,s=n.length;r<s;++r)n[r].nodeName!=="textPath"?(r!==i&&n[r].nodeType!==3&&Nt(n[r]).dom.newLined===!0&&(e+=`
`),e+=n[r].textContent):r===0&&(i=1);return e}if(this.clear().build(!0),typeof e=="function")e.call(this,this);else for(var o=0,a=(e=e.split(`
`)).length;o<a;o++)this.tspan(e[o]).newLine();return this.build(!1).rebuild()}leading(e){return e==null?this.dom.leading:(this.dom.leading=new te(e),this.rebuild())}rebuild(e){if(typeof e=="boolean"&&(this._rebuild=e),this._rebuild){var n=this,i=0,r=this.dom.leading;this.each(function(){var s=Ce.window.getComputedStyle(this.node).getPropertyValue("font-size"),o=r*new te(s);this.dom.newLined&&(this.attr("x",n.attr("x")),this.text()===`
`?i+=o:(this.attr("dy",o+i),i=0))}),this.fire("rebuild")}return this}build(e){return this._build=!!e,this}setData(e){return this.dom=e,this.dom.leading=new te(e.leading||1.3),this}}me(vn,aS),se({Container:{text:Be(function(t){return this.put(new vn).text(t)}),plain:Be(function(t){return this.put(new vn).plain(t)})}}),Ae(vn,"Text");class nu extends vn{constructor(e){super(He("tspan",e),e)}text(e){return e==null?this.node.textContent+(this.dom.newLined?`
`:""):(typeof e=="function"?e.call(this,this):this.plain(e),this)}dx(e){return this.attr("dx",e)}dy(e){return this.attr("dy",e)}x(e){return this.attr("x",e)}y(e){return this.attr("x",e)}move(e,n){return this.x(e).y(n)}newLine(){var e=this.parent(vn);this.dom.newLined=!0;var n=Ce.window.getComputedStyle(this.node).getPropertyValue("font-size"),i=e.dom.leading*new te(n);return this.dy(i).attr("x",e.x())}}me(nu,aS),se({Tspan:{tspan:Be(function(t){var e=new nu;return this._build||this.clear(),this.node.appendChild(e.node),e.text(t)})}}),Ae(nu,"Tspan");class kc extends Kt{constructor(e){super(He("clipPath",e),e)}remove(){return this.targets().forEach(function(e){e.unclip()}),super.remove()}targets(){return Lr('svg [clip-path*="'+this.id()+'"]')}}se({Container:{clip:Be(function(){return this.defs().put(new kc)})},Element:{clipWith(t){const e=t instanceof kc?t:this.parent().clip().add(t);return this.attr("clip-path",'url("#'+e.id()+'")')},unclip(){return this.attr("clip-path",null)},clipper(){return this.reference("clip-path")}}}),Ae(kc,"ClipPath");class qg extends si{constructor(e){super(He("foreignObject",e),e)}}se({Container:{foreignObject:Be(function(t,e){return this.put(new qg).size(t,e)})}}),Ae(qg,"ForeignObject");class Jg extends Kt{constructor(e){super(He("g",e),e)}x(e,n=this.bbox()){return e==null?n.x:this.move(e,n.y,n)}y(e,n=this.bbox()){return e==null?n.y:this.move(n.x,e,n)}move(e=0,n=0,i=this.bbox()){const r=e-i.x,s=n-i.y;return this.dmove(r,s)}dx(e){return this.dmove(e,0)}dy(e){return this.dmove(0,e)}dmove(e,n){return this.children().forEach((i,r)=>{const s=i.bbox(),o=new _(i),a=o.translate(e,n).transform(o.inverse()),l=new it(s.x,s.y).transform(a);i.move(l.x,l.y)}),this}width(e,n=this.bbox()){return e==null?n.width:this.size(e,n.height,n)}height(e,n=this.bbox()){return e==null?n.height:this.size(n.width,e,n)}size(e,n,i=this.bbox()){const r=Ps(this,e,n,i),s=r.width/i.width,o=r.height/i.height;return this.children().forEach((a,l)=>{const d=new it(i).transform(new _(a).inverse());a.scale(s,o,d.x,d.y)}),this}}se({Container:{group:Be(function(){return this.put(new Jg)})}}),Ae(Jg,"G");class Lc extends Kt{constructor(e){super(He("a",e),e)}to(e){return this.attr("href",e,ea)}target(e){return this.attr("target",e)}}se({Container:{link:Be(function(t){return this.put(new Lc).to(t)})},Element:{linkTo:function(t){var e=new Lc;return typeof t=="function"?t.call(e,e):e.to(t),this.parent().put(e).put(this)}}}),Ae(Lc,"A");class Oc extends Kt{constructor(e){super(He("mask",e),e)}remove(){return this.targets().forEach(function(e){e.unmask()}),super.remove()}targets(){return Lr('svg [mask*="'+this.id()+'"]')}}se({Container:{mask:Be(function(){return this.defs().put(new Oc)})},Element:{maskWith(t){var e=t instanceof Oc?t:this.parent().mask().add(t);return this.attr("mask",'url("#'+e.id()+'")')},unmask(){return this.attr("mask",null)},masker(){return this.reference("mask")}}}),Ae(Oc,"Mask");class yc extends si{constructor(e){super(He("style",e),e)}addText(e=""){return this.node.textContent+=e,this}font(e,n,i={}){return this.rule("@font-face",{fontFamily:e,src:n,...i})}rule(e,n){return this.addText(function(i,r){if(!i)return"";if(!r)return i;var s=i+"{";for(var o in r)s+=o.replace(/([A-Z])/g,function(a,l){return"-"+l.toLowerCase()})+":"+r[o]+";";return s+="}"}(e,n))}}se("Dom",{style:Be(function(t,e){return this.put(new yc).rule(t,e)}),fontface:Be(function(t,e,n){return this.put(new yc).font(t,e,n)})}),Ae(yc,"Style");class Rc extends vn{constructor(e){super(He("textPath",e),e)}array(){var e=this.track();return e?e.array():null}plot(e){var n=this.track(),i=null;return n&&(i=n.plot(e)),e==null?i:this}track(){return this.reference("href")}}se({Container:{textPath:Be(function(t,e){return t instanceof vn||(t=this.text(t)),t.path(e)})},Text:{path:Be(function(t,e=!0){var n=new Rc;let i;if(t instanceof us||(t=this.defs().path(t)),n.attr("href","#"+t,ea),e)for(;i=this.node.firstChild;)n.node.appendChild(i);return this.put(n)}),textPath(){return this.findOne("textPath")}},Path:{text:Be(function(t){return t instanceof vn||(t=new vn().addTo(this.parent()).text(t)),t.path(this)}),targets(){return Lr('svg [href*="'+this.id()+'"]')}}}),Rc.prototype.MorphArray=bn,Ae(Rc,"TextPath");class Zg extends Nn{constructor(e){super(He("use",e),e)}element(e,n){return this.attr("href",(n||"")+"#"+e,ea)}}se({Container:{use:Be(function(t,e){return this.put(new Zg).element(t,e)})}}),Ae(Zg,"Use");const Kg=zt;me([Kd,Qd,$a,Vo,eu],_t("viewbox")),me([oo,uo,ao,us],_t("marker")),me(vn,_t("Text")),me(us,_t("Path")),me(Sf,_t("Defs")),me([vn,nu],_t("Tspan")),me([tu,Ga,Qa,_a],_t("radius")),me(ta,_t("EventTarget")),me(Cs,_t("Dom")),me(si,_t("Element")),me(Nn,_t("Shape")),me(Kt,_t("Container")),me(pn,_t("Runner")),Br.extend([...new Set(U1)]),function(t=[]){Zd.push(...[].concat(t))}([te,Ne,nn,_,Tr,qn,bn]),me(Zd,{to(t){return new ur().type(this.constructor).from(this.valueOf()).to(t)},fromArray(t){return this.init(t),this}});/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */var uS=function(t,e){return(uS=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,i){n.__proto__=i}||function(n,i){for(var r in i)i.hasOwnProperty(r)&&(n[r]=i[r])})(t,e)};function ia(t,e){function n(){this.constructor=t}uS(t,e),t.prototype=e===null?Object.create(e):(n.prototype=e.prototype,new n)}var Ze=function(){function t(e){if(typeof e=="string"){if(!(e.length>0))throw"Can't parse this note";if(this.note=e[0].toUpperCase(),e.length>1){var n=e.substr(1);["#","b"].indexOf(e[1])>-1&&(e.length>2&&e[1]===e[2]?this.accidental=e.substr(1,2):this.accidental=e[1],n=e.substr(this.accidental.toString().length+1)),n.length>0&&(this.octave=Number.parseInt(n))}}else this.note=e.note,this.accidental=e.accidental,this.octave=e.octave;this.toString=this.toString.bind(this)}return Object.defineProperty(t.prototype,"baseNote",{get:function(){var e,n=this,i=[{note:"C"},{note:"C",accidental:"#"},{note:"D"},{note:"D",accidental:"#"},{note:"E"},{note:"F"},{note:"F",accidental:"#"},{note:"G"},{note:"G",accidental:"#"},{note:"A"},{note:"A",accidental:"#"},{note:"B"}],r=i.findIndex(function(o){return o.note===n.note&&o.accidental===n.accidental});if(r>-1)e={note:i[r].note,accidental:i[r].accidental,octave:this.octave};else{switch(r=i.findIndex(function(o){return o.note===n.note&&o.accidental===void 0}),this.accidental){case"#":r+=1;break;case"##":r+=2;break;case"b":r-=1;break;case"bb":r-=2}var s=0;r<0?(r+=12,s=-1):r>11&&(r-=12,s=1),e={note:i[r].note,accidental:i[r].accidental,octave:this.octave!==void 0?this.octave+s:void 0}}return e},enumerable:!0,configurable:!0}),t.prototype.toString=function(){var e=this.note.toString();return this.accidental!==void 0&&(e+=this.accidental.toString()),this.octave!==void 0&&(e+=this.octave.toString()),e},t}(),ct=function(){function t(){}return t.WHITE_KEY_RATIO=6.4,t.BLACK_KEY_RATIO=6.6,t.WHITE_BLACK_WIDTH_RATIO=1.7,t.NOTE_LIST=["C","D","E","F","G","A","B"],t.BLACK_BASE_NOTE_LIST=["C","D","F","G","A"],t}(),Cf=function(){function t(e,n,i,r){this.container=e,this.onKeyPress=i,this.onKeyRelease=r,this.instrumentSettings=n}return Object.defineProperty(t.prototype,"boxWidth",{get:function(){return this.container.bbox().width},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"boxHeight",{get:function(){return this.container.bbox().height},enumerable:!0,configurable:!0}),t.prototype.move=function(e,n){this.container.untransform(),this.container.translate(e,n)},t.prototype.setInstrumentSettings=function(e){this.instrumentSettings=e},t}(),lS=function(t){function e(n,i,r,s,o,a,l){var d=t.call(this,n,i,r,s)||this;return d.highlightSize=1,d.isPressed=!1,d.isMouseDown=!1,d.width=o,d.height=a,d._note=l,d._displayNote=l,d.addMouseListeners=d.addMouseListeners.bind(d),d.handleInputDown=d.handleInputDown.bind(d),d.handleInputUp=d.handleInputUp.bind(d),d}return ia(e,t),Object.defineProperty(e.prototype,"note",{get:function(){return this._note},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"displayNote",{get:function(){return this.isHighlighted?this.getNoteIfHighlighted(function(){for(var n=0,i=0,r=arguments.length;i<r;i++)n+=arguments[i].length;var s=Array(n),o=0;for(i=0;i<r;i++)for(var a=arguments[i],l=0,d=a.length;l<d;l++,o++)s[o]=a[l];return s}(this.instrumentSettings.highlightedNotes,this.instrumentSettings.specialHighlightedNotes)):this._displayNote},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"isHighlighted",{get:function(){return this.getNoteIfHighlighted(this.instrumentSettings.highlightedNotes)!==void 0||this.isSpecialHighlighted},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"isSpecialHighlighted",{get:function(){return this.getNoteIfHighlighted(this.instrumentSettings.specialHighlightedNotes)!==void 0},enumerable:!0,configurable:!0}),e.prototype.addMouseListeners=function(){this._visual!==void 0&&(this._visual.on("mousedown",this.handleInputDown),this._visual.on("mouseup",this.handleInputUp),this._visual.on("mouseleave",this.handleInputUp),this._visual.on("touchstart",this.handleInputDown),this._visual.on("touchend",this.handleInputUp))},e.prototype.handleInputDown=function(){this.isMouseDown=!0,this.onKeyPress!==void 0&&this.onKeyPress(this.note)},e.prototype.handleInputUp=function(){this.isMouseDown&&(this.isMouseDown=!1,this.onKeyRelease!==void 0&&this.onKeyRelease(this.note))},e.prototype.press=function(n){this.isPressed=!0,this._displayNote=n,this._label&&this.instrumentSettings.showNoteNames==="onpress"&&(this.updateLabel(),this._label.show())},e.prototype.release=function(){this.isPressed=!1,this._label&&this.instrumentSettings.showNoteNames==="onpress"&&this._label.hide()},e.prototype.backward=function(){this.container.backward()},e.prototype.accidentalToUnicode=function(n){return n.toString().replace(/#/g,"♯").replace(/b/g,"♭")},e.prototype.createLabel=function(n){this._label=this.container.group(),this._labelText=this._label.text(""+this.displayNote.note+(this.displayNote.accidental?this.accidentalToUnicode(this.displayNote.accidental):"")).fill(n).font({family:"Helvetica",size:this.width/2,anchor:"middle"}),this._label.attr("pointer-events","none"),this.layout(),this.instrumentSettings.showNoteNames!=="always"&&this._label.hide()},e.prototype.updateLabel=function(){this._labelText&&(this._labelText.text(""+this.displayNote.note+(this.displayNote.accidental?this.accidentalToUnicode(this.displayNote.accidental):"")),this.layout())},e.prototype.createHighlight=function(n){this.highlightSize=n,this._highlight=this.container.circle(this.highlightSize),this._highlight.center(.5,.5),this._highlight.attr("pointer-events","none");var i=this.instrumentSettings.highlightColor,r=this.instrumentSettings.specialHighlightColor,s=this.container.gradient("radial",function(a){a.stop(0,"#fff"),a.stop(1,i)});s.attr({cx:.4,cy:.4});var o=this.container.gradient("radial",function(a){a.stop(0,"#fff"),a.stop(1,r)});o.attr({cx:.4,cy:.4}),this._highlight.fill(this.isSpecialHighlighted?o:s),this.layout()},e.prototype.layout=function(){var n,i,r;(n=this._visual)===null||n===void 0||n.size(this.width,this.height),this._label&&this._labelText&&(this._labelText.font({size:this.width/2}),(i=this._label)===null||i===void 0||i.untransform(),(r=this._label)===null||r===void 0||r.translate(this.width/2,this.height-2*this._labelText.bbox().height),this.instrumentSettings.showNoteNames==="onhighlight"&&(this.isHighlighted?this._label.show():this._label.hide())),this._highlight&&(this._highlight.radius(this.highlightSize).untransform().translate(this.width/2,4*this.highlightSize),this.isHighlighted?this._highlight.show():this._highlight.hide())},e.prototype.getNoteIfHighlighted=function(n){var i=this.note.baseNote!==void 0?this.note.baseNote:this.note;return n.find(function(r){var s=r.baseNote!==void 0?r.baseNote:r;return s.note===i.note&&s.accidental===i.accidental&&(s.octave===i.octave||s.octave===void 0)})},e}(Cf),Hx=function(t){function e(n,i,r,s,o,a){return t.call(this,n,i,r,s,a,a*ct.WHITE_KEY_RATIO,o)||this}return ia(e,t),e.prototype.create=function(){this._visual=this.container.rect(this.width,this.height).fill("#fff").stroke({color:"#000",width:2}),this.createLabel("#000"),this.createHighlight(this.width/ct.WHITE_BLACK_WIDTH_RATIO/8),this.addMouseListeners()},e.prototype.resize=function(n){this.width=n,this.height=n*ct.WHITE_KEY_RATIO,this.layout()},e.prototype.press=function(n){var i,r;this.instrumentSettings.keyPressStyle==="subtle"?(r=this.container.gradient("linear",function(s){s.stop(0,"#fff"),s.stop(1,"#e8e8e8")})).attr({x1:0,y1:0,x2:0,y2:1}):r=this.instrumentSettings.vividKeyPressColor,this.isPressed||(t.prototype.press.call(this,n),(i=this._visual)===null||i===void 0||i.fill(r).transform({origin:{x:this.width/2,y:0},skewX:.3}))},e.prototype.release=function(){var n;this.isPressed&&(t.prototype.release.call(this),(n=this._visual)===null||n===void 0||n.fill("#fff").untransform())},e}(lS),Wx=function(t){function e(n,i,r,s,o,a,l){var d=t.call(this,n,i,r,s,l,l*ct.BLACK_KEY_RATIO,o)||this;return d._baseWhiteKey=a,d}return ia(e,t),Object.defineProperty(e.prototype,"baseWhiteKey",{get:function(){return this._baseWhiteKey},enumerable:!0,configurable:!0}),e.prototype.create=function(){this._visual=this.container.rect(this.width,this.height).fill("#000").stroke({color:"#000",width:2}),this.createLabel("#fff"),this.createHighlight(this.width/8),this.addMouseListeners()},e.prototype.resize=function(n){this.width=n,this.height=n*ct.BLACK_KEY_RATIO,this.layout()},e.prototype.press=function(n){var i,r;this.instrumentSettings.keyPressStyle==="subtle"?(r=this.container.gradient("linear",function(s){s.stop(0,"#000"),s.stop(1,"#555")})).attr({x1:0,y1:0,x2:0,y2:1}):(r=(r=new Ne(this.instrumentSettings.vividKeyPressColor)).hsl()).l/=1.2,this.isPressed||(t.prototype.press.call(this,n),(i=this._visual)===null||i===void 0||i.fill(r))},e.prototype.release=function(){var n;this.isPressed&&(t.prototype.release.call(this),(n=this._visual)===null||n===void 0||n.fill("#000"))},e}(lS),Xx=function(t){function e(n,i,r,s,o,a,l,d){var f=t.call(this,n,i,r,s)||this;return f.whiteKeys=[],f.blackKeys=[],f.LABEL_SIZE_RATIO=30,f.container=n,f._octave=o,f.startNote=a,f.endNote=l,f.whiteKeyWidth=d,f.whiteKeyHeight=f.whiteKeyWidth*ct.WHITE_KEY_RATIO,f}return ia(e,t),Object.defineProperty(e.prototype,"octave",{get:function(){return this._octave},enumerable:!0,configurable:!0}),e.prototype.create=function(){for(var n=!1,i=ct.NOTE_LIST.indexOf(this.startNote);i<=ct.NOTE_LIST.indexOf(this.endNote);i++){var r=ct.NOTE_LIST[i],s=new Hx(this.container.group(),this.instrumentSettings,this.onKeyPress,this.onKeyRelease,new Ze({note:r,octave:this._octave}),this.whiteKeyWidth);if(s.create(),this.whiteKeys.push(s),n&&s.backward(),n=!1,ct.BLACK_BASE_NOTE_LIST.indexOf(r)>-1&&(r!==this.endNote||this.endNote==="B")){var o=new Wx(this.container.group(),this.instrumentSettings,this.onKeyPress,this.onKeyRelease,new Ze({note:r,accidental:"#",octave:this._octave}),s,this.whiteKeyWidth/ct.WHITE_BLACK_WIDTH_RATIO);o.create(),this.blackKeys.push(o),n=!0}}this.createOctaveNumberLabel()},e.prototype.layout=function(n){var i,r,s=this;this.whiteKeyWidth=n,this.whiteKeyHeight=this.whiteKeyWidth*ct.WHITE_KEY_RATIO;var o=0;this.whiteKeys.forEach(function(a){a.resize(s.whiteKeyWidth),a.move(o,0),o+=a.boxWidth;var l=s.blackKeys.find(function(d){return d.baseWhiteKey===a});l&&(l.resize(s.whiteKeyWidth/ct.WHITE_BLACK_WIDTH_RATIO),l.move(o-l.boxWidth/2,0))}),this._label&&this._labelText&&(this._labelText.font({size:this.whiteKeyHeight/this.LABEL_SIZE_RATIO}),(i=this._label)===null||i===void 0||i.untransform(),(r=this._label)===null||r===void 0||r.translate(this.whiteKeyHeight/this.LABEL_SIZE_RATIO/2,this.whiteKeyHeight-1.5*this._labelText.bbox().height),this.instrumentSettings.showOctaveNumbers?this._label.show():this._label.hide())},Object.defineProperty(e.prototype,"numberOfWhiteKeys",{get:function(){return ct.NOTE_LIST.indexOf(this.endNote)-ct.NOTE_LIST.indexOf(this.startNote)+1},enumerable:!0,configurable:!0}),e.prototype.keyDown=function(n){var i=new Ze(n).baseNote;if(i.accidental===void 0)(r=this.whiteKeys.find(function(s){return s.note.note===i.note}))&&r.press(n);else if(i.accidental==="#"){var r;(r=this.blackKeys.find(function(s){return s.note.note===i.note}))&&r.press(n)}},e.prototype.keyUp=function(n){var i=new Ze(n).baseNote;if(i.accidental===void 0)(r=this.whiteKeys.find(function(s){return s.note.note===i.note}))&&r.release();else if(i.accidental==="#"){var r;(r=this.blackKeys.find(function(s){return s.note.note===i.note}))&&r.release()}},e.prototype.setInstrumentSettings=function(n){t.prototype.setInstrumentSettings.call(this,n),this.whiteKeys.forEach(function(i){return i.setInstrumentSettings(n)}),this.blackKeys.forEach(function(i){return i.setInstrumentSettings(n)})},e.prototype.createOctaveNumberLabel=function(){this._label=this.container.group(),this._labelText=this._label.text(""+this.octave).fill("#000").font({family:"Helvetica",size:this.whiteKeyHeight/this.LABEL_SIZE_RATIO,anchor:"left"}),this._label.attr("pointer-events","none")},e}(Cf),zx=function(t){function e(n,i,r,s,o,a){var l=t.call(this,n,a,i,r)||this;return l.octaves=[],l.availableWidth=s,l.availableHeight=o,l.instrumentSettings=a,l}return ia(e,t),e.prototype.create=function(){for(var n=this.instrumentSettings.startOctave;n<=this.instrumentSettings.endOctave;n++){var i=new Xx(this.container.group(),this.instrumentSettings,this.onKeyPress,this.onKeyRelease,n,n===this.instrumentSettings.startOctave?this.instrumentSettings.startNote:"C",n===this.instrumentSettings.endOctave?this.instrumentSettings.endNote:"B",this.whiteKeyWidth);i.create(),this.octaves.push(i)}},e.prototype.layout=function(n,i){var r=this;this.availableWidth=n,this.availableHeight=i;var s=0;this.octaves.forEach(function(o){o.layout(r.whiteKeyWidth),o.move(s,0),s+=o.boxWidth})},Object.defineProperty(e.prototype,"numberOfWhiteKeys",{get:function(){for(var n=0,i=ct.NOTE_LIST,r=this.instrumentSettings.startOctave;r<=this.instrumentSettings.endOctave;r++)r===this.instrumentSettings.startOctave?this.instrumentSettings.endOctave>this.instrumentSettings.startOctave?n+=7-i.indexOf(this.instrumentSettings.startNote):n=i.indexOf(this.instrumentSettings.endNote)-i.indexOf(this.instrumentSettings.startNote)+1:r===this.instrumentSettings.endOctave?n+=i.indexOf(this.instrumentSettings.endNote)+1:n+=7;return n},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"whiteKeyWidth",{get:function(){var n=this.availableWidth/this.numberOfWhiteKeys;return n*ct.WHITE_KEY_RATIO<=this.availableHeight?n:this.availableHeight/ct.WHITE_KEY_RATIO},enumerable:!0,configurable:!0}),e.prototype.keyDown=function(n){if(this.octaves.length>0&&n.octave!==void 0){var i=new Ze(n),r=this.octaves.find(function(s){return s.octave===i.baseNote.octave});r&&r.keyDown(n)}},e.prototype.keyUp=function(n){if(this.octaves.length>0&&n.octave!==void 0){var i=this.octaves.find(function(r){return r.octave===n.octave});i&&i.keyUp(n)}},e.prototype.setInstrumentSettings=function(n){t.prototype.setInstrumentSettings.call(this,n),this.octaves.forEach(function(i){return i.setInstrumentSettings(n)})},e}(Cf),Yx=function(){function t(e){this.startOctave=2,this.startNote="C",this.endOctave=6,this.endNote="C",this.showNoteNames="onpress",this.highlightedNotes=[],this.highlightColor="#0c0",this.specialHighlightedNotes=[],this.specialHighlightColor="#f00",this.showOctaveNumbers=!1,this.keyPressStyle="subtle",this.vividKeyPressColor="#f33",this._reloadNeeded=!1,this.applySettings(e)}return Object.defineProperty(t.prototype,"reloadNeded",{get:function(){return this._reloadNeeded},enumerable:!0,configurable:!0}),t.prototype.applySettings=function(e){var n=this;this._reloadNeeded=!1,e!==void 0&&(e.startOctave!==void 0&&(this.startOctave=e.startOctave,this._reloadNeeded=!0),e.startNote!==void 0&&(this.startNote=e.startNote,this._reloadNeeded=!0),e.endOctave!==void 0&&(this.endOctave=e.endOctave,this._reloadNeeded=!0),e.endNote!==void 0&&(this.endNote=e.endNote,this._reloadNeeded=!0),e.showNoteNames!==void 0&&(this.showNoteNames=e.showNoteNames,this._reloadNeeded=!0),e.highlightedNotes!==void 0&&(this.highlightedNotes.splice(0),e.highlightedNotes.forEach(function(i){return n.highlightedNotes.push(new Ze(i))})),e.highlightColor!==void 0&&(this.highlightColor=e.highlightColor),e.specialHighlightedNotes!==void 0&&(this.specialHighlightedNotes.splice(0),e.specialHighlightedNotes.forEach(function(i){return n.specialHighlightedNotes.push(new Ze(i))})),e.specialHighlightColor!==void 0&&(this.specialHighlightColor=e.specialHighlightColor),e.showOctaveNumbers!==void 0&&(this.showOctaveNumbers=e.showOctaveNumbers),e.keyPressStyle!==void 0&&(this.keyPressStyle=e.keyPressStyle),e.vividKeyPressColor!==void 0&&(this.vividKeyPressColor=e.vividKeyPressColor))},t}(),cS=function(){function t(e,n){this.keyPressEventHandlers=[],this.keyReleaseEventHandlers=[],this.resizeCounter=0,this.container=e,this.settings=new Yx(n),this.create=this.create.bind(this),this.layout=this.layout.bind(this),this.keyDown=this.keyDown.bind(this),this.keyUp=this.keyUp.bind(this),this.destroy=this.destroy.bind(this),this.handleMouseKeyDown=this.handleMouseKeyDown.bind(this),this.handleMouseKeyUp=this.handleMouseKeyUp.bind(this),this.handleResize=this.handleResize.bind(this),this.reload=this.reload.bind(this)}return t.prototype.create=function(){this.img=Kg().addTo(this.container).size("100%","100%"),this.img.css("-ms-user-select","none"),this.img.css("-webkit-user-select","none"),this.img.css("-moz-user-select","none"),this.img.css("user-select","none"),this.keybed=new zx(this.img.group(),this.handleMouseKeyDown,this.handleMouseKeyUp,this.container.clientWidth,this.container.clientHeight,this.settings),this.keybed.create(),this.layout(),window.addEventListener("resize",this.handleResize)},t.prototype.destroy=function(){this.container.removeChild(this.img.node),window.removeEventListener("resize",this.handleResize)},t.prototype.keyDown=function(e){this.keybed&&this.keybed.keyDown(new Ze(e))},t.prototype.keyUp=function(e){this.keybed&&this.keybed.keyUp(new Ze(e))},t.prototype.addKeyMouseDownListener=function(e){this.keyPressEventHandlers.push(e)},t.prototype.addKeyMouseUpListener=function(e){this.keyReleaseEventHandlers.push(e)},t.prototype.removeKeyMouseDownListener=function(e){e!==void 0?this.keyPressEventHandlers.indexOf(e)>-1&&this.keyPressEventHandlers.splice(this.keyPressEventHandlers.indexOf(e),1):this.keyPressEventHandlers.splice(0)},t.prototype.removeKeyMouseUpListener=function(e){e!==void 0?this.keyReleaseEventHandlers.indexOf(e)>-1&&this.keyReleaseEventHandlers.splice(this.keyReleaseEventHandlers.indexOf(e),1):this.keyReleaseEventHandlers.splice(0)},t.prototype.reload=function(){this.destroy(),this.create()},t.prototype.applySettings=function(e){this.settings.applySettings(e),this.settings.reloadNeded?this.reload():(this.keybed&&this.keybed.setInstrumentSettings(this.settings),this.layout())},t.prototype.handleResize=function(){var e=this;this.resizeCounter++,setTimeout(function(){e.resizeCounter--,e.resizeCounter<=0&&e.layout()},300)},t.prototype.layout=function(){this.img&&this.keybed&&(this.img.size("100%","100%"),this.keybed.layout(this.container.clientWidth,this.container.clientHeight),this.img.width(this.keybed.boxWidth).height(this.keybed.boxHeight))},t.prototype.handleMouseKeyDown=function(e){this.keyPressEventHandlers.forEach(function(n){return n(e)})},t.prototype.handleMouseKeyUp=function(e){this.keyReleaseEventHandlers.forEach(function(n){return n(e)})},t.prototype.rasterize=function(e,n){var i=document.createElement("canvas"),r=document.createElement("div"),s=Kg().addTo(r).svg(this.img.svg()).size(this.img.width(),this.img.height());if(n){var o=s.root().group();o.text(n).fill("#888").font({family:"Helvetica",size:12,anchor:"start"}),s.height(s.height()+o.height()+6),o.translate(s.width()-o.width()-6,s.height()-6)}i.width=s.width(),i.height=s.height();var a=s.svg(),l=i.getContext("2d"),d=window.URL,f=new Image(i.width,i.height);f.setAttribute("crossOrigin","anonymous");var u=new Blob([a],{type:"image/svg+xml"}),c=d.createObjectURL(u);f.onload=function(){l.drawImage(f,0,0),d.revokeObjectURL(c),e(i.toDataURL("image/png"))},f.src=c},t}(),Qg=function(){function t(e,n){this.notes=[],this.notes=e,this.mode=n}return Object.defineProperty(t.prototype,"root",{get:function(){return this.notes.length>0?this.notes[0]:{note:"C"}},enumerable:!0,configurable:!0}),t}();(function(){function t(){}return t.getScale=function(e,n){var i=new Ze(e).baseNote,r=t.chromatic.notes.findIndex(function(d){return i.note===d.note&&i.accidental===d.accidental}),s=t.modeSteps.get(n),o=[];if(s!==void 0){o.push(i);for(var a=r,l=0;l<s.length;l++)a=(a+s[l])%12,o.push(t.chromatic.notes[a])}return new Qg(t.adjustScale(e,o),n)},t.adjustScale=function(e,n){var i=[];return n.forEach(function(r){if(e.accidental==="b"&&r.accidental==="#"){var s=t.chromatic.notes.findIndex(function(o){return o.note===r.note&&o.accidental===r.accidental});i.push({note:t.chromatic.notes[s+1].note,accidental:"b"})}else i.push(r)}),i},t.chromatic=new Qg([new Ze("C"),new Ze("C#"),new Ze("D"),new Ze("D#"),new Ze("E"),new Ze("F"),new Ze("F#"),new Ze("G"),new Ze("G#"),new Ze("A"),new Ze("A#"),new Ze("B")],"chromatic"),t.modeSteps=new Map([["major",[2,2,1,2,2,2,1]],["minor",[2,1,2,2,1,2,2]],["dorian",[2,1,2,2,2,1,2]],["phrygian",[1,2,2,2,1,2,2]],["lydian",[2,2,2,1,2,2,1]],["mixolydian",[2,2,1,2,2,1,2]],["locrian",[1,2,2,1,2,2,2]],["majorpentatonic",[2,2,3,2,3]],["minorpentatonic",[3,2,2,3,2]],["harmonicminor",[2,1,2,2,1,3,1]],["melodicminor",[2,1,2,2,2,2,1]]]),t})();const Vx=()=>{const t=B.useRef(null),e=B.useRef(null),{highlightedNotes:n,useFlats:i}=lf(),r=B.useRef({noteOn:null,noteOff:null});return B.useEffect(()=>{const s=()=>{if(e.current){try{typeof e.current.destroy=="function"&&e.current.destroy()}catch(u){console.warn("Error destroying piano instance:",u)}e.current=null}},o=()=>{if(t.current&&!e.current)try{t.current.innerHTML="",e.current=new cS(t.current,{startOctave:1,endOctave:8,showNoteNames:"always",highlightedNotes:n,specialHighlightedNotes:[],keyPressStyle:"vivid",vividKeyPressColor:"rgb(255, 255, 0)"}),e.current.create()}catch(u){console.error("Error creating piano instance:",u),e.current=null}};s(),o();const a=u=>{if(e.current)try{const c=i?u:u.replace("s","#");console.log(`Piano highlighting note: ${c}`),e.current.keyDown(c)}catch(c){console.warn(`Error highlighting note ${u}:`,c)}},l=u=>{if(e.current)try{const c=i?u:u.replace("s","#");console.log(`Piano releasing note: ${c}`),e.current.keyUp(c)}catch(c){console.warn(`Error releasing note ${u}:`,c)}},d=xr.addNoteOnListener(a),f=xr.addNoteOffListener(l);return r.current={noteOn:d,noteOff:f},()=>{r.current.noteOn&&r.current.noteOn(),r.current.noteOff&&r.current.noteOff(),s()}},[n,i]),v.jsx("div",{ref:t,className:"piano-display"})};class P extends Error{constructor(e,n=""){super("[RuntimeError] "+e+": "+n),this.code=e}}function ra(){return typeof globalThis<"u"?globalThis:typeof self<"u"?self:typeof window<"u"?window:typeof global<"u"?global:Function("return this")()}function Xe(t,e="undefined",n=""){if(t===void 0)throw new P(e,n);return t}function Ge(t,...e){if(!e)return;const n=Array.prototype.slice.call(e).join(" ");ra().console.log(t+": "+n)}function qx(...t){const e=t.join(" "),n=new Error;ra().console.log("Warning: ",e,n.stack)}function Jx(t,e){return t%e>=e/2?parseInt(`${t/e}`,10)*e+e:parseInt(`${t/e}`,10)*e}function wf(t,e){let n=e+(t-e)/2;return n%2>0&&(n=Jx(n*10,5)/10),n}function Gd(t){return`vf-${t}`}function Gg(t){return t=t%(2*Math.PI),t<0&&(t+=2*Math.PI),t}function wo(t){return t.reduce((e,n)=>e+n,0)}class ue{static get CATEGORY(){return"Fraction"}static GCD(e,n){if(typeof e!="number"||Number.isNaN(e)||typeof n!="number"||Number.isNaN(n))throw new P("BadArgument",`Invalid numbers: ${e}, ${n}`);let i;for(;n!==0;)i=n,n=e%n,e=i;return e}static LCM(e,n){return e*n/ue.GCD(e,n)}static LCMM(e){return e.length===0?0:e.length===1?e[0]:e.length===2?ue.LCM(e[0],e[1]):ue.LCM(e.shift(),ue.LCMM(e))}constructor(e,n){this.numerator=1,this.denominator=1,this.set(e,n)}set(e=1,n=1){return this.numerator=e,this.denominator=n,this}value(){return this.numerator/this.denominator}simplify(){let e=this.numerator,n=this.denominator;const i=ue.GCD(e,n);return e/=i,n/=i,n<0&&(n=-n,e=-e),this.set(e,n)}add(e=0,n=1){const[i,r]=Pa(e,n),s=ue.LCM(this.denominator,r),o=s/this.denominator,a=s/r,l=this.numerator*o+i*a;return this.set(l,s)}subtract(e=0,n=1){const[i,r]=Pa(e,n),s=ue.LCM(this.denominator,r),o=s/this.denominator,a=s/r,l=this.numerator*o-i*a;return this.set(l,s)}multiply(e=1,n=1){const[i,r]=Pa(e,n);return this.set(this.numerator*i,this.denominator*r)}divide(e=1,n=1){const[i,r]=Pa(e,n);return this.set(this.numerator*r,this.denominator*i)}equals(e){const n=ue.fractionA.copy(e).simplify(),i=ue.fractionB.copy(this).simplify();return n.numerator===i.numerator&&n.denominator===i.denominator}greaterThan(e){const n=ue.fractionA.copy(this);return n.subtract(e),n.numerator>0}greaterThanEquals(e){const n=ue.fractionA.copy(this);return n.subtract(e),n.numerator>=0}lessThan(e){return!this.greaterThanEquals(e)}lessThanEquals(e){return!this.greaterThan(e)}clone(){return new ue(this.numerator,this.denominator)}copy(e){return typeof e=="number"?this.set(e):this.set(e.numerator,e.denominator)}quotient(){return Math.floor(this.numerator/this.denominator)}remainder(){return this.numerator%this.denominator}makeAbs(){return this.denominator=Math.abs(this.denominator),this.numerator=Math.abs(this.numerator),this}toString(){return`${this.numerator}/${this.denominator}`}toSimplifiedString(){return ue.fractionA.copy(this).simplify().toString()}toMixedString(){let e="";const n=this.quotient(),i=ue.fractionA.copy(this);return n<0&&i.makeAbs(),n!==0?(e+=n,i.numerator!==0&&(e+=` ${i.toSimplifiedString()}`)):i.numerator===0?e="0":e=i.toSimplifiedString(),e}parse(e){const n=e.split("/"),i=parseInt(n[0],10),r=n[1]?parseInt(n[1],10):1;return this.set(i,r)}}ue.fractionA=new ue;ue.fractionB=new ue;function Pa(t,e=1){return typeof t=="number"?[t,e]:[t.numerator,t.denominator]}class W{static clear(e){e?(this.cacheFont.delete(e),this.cacheStyle.delete(e)):(this.cacheFont.clear(),this.cacheStyle.clear())}static getFontInfo(e){let n=this.cacheFont.get(e);return n||(n={family:W.get(`${e}.fontFamily`),size:W.get(`${e}.fontSize`)*W.get(`${e}.fontScale`),weight:W.get(`${e}.fontWeight`),style:W.get(`${e}.fontStyle`)},this.cacheFont.set(e,n)),structuredClone(n)}static getStyle(e){let n=this.cacheStyle.get(e);return n||(n={fillStyle:W.get(`${e}.fillStyle`),strokeStyle:W.get(`${e}.strokeStyle`),lineWidth:W.get(`${e}.lineWidth`),lineDash:W.get(`${e}.lineDash`),shadowBlur:W.get(`${e}.shadowBlur`),shadowColor:W.get(`${e}.shadowColor`)},this.cacheStyle.set(e,n)),structuredClone(n)}static get(e,n){var i;const r=e.split("."),s=r.pop();let o=lo,a=n;for(;o;){a=(i=o[s])!==null&&i!==void 0?i:a;const l=r.shift();if(l)o=o[l];else break}return a}}W.cacheStyle=new Map;W.cacheFont=new Map;const lo={fontFamily:"Bravura,Academico",fontSize:30,fontScale:1,fontWeight:"normal",fontStyle:"normal",Accidental:{cautionary:{fontSize:20},grace:{fontSize:20},noteheadAccidentalPadding:1,leftPadding:2,accidentalSpacing:3},Annotation:{fontSize:10},Bend:{fontSize:10,line:{strokeStyle:"#777777",lineWidth:1}},ChordSymbol:{fontSize:12,spacing:.05,subscriptOffset:.2,superscriptOffset:-.4,superSubRatio:.6},FretHandFinger:{fontSize:9,fontWeight:"bold"},GraceNote:{fontScale:2/3},GraceTabNote:{fontScale:2/3},NoteHead:{minPadding:2},PedalMarking:{text:{fontSize:12,fontStyle:"italic"}},Repetition:{text:{fontSize:12,fontWeight:"bold",offsetX:12,offsetY:25,spacing:5},coda:{offsetY:25},segno:{offsetY:10}},Stave:{strokeStyle:"#999999",fontSize:8,padding:12,endPaddingMax:10,endPaddingMin:5,unalignedNotePadding:10},StaveConnector:{text:{fontSize:16}},StaveLine:{fontSize:10},StaveSection:{fontSize:10,fontWeight:"bold",lineWidth:2,padding:2,strokeStyle:"black"},StaveTempo:{fontSize:14,glyph:{fontSize:25},name:{fontWeight:"bold"}},StaveText:{fontSize:16},StaveTie:{fontSize:10},Stem:{strokeStyle:"black"},StringNumber:{fontSize:10,fontWeight:"bold",verticalPadding:8,stemPadding:2,leftPadding:5,rightPadding:6},Stroke:{text:{fontSize:10,fontStyle:"italic",fontWeight:"bold"}},TabNote:{text:{fontSize:9}},TabSlide:{fontSize:10,fontStyle:"italic",fontWeight:"bold"},TabStave:{strokeStyle:"#999999",fontSize:8},TabTie:{fontSize:10},TextBracket:{fontSize:15,fontStyle:"italic"},TextNote:{text:{fontSize:12}},Tremolo:{spacing:7},Tuplet:{yOffset:0,textYOffset:2},Volta:{fontSize:9,fontWeight:"bold"}};class oi{static copy(e){return new oi(e.x,e.y,e.w,e.h)}constructor(e,n,i,r){this.x=e,this.y=n,this.w=i,this.h=r}getX(){return this.x}getY(){return this.y}getW(){return this.w}getH(){return this.h}setX(e){return this.x=e,this}setY(e){return this.y=e,this}setW(e){return this.w=e,this}setH(e){return this.h=e,this}move(e,n){return this.x+=e,this.y+=n,this}clone(){return oi.copy(this)}mergeWith(e){const n=e,i=this.x<n.x?this.x:n.x,r=this.y<n.y?this.y:n.y,s=Math.max(this.x+this.w,n.x+n.w)-i,o=Math.max(this.y+this.h,n.y+n.h)-r;return this.x=i,this.y=r,this.w=s,this.h=o,this}}var Zx=globalThis&&globalThis.__awaiter||function(t,e,n,i){function r(s){return s instanceof n?s:new n(function(o){o(s)})}return new(n||(n=Promise))(function(s,o){function a(f){try{d(i.next(f))}catch(u){o(u)}}function l(f){try{d(i.throw(f))}catch(u){o(u)}}function d(f){f.done?s(f.value):r(f.value).then(a,l)}d((i=i.apply(t,e||[])).next())})},Er;(function(t){t.NORMAL="normal",t.BOLD="bold"})(Er||(Er={}));var Ui;(function(t){t.NORMAL="normal",t.ITALIC="italic"})(Ui||(Ui={}));let ka;class ne{static convertSizeToPixelValue(e){var n;if(typeof e=="number")return e*ne.scaleToPxFrom.pt;{const i=parseFloat(e);if(isNaN(i))return 0;const r=e.replace(/[\d.\s]/g,"").toLowerCase(),s=(n=ne.scaleToPxFrom[r])!==null&&n!==void 0?n:1;return i*s}}static convertSizeToPointValue(e){var n;if(typeof e=="number")return e;{const i=parseFloat(e);if(isNaN(i))return 0;const r=e.replace(/[\d.\s]/g,"").toLowerCase(),s=((n=ne.scaleToPxFrom[r])!==null&&n!==void 0?n:1)/ne.scaleToPxFrom.pt;return i*s}}static validate(e,n,i,r){if(typeof e=="string"&&n===void 0&&i===void 0&&r===void 0)return ne.fromCSSString(e);let s;return typeof e=="object"?(s=e.family,n=e.size,i=e.weight,r=e.style):s=e,s=s??W.get("fontFamily"),n=n??W.get("fontSize")+"pt",i=i??Er.NORMAL,r=r??Ui.NORMAL,i===""&&(i=Er.NORMAL),r===""&&(r=Ui.NORMAL),typeof n=="number"&&(n=`${n}pt`),typeof i=="number"&&(i=i.toString()),{family:s,size:n,weight:i,style:r}}static fromCSSString(e){ka||(ka=document.createElement("span")),ka.style.font=e;const{fontFamily:n,fontSize:i,fontWeight:r,fontStyle:s}=ka.style;return{family:n,size:i,weight:r,style:s}}static toCSSString(e){var n;if(!e)return"";let i;const r=e.style;r===Ui.NORMAL||r===""||r===void 0?i="":i=r.trim()+" ";let s;const o=e.weight;o===Er.NORMAL||o===""||o===void 0?s="":typeof o=="number"?s=o+" ":s=o.trim()+" ";let a;const l=e.size;l===void 0?a=W.get("fontSize")+"pt":typeof l=="number"?a=l+"pt ":a=l.trim()+" ";const d=(n=e.family)!==null&&n!==void 0?n:W.get("fontFamily");return`${i}${s}${a}${d}`}static scaleSize(e,n){if(typeof e=="number")return e*n;{const i=parseFloat(e),r=e.replace(/[\d.\s]/g,"");return`${i*n}${r}`}}static isBold(e){if(e){if(typeof e=="number")return e>=600;{const n=parseInt(e,10);return isNaN(n)?e.toLowerCase()==="bold":n>=600}}else return!1}static isItalic(e){return e?e.toLowerCase()===Ui.ITALIC:!1}static load(e,n,i){return Zx(this,void 0,void 0,function*(){if(typeof FontFace>"u")return Promise.reject(new Error("FontFace API is not available in this environment. Cannot load fonts."));if(n===void 0){const a=ne.FILES;if(!(e in a))return Promise.reject(new Error(`Font ${e} not found in Font.FILES`));n=ne.HOST_URL+a[e]}const r=new FontFace(e,`url(${n})`,i),s=r.load();let o;return typeof document<"u"?o=document.fonts:typeof self<"u"&&"fonts"in self&&(o=self.fonts),o==null||o.add(r),s})}static getURLForFont(e){const n=ne.FILES;if(e in n)return ne.HOST_URL+n[e]}}ne.scaleToPxFrom={pt:4/3,px:1,em:16,"%":4/25,in:96,mm:96/25.4,cm:96/2.54};ne.HOST_URL="https://cdn.jsdelivr.net/npm/@vexflow-fonts/";ne.FILES={Academico:"academico/academico.woff2",Bravura:"bravura/bravura.woff2","Bravura Text":"bravuratext/bravuratext.woff2",Edwin:"edwin/edwin-roman.woff2","Finale Ash":"finaleash/finaleash.woff2","Finale Ash Text":"finaleashtext/finaleashtext.woff2","Finale Broadway":"finalebroadway/finalebroadway.woff2","Finale Broadway Text":"finalebroadwaytext/finalebroadwaytext.woff2","Finale Jazz":"finalejazz/finalejazz.woff2","Finale Jazz Text":"finalejazztext/finalejazztext.woff2","Finale Maestro":"finalemaestro/finalemaestro.woff2","Finale Maestro Text":"finalemaestrotext/finalemaestrotext-regular.woff2",Gonville:"gonville/gonville.woff2",Gootville:"gootville/gootville.woff2","Gootville Text":"gootvilletext/gootvilletext.woff2",Leipzig:"leipzig/leipzig.woff2",Leland:"leland/leland.woff2","Leland Text":"lelandtext/lelandtext.woff2",MuseJazz:"musejazz/musejazz.woff2","MuseJazz Text":"musejazztext/musejazztext.woff2",Nepomuk:"nepomuk/nepomuk.woff2",Petaluma:"petaluma/petaluma.woff2","Petaluma Script":"petalumascript/petalumascript.woff2","Petaluma Text":"petalumatext/petalumatext.woff2","Roboto Slab":"robotoslab/robotoslab-regular-400.woff2",Sebastian:"sebastian/sebastian.woff2","Sebastian Text":"sebastiantext/sebastiantext.woff2"};class _g{constructor(){this.id={},this.type={},this.class={}}}class ls{static getDefaultRegistry(){return ls.defaultRegistry}static enableDefaultRegistry(e){ls.defaultRegistry=e}static disableDefaultRegistry(){ls.defaultRegistry=void 0}constructor(){this.index=new _g}clear(){return this.index=new _g,this}setIndexValue(e,n,i,r){const s=this.index;s[e][n]||(s[e][n]={}),s[e][n][i]=r}updateIndex({id:e,name:n,value:i,oldValue:r}){const s=this.getElementById(e);r!==void 0&&this.index[n][r]&&delete this.index[n][r][e],i&&s&&this.setIndexValue(n,i,s.getAttribute("id"),s)}register(e,n){if(n=n||e.getAttribute("id"),!n)throw new P("Can't add element without `id` attribute to registry");return e.setAttribute("id",n),this.setIndexValue("id",n,n,e),this.updateIndex({id:n,name:"type",value:e.getAttribute("type"),oldValue:void 0}),e.onRegister(this),this}getElementById(e){var n,i;return(i=(n=this.index.id)===null||n===void 0?void 0:n[e])===null||i===void 0?void 0:i[e]}getElementsByAttribute(e,n){const i=this.index[e];if(i){const r=i[n];if(r)return Object.keys(r).map(o=>r[o])}return[]}getElementsByType(e){return this.getElementsByAttribute("type",e)}getElementsByClass(e){return this.getElementsByAttribute("class",e)}onUpdate(e){return["id","type","class"].includes(e.name)&&this.updateIndex(e),this}}class Q{static get CATEGORY(){return"Element"}static newID(){return`auto${Q.ID++}`}static setTextMeasurementCanvas(e){Q.txtCanvas=e}static getTextMeasurementCanvas(){let e=Q.txtCanvas;return e||(typeof document<"u"?e=document.createElement("canvas"):typeof OffscreenCanvas<"u"&&(e=new OffscreenCanvas(300,150)),Q.txtCanvas=e),e}constructor(e){var n;this.children=[],this.style={},this._text="",this.metricsValid=!1,this._textMetrics={fontBoundingBoxAscent:0,fontBoundingBoxDescent:0,actualBoundingBoxAscent:0,actualBoundingBoxDescent:0,actualBoundingBoxLeft:0,actualBoundingBoxRight:0,width:0,alphabeticBaseline:0,emHeightAscent:0,emHeightDescent:0,hangingBaseline:0,ideographicBaseline:0},this._height=0,this._width=0,this.xShift=0,this.yShift=0,this.x=0,this.y=0,this.attrs={id:Q.newID(),type:e??this.constructor.CATEGORY,class:""},this.rendered=!1,this._fontInfo=W.getFontInfo(this.attrs.type),this.style=W.getStyle(this.attrs.type),this.fontScale=W.get(`${this.attrs.type}.fontScale`),(n=ls.getDefaultRegistry())===null||n===void 0||n.register(this)}addChild(e){if(e.parent)throw new P("Element","Parent already defined");return e.parent=this,this.children.push(e),this}getCategory(){return this.attrs.type}setStyle(e){return this.style=e,this}setGroupStyle(e){return this.style=e,this.children.forEach(n=>n.setGroupStyle(e)),this}getStyle(){return this.style}applyStyle(e=this.context,n=this.getStyle()){return e?(n.shadowColor&&e.setShadowColor(n.shadowColor),n.shadowBlur&&e.setShadowBlur(n.shadowBlur),n.fillStyle&&e.setFillStyle(n.fillStyle),n.strokeStyle&&e.setStrokeStyle(n.strokeStyle),n.lineWidth&&e.setLineWidth(n.lineWidth),n.lineDash&&e.setLineDash(n.lineDash.split(" ").map(Number)),this):this}drawWithStyle(){const e=this.checkContext();return e.save(),this.applyStyle(e),this.draw(),e.restore(),this}draw(){throw new P("Element","Draw not defined")}hasClass(e){var n;return this.attrs.class?((n=this.attrs.class)===null||n===void 0?void 0:n.split(" ").indexOf(e))!==-1:!1}addClass(e){var n;return this.hasClass(e)?this:(this.attrs.class?this.attrs.class=`${this.attrs.class} ${e}`:this.attrs.class=`${e}`,(n=this.registry)===null||n===void 0||n.onUpdate({id:this.attrs.id,name:"class",value:e,oldValue:void 0}),this)}removeClass(e){var n,i;if(!this.hasClass(e))return this;const r=(n=this.attrs.class)===null||n===void 0?void 0:n.split(" ");return r&&(r.splice(r.indexOf(e)),this.attrs.class=r.join(" ")),(i=this.registry)===null||i===void 0||i.onUpdate({id:this.attrs.id,name:"class",value:void 0,oldValue:e}),this}onRegister(e){return this.registry=e,this}isRendered(){return this.rendered}setRendered(e=!0){return this.rendered=e,this}getAttributes(){return this.attrs}getAttribute(e){return this.attrs[e]}getSVGElement(e=""){const n=Gd(this.attrs.id+e),i=document.getElementById(n);if(i)return i}setAttribute(e,n){var i;const r=this.attrs.id,s=this.attrs[e];return this.attrs[e]=n,(i=this.registry)===null||i===void 0||i.onUpdate({id:r,name:e,value:n,oldValue:s}),this}getBoundingBox(){return new oi(this.x+this.xShift,this.y+this.yShift-this.textMetrics.actualBoundingBoxAscent,this.width,this.height)}getContext(){return this.context}setContext(e){return this.context=e,this}checkContext(){return Xe(this.context,"NoContext","No rendering context attached to instance.")}set font(e){this.setFont(e)}get font(){return ne.toCSSString(this._fontInfo)}setFont(e,n,i,r){const s=W.getFontInfo(this.attrs.type),o=typeof e=="object",a=typeof e=="string",l=n===void 0&&i===void 0&&r===void 0;return this.metricsValid=!1,o?this._fontInfo=Object.assign(Object.assign({},s),e):a&&l?this._fontInfo=ne.fromCSSString(e):this._fontInfo=ne.validate(e??s.family,n??s.size,i??s.weight,r??s.style),this}getFont(){return ne.toCSSString(this._fontInfo)}get fontInfo(){return this._fontInfo}set fontInfo(e){this.setFont(e)}setFontSize(e){const n=this.fontInfo;return this.setFont(n.family,e,n.weight,n.style),this}getFontSize(){return this.fontSize}getFontScale(){return this.fontScale}set fontSize(e){this.setFontSize(e)}get fontSize(){let e=this.fontInfo.size;return typeof e=="number"&&(e=`${e}pt`),e}get fontSizeInPoints(){return ne.convertSizeToPointValue(this.fontSize)}get fontSizeInPixels(){return ne.convertSizeToPixelValue(this.fontSize)}get fontStyle(){return this.fontInfo.style}set fontStyle(e){const n=this.fontInfo;this.setFont(n.family,n.size,n.weight,e)}get fontWeight(){return this.fontInfo.weight+""}set fontWeight(e){const n=this.fontInfo;this.setFont(n.family,n.size,e,n.style)}getWidth(){return this.width}get width(){return this.metricsValid||this.measureText(),this._width}setWidth(e){return this.width=e,this}set width(e){this.metricsValid||this.measureText(),this._width=e}setX(e){return this.x=e,this}getX(){return this.x}getY(){return this.y}setY(e){return this.y=e,this}setYShift(e){return this.yShift=e,this}getYShift(){return this.yShift}setXShift(e){return this.xShift=e,this}getXShift(){return this.xShift}setText(e){return this.text=e,this}set text(e){this.metricsValid=!1,this._text=e}getText(){return this._text}get text(){return this._text}renderText(e,n,i){e.setFont(this._fontInfo),e.fillText(this._text,n+this.x+this.xShift,i+this.y+this.yShift),this.children.forEach(r=>{e.setFont(r.fontInfo),e.fillText(r.text,n+r.x+r.xShift,i+r.y+r.yShift)})}measureText(){var e;const n=(e=Q.getTextMeasurementCanvas())===null||e===void 0?void 0:e.getContext("2d");return n?(n.font=ne.toCSSString(ne.validate(this.fontInfo)),this._textMetrics=n.measureText(this.text),this._height=this._textMetrics.actualBoundingBoxAscent+this._textMetrics.actualBoundingBoxDescent,this._width=this._textMetrics.width,this.metricsValid=!0,this._textMetrics):(console.warn("Element: No context for txtCanvas. Returning empty text metrics."),this._textMetrics)}static measureWidth(e,n=""){var i;const r=(i=Q.getTextMeasurementCanvas())===null||i===void 0?void 0:i.getContext("2d");return r?(r.font=ne.toCSSString(W.getFontInfo(n)),r.measureText(e).width):(console.warn("Element: No context for txtCanvas. Returning empty text metrics."),0)}getTextMetrics(){return this.textMetrics}get textMetrics(){return this.metricsValid||this.measureText(),this._textMetrics}getHeight(){return this.height}get height(){return this.metricsValid||this.measureText(),this._height}set height(e){this.metricsValid||this.measureText(),this._height=e}setOriginX(e){const n=this.getBoundingBox(),i=Math.abs((n.getX()-this.xShift)/n.getW()),r=(e-i)*n.getW();this.xShift=-r}setOriginY(e){const n=this.getBoundingBox(),i=Math.abs((n.getY()-this.yShift)/n.getH()),r=(e-i)*n.getH();this.yShift=-r}setOrigin(e,n){this.setOriginX(e),this.setOriginY(n)}}Q.ID=1e3;var Fe;(function(t){t[t.CENTER=0]="CENTER",t[t.LEFT=1]="LEFT",t[t.RIGHT=2]="RIGHT",t[t.ABOVE=3]="ABOVE",t[t.BELOW=4]="BELOW"})(Fe||(Fe={}));class q extends Q{static get CATEGORY(){return"Modifier"}static get Position(){return Fe}static get PositionString(){return{center:Fe.CENTER,above:Fe.ABOVE,below:Fe.BELOW,left:Fe.LEFT,right:Fe.RIGHT}}constructor(){super(),this.width=0,this.textLine=0,this.position=q.Position.LEFT,this.spacingFromNextModifier=0}reset(){}getNote(){return Xe(this.note,"NoNote","Modifier has no note.")}checkAttachedNote(){const e=this.getCategory();return Xe(this.index,"NoIndex",`Can't draw ${e} without an index.`),Xe(this.note,"NoNote",`Can't draw ${e} without a note.`)}setNote(e){return this.note=e,this}getIndex(){return this.index}checkIndex(){return Xe(this.index,"NoIndex","Modifier has an invalid index.")}setIndex(e){return this.index=e,this}getModifierContext(){return this.modifierContext}checkModifierContext(){return Xe(this.modifierContext,"NoModifierContext","Modifier Context Required")}setModifierContext(e){return this.modifierContext=e,this}getPosition(){return this.position}setPosition(e){return this.position=typeof e=="string"?q.PositionString[e]:e,this.reset(),this}setTextLine(e){return this.textLine=e,this}setYShift(e){return this.yShift=e,this}setSpacingFromNextModifier(e){this.spacingFromNextModifier=e}getSpacingFromNextModifier(){return this.spacingFromNextModifier}setXShift(e){return this.xShift=0,this.position===q.Position.LEFT?this.xShift-=e:this.xShift+=e,this}getXShift(){return this.xShift}draw(){throw this.checkContext(),new P("NotImplemented","draw() not implemented for this modifier.")}alignSubNotesWithNote(e,n,i=q.Position.LEFT){const r=n.getTickContext(),s=r.getMetrics(),o=n.getStave(),a=i===q.Position.RIGHT?r.getX()+this.getSpacingFromNextModifier()*e.length+10:r.getX()-s.modLeftPx-s.modRightPx+this.getSpacingFromNextModifier();e.forEach(l=>{const d=l.getTickContext();o&&l.setStave(o),d.setXOffset(a)})}}class De{static get NUM_TONES(){return this.canonicalNotes.length}static get roots(){return["c","d","e","f","g","a","b"]}static get rootValues(){return[0,2,4,5,7,9,11]}static get rootIndexes(){return{c:0,d:1,e:2,f:3,g:4,a:5,b:6}}static get canonicalNotes(){return["c","c#","d","d#","e","f","f#","g","g#","a","a#","b"]}static get diatonicIntervals(){return["unison","m2","M2","m3","M3","p4","dim5","p5","m6","M6","b7","M7","octave"]}static get diatonicAccidentals(){return{unison:{note:0,accidental:0},m2:{note:1,accidental:-1},M2:{note:1,accidental:0},m3:{note:2,accidental:-1},M3:{note:2,accidental:0},p4:{note:3,accidental:0},dim5:{note:4,accidental:-1},p5:{note:4,accidental:0},m6:{note:5,accidental:-1},M6:{note:5,accidental:0},b7:{note:6,accidental:-1},M7:{note:6,accidental:0},octave:{note:7,accidental:0}}}static get intervals(){return{u:0,unison:0,m2:1,b2:1,min2:1,S:1,H:1,2:2,M2:2,maj2:2,T:2,W:2,m3:3,b3:3,min3:3,M3:4,3:4,maj3:4,4:5,p4:5,"#4":6,b5:6,aug4:6,dim5:6,5:7,p5:7,"#5":8,b6:8,aug5:8,6:9,M6:9,maj6:9,b7:10,m7:10,min7:10,dom7:10,M7:11,maj7:11,8:12,octave:12}}static get scales(){return{major:[2,2,1,2,2,2,1],minor:[2,1,2,2,1,2,2],ionian:[2,2,1,2,2,2,1],dorian:[2,1,2,2,2,1,2],phyrgian:[1,2,2,2,1,2,2],lydian:[2,2,2,1,2,2,1],mixolydian:[2,2,1,2,2,1,2],aeolian:[2,1,2,2,1,2,2],locrian:[1,2,2,1,2,2,2]}}static get scaleTypes(){return{M:De.scales.major,m:De.scales.minor}}static get accidentals(){return["bb","b","n","#","##"]}static get noteValues(){return{c:{rootIndex:0,intVal:0},cn:{rootIndex:0,intVal:0},"c#":{rootIndex:0,intVal:1},"c##":{rootIndex:0,intVal:2},cb:{rootIndex:0,intVal:11},cbb:{rootIndex:0,intVal:10},d:{rootIndex:1,intVal:2},dn:{rootIndex:1,intVal:2},"d#":{rootIndex:1,intVal:3},"d##":{rootIndex:1,intVal:4},db:{rootIndex:1,intVal:1},dbb:{rootIndex:1,intVal:0},e:{rootIndex:2,intVal:4},en:{rootIndex:2,intVal:4},"e#":{rootIndex:2,intVal:5},"e##":{rootIndex:2,intVal:6},eb:{rootIndex:2,intVal:3},ebb:{rootIndex:2,intVal:2},f:{rootIndex:3,intVal:5},fn:{rootIndex:3,intVal:5},"f#":{rootIndex:3,intVal:6},"f##":{rootIndex:3,intVal:7},fb:{rootIndex:3,intVal:4},fbb:{rootIndex:3,intVal:3},g:{rootIndex:4,intVal:7},gn:{rootIndex:4,intVal:7},"g#":{rootIndex:4,intVal:8},"g##":{rootIndex:4,intVal:9},gb:{rootIndex:4,intVal:6},gbb:{rootIndex:4,intVal:5},a:{rootIndex:5,intVal:9},an:{rootIndex:5,intVal:9},"a#":{rootIndex:5,intVal:10},"a##":{rootIndex:5,intVal:11},ab:{rootIndex:5,intVal:8},abb:{rootIndex:5,intVal:7},b:{rootIndex:6,intVal:11},bn:{rootIndex:6,intVal:11},"b#":{rootIndex:6,intVal:0},"b##":{rootIndex:6,intVal:1},bb:{rootIndex:6,intVal:10},bbb:{rootIndex:6,intVal:9}}}isValidNoteValue(e){return e>=0&&e<De.canonicalNotes.length}isValidIntervalValue(e){return e>=0&&e<De.diatonicIntervals.length}getNoteParts(e){if(!e||e.length<1)throw new P("BadArguments","Invalid note name: "+e);if(e.length>3)throw new P("BadArguments","Invalid note name: "+e);const n=e.toLowerCase(),r=/^([cdefgab])(b|bb|n|#|##)?$/.exec(n);if(r!==null){const s=r[1],o=r[2];return{root:s,accidental:o}}else throw new P("BadArguments","Invalid note name: "+e)}getKeyParts(e){if(!e||e.length<1)throw new P("BadArguments","Invalid key: "+e);const n=e.toLowerCase(),r=/^([cdefgab])(b|#)?(mel|harm|m|M)?$/.exec(n);if(r!==null){const s=r[1],o=r[2];let a=r[3];return a||(a="M"),{root:s,accidental:o,type:a}}else throw new P("BadArguments",`Invalid key: ${e}`)}getNoteValue(e){const n=De.noteValues[e];if(n===void 0)throw new P("BadArguments",`Invalid note name: ${e}`);return n.intVal}getIntervalValue(e){const n=De.intervals[e];if(n===void 0)throw new P("BadArguments",`Invalid interval name: ${e}`);return n}getCanonicalNoteName(e){if(!this.isValidNoteValue(e))throw new P("BadArguments",`Invalid note value: ${e}`);return De.canonicalNotes[e]}getCanonicalIntervalName(e){if(!this.isValidIntervalValue(e))throw new P("BadArguments",`Invalid interval value: ${e}`);return De.diatonicIntervals[e]}getRelativeNoteValue(e,n,i=1){if(i!==1&&i!==-1)throw new P("BadArguments",`Invalid direction: ${i}`);let r=(e+i*n)%De.NUM_TONES;return r<0&&(r+=De.NUM_TONES),r}getRelativeNoteName(e,n){const i=this.getNoteParts(e),r=this.getNoteValue(i.root);let s=n-r;if(Math.abs(s)>De.NUM_TONES-3){let a=1;s>0&&(a=-1);const l=(n+1+(r+1))%De.NUM_TONES*a;if(Math.abs(l)>2)throw new P("BadArguments",`Notes not related: ${e}, ${n})`);s=l}if(Math.abs(s)>2)throw new P("BadArguments",`Notes not related: ${e}, ${n})`);let o=i.root;if(s>0)for(let a=1;a<=s;++a)o+="#";else if(s<0)for(let a=-1;a>=s;--a)o+="b";return o}getScaleTones(e,n){const i=[e];let r=e;for(let s=0;s<n.length;s++)r=this.getRelativeNoteValue(r,n[s]),r!==e&&i.push(r);return i}getIntervalBetween(e,n,i=1){if(i!==1&&i!==-1)throw new P("BadArguments",`Invalid direction: ${i}`);if(!this.isValidNoteValue(e)||!this.isValidNoteValue(n))throw new P("BadArguments",`Invalid notes: ${e}, ${n}`);let r=i===1?n-e:e-n;return r<0&&(r+=De.NUM_TONES),r}createScaleMap(e){const n=this.getKeyParts(e);if(!n.type)throw new P("BadArguments","Unsupported key type: undefined");const i=De.scaleTypes[n.type];let r=n.root;if(n.accidental&&(r+=n.accidental),!i)throw new P("BadArguments","Unsupported key type: "+e);const s=this.getScaleTones(this.getNoteValue(r),i),o=De.rootIndexes[n.root],a={};for(let l=0;l<De.roots.length;++l){const d=(o+l)%De.roots.length,f=De.roots[d];let u=this.getRelativeNoteName(f,s[l]);u.length===1&&(u+="n"),a[f]=u}return a}}var C;(function(t){t.null="\0",t.fourStringTabClef="",t.sixStringTabClef="",t.accSagittal11LargeDiesisDown="",t.accSagittal11LargeDiesisUp="",t.accSagittal11MediumDiesisDown="",t.accSagittal11MediumDiesisUp="",t.accSagittal11v19LargeDiesisDown="",t.accSagittal11v19LargeDiesisUp="",t.accSagittal11v19MediumDiesisDown="",t.accSagittal11v19MediumDiesisUp="",t.accSagittal11v49CommaDown="",t.accSagittal11v49CommaUp="",t.accSagittal143CommaDown="",t.accSagittal143CommaUp="",t.accSagittal17CommaDown="",t.accSagittal17CommaUp="",t.accSagittal17KleismaDown="",t.accSagittal17KleismaUp="",t.accSagittal19CommaDown="",t.accSagittal19CommaUp="",t.accSagittal19SchismaDown="",t.accSagittal19SchismaUp="",t.accSagittal1MinaDown="",t.accSagittal1MinaUp="",t.accSagittal1TinaDown="",t.accSagittal1TinaUp="",t.accSagittal23CommaDown="",t.accSagittal23CommaUp="",t.accSagittal23SmallDiesisDown="",t.accSagittal23SmallDiesisUp="",t.accSagittal25SmallDiesisDown="",t.accSagittal25SmallDiesisUp="",t.accSagittal2MinasDown="",t.accSagittal2MinasUp="",t.accSagittal2TinasDown="",t.accSagittal2TinasUp="",t.accSagittal35LargeDiesisDown="",t.accSagittal35LargeDiesisUp="",t.accSagittal35MediumDiesisDown="",t.accSagittal35MediumDiesisUp="",t.accSagittal3TinasDown="",t.accSagittal3TinasUp="",t.accSagittal49LargeDiesisDown="",t.accSagittal49LargeDiesisUp="",t.accSagittal49MediumDiesisDown="",t.accSagittal49MediumDiesisUp="",t.accSagittal49SmallDiesisDown="",t.accSagittal49SmallDiesisUp="",t.accSagittal4TinasDown="",t.accSagittal4TinasUp="",t.accSagittal55CommaDown="",t.accSagittal55CommaUp="",t.accSagittal5CommaDown="",t.accSagittal5CommaUp="",t.accSagittal5TinasDown="",t.accSagittal5TinasUp="",t.accSagittal5v11SmallDiesisDown="",t.accSagittal5v11SmallDiesisUp="",t.accSagittal5v13LargeDiesisDown="",t.accSagittal5v13LargeDiesisUp="",t.accSagittal5v13MediumDiesisDown="",t.accSagittal5v13MediumDiesisUp="",t.accSagittal5v19CommaDown="",t.accSagittal5v19CommaUp="",t.accSagittal5v23SmallDiesisDown="",t.accSagittal5v23SmallDiesisUp="",t.accSagittal5v49MediumDiesisDown="",t.accSagittal5v49MediumDiesisUp="",t.accSagittal5v7KleismaDown="",t.accSagittal5v7KleismaUp="",t.accSagittal6TinasDown="",t.accSagittal6TinasUp="",t.accSagittal7CommaDown="",t.accSagittal7CommaUp="",t.accSagittal7TinasDown="",t.accSagittal7TinasUp="",t.accSagittal7v11CommaDown="",t.accSagittal7v11CommaUp="",t.accSagittal7v11KleismaDown="",t.accSagittal7v11KleismaUp="",t.accSagittal7v19CommaDown="",t.accSagittal7v19CommaUp="",t.accSagittal8TinasDown="",t.accSagittal8TinasUp="",t.accSagittal9TinasDown="",t.accSagittal9TinasUp="",t.accSagittalAcute="",t.accSagittalDoubleFlat="",t.accSagittalDoubleFlat11v49CUp="",t.accSagittalDoubleFlat143CUp="",t.accSagittalDoubleFlat17CUp="",t.accSagittalDoubleFlat17kUp="",t.accSagittalDoubleFlat19CUp="",t.accSagittalDoubleFlat19sUp="",t.accSagittalDoubleFlat23CUp="",t.accSagittalDoubleFlat23SUp="",t.accSagittalDoubleFlat25SUp="",t.accSagittalDoubleFlat49SUp="",t.accSagittalDoubleFlat55CUp="",t.accSagittalDoubleFlat5CUp="",t.accSagittalDoubleFlat5v11SUp="",t.accSagittalDoubleFlat5v19CUp="",t.accSagittalDoubleFlat5v23SUp="",t.accSagittalDoubleFlat5v7kUp="",t.accSagittalDoubleFlat7CUp="",t.accSagittalDoubleFlat7v11CUp="",t.accSagittalDoubleFlat7v11kUp="",t.accSagittalDoubleFlat7v19CUp="",t.accSagittalDoubleSharp="",t.accSagittalDoubleSharp11v49CDown="",t.accSagittalDoubleSharp143CDown="",t.accSagittalDoubleSharp17CDown="",t.accSagittalDoubleSharp17kDown="",t.accSagittalDoubleSharp19CDown="",t.accSagittalDoubleSharp19sDown="",t.accSagittalDoubleSharp23CDown="",t.accSagittalDoubleSharp23SDown="",t.accSagittalDoubleSharp25SDown="",t.accSagittalDoubleSharp49SDown="",t.accSagittalDoubleSharp55CDown="",t.accSagittalDoubleSharp5CDown="",t.accSagittalDoubleSharp5v11SDown="",t.accSagittalDoubleSharp5v19CDown="",t.accSagittalDoubleSharp5v23SDown="",t.accSagittalDoubleSharp5v7kDown="",t.accSagittalDoubleSharp7CDown="",t.accSagittalDoubleSharp7v11CDown="",t.accSagittalDoubleSharp7v11kDown="",t.accSagittalDoubleSharp7v19CDown="",t.accSagittalFlat="",t.accSagittalFlat11LDown="",t.accSagittalFlat11MDown="",t.accSagittalFlat11v19LDown="",t.accSagittalFlat11v19MDown="",t.accSagittalFlat11v49CDown="",t.accSagittalFlat11v49CUp="",t.accSagittalFlat143CDown="",t.accSagittalFlat143CUp="",t.accSagittalFlat17CDown="",t.accSagittalFlat17CUp="",t.accSagittalFlat17kDown="",t.accSagittalFlat17kUp="",t.accSagittalFlat19CDown="",t.accSagittalFlat19CUp="",t.accSagittalFlat19sDown="",t.accSagittalFlat19sUp="",t.accSagittalFlat23CDown="",t.accSagittalFlat23CUp="",t.accSagittalFlat23SDown="",t.accSagittalFlat23SUp="",t.accSagittalFlat25SDown="",t.accSagittalFlat25SUp="",t.accSagittalFlat35LDown="",t.accSagittalFlat35MDown="",t.accSagittalFlat49LDown="",t.accSagittalFlat49MDown="",t.accSagittalFlat49SDown="",t.accSagittalFlat49SUp="",t.accSagittalFlat55CDown="",t.accSagittalFlat55CUp="",t.accSagittalFlat5CDown="",t.accSagittalFlat5CUp="",t.accSagittalFlat5v11SDown="",t.accSagittalFlat5v11SUp="",t.accSagittalFlat5v13LDown="",t.accSagittalFlat5v13MDown="",t.accSagittalFlat5v19CDown="",t.accSagittalFlat5v19CUp="",t.accSagittalFlat5v23SDown="",t.accSagittalFlat5v23SUp="",t.accSagittalFlat5v49MDown="",t.accSagittalFlat5v7kDown="",t.accSagittalFlat5v7kUp="",t.accSagittalFlat7CDown="",t.accSagittalFlat7CUp="",t.accSagittalFlat7v11CDown="",t.accSagittalFlat7v11CUp="",t.accSagittalFlat7v11kDown="",t.accSagittalFlat7v11kUp="",t.accSagittalFlat7v19CDown="",t.accSagittalFlat7v19CUp="",t.accSagittalFractionalTinaDown="",t.accSagittalFractionalTinaUp="",t.accSagittalGrave="",t.accSagittalShaftDown="",t.accSagittalShaftUp="",t.accSagittalSharp="",t.accSagittalSharp11LUp="",t.accSagittalSharp11MUp="",t.accSagittalSharp11v19LUp="",t.accSagittalSharp11v19MUp="",t.accSagittalSharp11v49CDown="",t.accSagittalSharp11v49CUp="",t.accSagittalSharp143CDown="",t.accSagittalSharp143CUp="",t.accSagittalSharp17CDown="",t.accSagittalSharp17CUp="",t.accSagittalSharp17kDown="",t.accSagittalSharp17kUp="",t.accSagittalSharp19CDown="",t.accSagittalSharp19CUp="",t.accSagittalSharp19sDown="",t.accSagittalSharp19sUp="",t.accSagittalSharp23CDown="",t.accSagittalSharp23CUp="",t.accSagittalSharp23SDown="",t.accSagittalSharp23SUp="",t.accSagittalSharp25SDown="",t.accSagittalSharp25SUp="",t.accSagittalSharp35LUp="",t.accSagittalSharp35MUp="",t.accSagittalSharp49LUp="",t.accSagittalSharp49MUp="",t.accSagittalSharp49SDown="",t.accSagittalSharp49SUp="",t.accSagittalSharp55CDown="",t.accSagittalSharp55CUp="",t.accSagittalSharp5CDown="",t.accSagittalSharp5CUp="",t.accSagittalSharp5v11SDown="",t.accSagittalSharp5v11SUp="",t.accSagittalSharp5v13LUp="",t.accSagittalSharp5v13MUp="",t.accSagittalSharp5v19CDown="",t.accSagittalSharp5v19CUp="",t.accSagittalSharp5v23SDown="",t.accSagittalSharp5v23SUp="",t.accSagittalSharp5v49MUp="",t.accSagittalSharp5v7kDown="",t.accSagittalSharp5v7kUp="",t.accSagittalSharp7CDown="",t.accSagittalSharp7CUp="",t.accSagittalSharp7v11CDown="",t.accSagittalSharp7v11CUp="",t.accSagittalSharp7v11kDown="",t.accSagittalSharp7v11kUp="",t.accSagittalSharp7v19CDown="",t.accSagittalSharp7v19CUp="",t.accSagittalUnused1="",t.accSagittalUnused2="",t.accSagittalUnused3="",t.accSagittalUnused4="",t.accdnCombDot="",t.accdnCombLH2RanksEmpty="",t.accdnCombLH3RanksEmptySquare="",t.accdnCombRH3RanksEmpty="",t.accdnCombRH4RanksEmpty="",t.accdnDiatonicClef="",t.accdnLH2Ranks16Round="",t.accdnLH2Ranks8Plus16Round="",t.accdnLH2Ranks8Round="",t.accdnLH2RanksFullMasterRound="",t.accdnLH2RanksMasterPlus16Round="",t.accdnLH2RanksMasterRound="",t.accdnLH3Ranks2Plus8Square="",t.accdnLH3Ranks2Square="",t.accdnLH3Ranks8Square="",t.accdnLH3RanksDouble8Square="",t.accdnLH3RanksTuttiSquare="",t.accdnPull="",t.accdnPush="",t.accdnRH3RanksAccordion="",t.accdnRH3RanksAuthenticMusette="",t.accdnRH3RanksBandoneon="",t.accdnRH3RanksBassoon="",t.accdnRH3RanksClarinet="",t.accdnRH3RanksDoubleTremoloLower8ve="",t.accdnRH3RanksDoubleTremoloUpper8ve="",t.accdnRH3RanksFullFactory="",t.accdnRH3RanksHarmonium="",t.accdnRH3RanksImitationMusette="",t.accdnRH3RanksLowerTremolo8="",t.accdnRH3RanksMaster="",t.accdnRH3RanksOboe="",t.accdnRH3RanksOrgan="",t.accdnRH3RanksPiccolo="",t.accdnRH3RanksTremoloLower8ve="",t.accdnRH3RanksTremoloUpper8ve="",t.accdnRH3RanksTwoChoirs="",t.accdnRH3RanksUpperTremolo8="",t.accdnRH3RanksViolin="",t.accdnRH4RanksAlto="",t.accdnRH4RanksBassAlto="",t.accdnRH4RanksMaster="",t.accdnRH4RanksSoftBass="",t.accdnRH4RanksSoftTenor="",t.accdnRH4RanksSoprano="",t.accdnRH4RanksTenor="",t.accdnRicochet2="",t.accdnRicochet3="",t.accdnRicochet4="",t.accdnRicochet5="",t.accdnRicochet6="",t.accdnRicochetStem2="",t.accdnRicochetStem3="",t.accdnRicochetStem4="",t.accdnRicochetStem5="",t.accdnRicochetStem6="",t.accidental1CommaFlat="",t.accidental1CommaSharp="",t.accidental2CommaFlat="",t.accidental2CommaSharp="",t.accidental3CommaFlat="",t.accidental3CommaSharp="",t.accidental4CommaFlat="",t.accidental5CommaSharp="",t.accidentalArrowDown="",t.accidentalArrowUp="",t.accidentalBakiyeFlat="",t.accidentalBakiyeSharp="",t.accidentalBracketLeft="",t.accidentalBracketRight="",t.accidentalBuyukMucennebFlat="",t.accidentalBuyukMucennebSharp="",t.accidentalCombiningCloseCurlyBrace="",t.accidentalCombiningLower17Schisma="",t.accidentalCombiningLower19Schisma="",t.accidentalCombiningLower23Limit29LimitComma="",t.accidentalCombiningLower29LimitComma="",t.accidentalCombiningLower31Schisma="",t.accidentalCombiningLower37Quartertone="",t.accidentalCombiningLower41Comma="",t.accidentalCombiningLower43Comma="",t.accidentalCombiningLower47Quartertone="",t.accidentalCombiningLower53LimitComma="",t.accidentalCombiningOpenCurlyBrace="",t.accidentalCombiningRaise17Schisma="",t.accidentalCombiningRaise19Schisma="",t.accidentalCombiningRaise23Limit29LimitComma="",t.accidentalCombiningRaise29LimitComma="",t.accidentalCombiningRaise31Schisma="",t.accidentalCombiningRaise37Quartertone="",t.accidentalCombiningRaise41Comma="",t.accidentalCombiningRaise43Comma="",t.accidentalCombiningRaise47Quartertone="",t.accidentalCombiningRaise53LimitComma="",t.accidentalCommaSlashDown="",t.accidentalCommaSlashUp="",t.accidentalDoubleFlat="",t.accidentalDoubleFlatArabic="",t.accidentalDoubleFlatEqualTempered="",t.accidentalDoubleFlatOneArrowDown="",t.accidentalDoubleFlatOneArrowUp="",t.accidentalDoubleFlatReversed="",t.accidentalDoubleFlatThreeArrowsDown="",t.accidentalDoubleFlatThreeArrowsUp="",t.accidentalDoubleFlatTurned="",t.accidentalDoubleFlatTwoArrowsDown="",t.accidentalDoubleFlatTwoArrowsUp="",t.accidentalDoubleSharp="",t.accidentalDoubleSharpArabic="",t.accidentalDoubleSharpEqualTempered="",t.accidentalDoubleSharpOneArrowDown="",t.accidentalDoubleSharpOneArrowUp="",t.accidentalDoubleSharpThreeArrowsDown="",t.accidentalDoubleSharpThreeArrowsUp="",t.accidentalDoubleSharpTwoArrowsDown="",t.accidentalDoubleSharpTwoArrowsUp="",t.accidentalEnharmonicAlmostEqualTo="",t.accidentalEnharmonicEquals="",t.accidentalEnharmonicTilde="",t.accidentalFilledReversedFlatAndFlat="",t.accidentalFilledReversedFlatAndFlatArrowDown="",t.accidentalFilledReversedFlatAndFlatArrowUp="",t.accidentalFilledReversedFlatArrowDown="",t.accidentalFilledReversedFlatArrowUp="",t.accidentalFiveQuarterTonesFlatArrowDown="",t.accidentalFiveQuarterTonesSharpArrowUp="",t.accidentalFlat="",t.accidentalFlatArabic="",t.accidentalFlatEqualTempered="",t.accidentalFlatLoweredStockhausen="",t.accidentalFlatOneArrowDown="",t.accidentalFlatOneArrowUp="",t.accidentalFlatRaisedStockhausen="",t.accidentalFlatRepeatedLineStockhausen="",t.accidentalFlatRepeatedSpaceStockhausen="",t.accidentalFlatThreeArrowsDown="",t.accidentalFlatThreeArrowsUp="",t.accidentalFlatTurned="",t.accidentalFlatTwoArrowsDown="",t.accidentalFlatTwoArrowsUp="",t.accidentalHabaFlatQuarterToneHigher="",t.accidentalHabaFlatThreeQuarterTonesLower="",t.accidentalHabaQuarterToneHigher="",t.accidentalHabaQuarterToneLower="",t.accidentalHabaSharpQuarterToneLower="",t.accidentalHabaSharpThreeQuarterTonesHigher="",t.accidentalHalfSharpArrowDown="",t.accidentalHalfSharpArrowUp="",t.accidentalJohnston13="",t.accidentalJohnston31="",t.accidentalJohnstonDown="",t.accidentalJohnstonEl="",t.accidentalJohnstonMinus="",t.accidentalJohnstonPlus="",t.accidentalJohnstonSeven="",t.accidentalJohnstonUp="",t.accidentalKomaFlat="",t.accidentalKomaSharp="",t.accidentalKoron="",t.accidentalKucukMucennebFlat="",t.accidentalKucukMucennebSharp="",t.accidentalLargeDoubleSharp="",t.accidentalLowerOneSeptimalComma="",t.accidentalLowerOneTridecimalQuartertone="",t.accidentalLowerOneUndecimalQuartertone="",t.accidentalLowerTwoSeptimalCommas="",t.accidentalLoweredStockhausen="",t.accidentalNarrowReversedFlat="",t.accidentalNarrowReversedFlatAndFlat="",t.accidentalNatural="",t.accidentalNaturalArabic="",t.accidentalNaturalEqualTempered="",t.accidentalNaturalFlat="",t.accidentalNaturalLoweredStockhausen="",t.accidentalNaturalOneArrowDown="",t.accidentalNaturalOneArrowUp="",t.accidentalNaturalRaisedStockhausen="",t.accidentalNaturalReversed="",t.accidentalNaturalSharp="",t.accidentalNaturalThreeArrowsDown="",t.accidentalNaturalThreeArrowsUp="",t.accidentalNaturalTwoArrowsDown="",t.accidentalNaturalTwoArrowsUp="",t.accidentalOneAndAHalfSharpsArrowDown="",t.accidentalOneAndAHalfSharpsArrowUp="",t.accidentalOneQuarterToneFlatFerneyhough="",t.accidentalOneQuarterToneFlatStockhausen="",t.accidentalOneQuarterToneSharpFerneyhough="",t.accidentalOneQuarterToneSharpStockhausen="",t.accidentalOneThirdToneFlatFerneyhough="",t.accidentalOneThirdToneSharpFerneyhough="",t.accidentalParensLeft="",t.accidentalParensRight="",t.accidentalQuarterFlatEqualTempered="",t.accidentalQuarterSharpEqualTempered="",t.accidentalQuarterToneFlat4="",t.accidentalQuarterToneFlatArabic="",t.accidentalQuarterToneFlatArrowUp="",t.accidentalQuarterToneFlatFilledReversed="",t.accidentalQuarterToneFlatNaturalArrowDown="",t.accidentalQuarterToneFlatPenderecki="",t.accidentalQuarterToneFlatStein="",t.accidentalQuarterToneFlatVanBlankenburg="",t.accidentalQuarterToneSharp4="",t.accidentalQuarterToneSharpArabic="",t.accidentalQuarterToneSharpArrowDown="",t.accidentalQuarterToneSharpBusotti="",t.accidentalQuarterToneSharpNaturalArrowUp="",t.accidentalQuarterToneSharpStein="",t.accidentalQuarterToneSharpWiggle="",t.accidentalRaiseOneSeptimalComma="",t.accidentalRaiseOneTridecimalQuartertone="",t.accidentalRaiseOneUndecimalQuartertone="",t.accidentalRaiseTwoSeptimalCommas="",t.accidentalRaisedStockhausen="",t.accidentalReversedFlatAndFlatArrowDown="",t.accidentalReversedFlatAndFlatArrowUp="",t.accidentalReversedFlatArrowDown="",t.accidentalReversedFlatArrowUp="",t.accidentalSharp="",t.accidentalSharpArabic="",t.accidentalSharpEqualTempered="",t.accidentalSharpLoweredStockhausen="",t.accidentalSharpOneArrowDown="",t.accidentalSharpOneArrowUp="",t.accidentalSharpOneHorizontalStroke="",t.accidentalSharpRaisedStockhausen="",t.accidentalSharpRepeatedLineStockhausen="",t.accidentalSharpRepeatedSpaceStockhausen="",t.accidentalSharpReversed="",t.accidentalSharpSharp="",t.accidentalSharpThreeArrowsDown="",t.accidentalSharpThreeArrowsUp="",t.accidentalSharpTwoArrowsDown="",t.accidentalSharpTwoArrowsUp="",t.accidentalSims12Down="",t.accidentalSims12Up="",t.accidentalSims4Down="",t.accidentalSims4Up="",t.accidentalSims6Down="",t.accidentalSims6Up="",t.accidentalSori="",t.accidentalTavenerFlat="",t.accidentalTavenerSharp="",t.accidentalThreeQuarterTonesFlatArabic="",t.accidentalThreeQuarterTonesFlatArrowDown="",t.accidentalThreeQuarterTonesFlatArrowUp="",t.accidentalThreeQuarterTonesFlatCouper="",t.accidentalThreeQuarterTonesFlatGrisey="",t.accidentalThreeQuarterTonesFlatTartini="",t.accidentalThreeQuarterTonesFlatZimmermann="",t.accidentalThreeQuarterTonesSharpArabic="",t.accidentalThreeQuarterTonesSharpArrowDown="",t.accidentalThreeQuarterTonesSharpArrowUp="",t.accidentalThreeQuarterTonesSharpBusotti="",t.accidentalThreeQuarterTonesSharpStein="",t.accidentalThreeQuarterTonesSharpStockhausen="",t.accidentalTripleFlat="",t.accidentalTripleSharp="",t.accidentalTwoThirdTonesFlatFerneyhough="",t.accidentalTwoThirdTonesSharpFerneyhough="",t.accidentalUpsAndDownsDown="",t.accidentalUpsAndDownsLess="",t.accidentalUpsAndDownsMore="",t.accidentalUpsAndDownsUp="",t.accidentalWilsonMinus="",t.accidentalWilsonPlus="",t.accidentalWyschnegradsky10TwelfthsFlat="",t.accidentalWyschnegradsky10TwelfthsSharp="",t.accidentalWyschnegradsky11TwelfthsFlat="",t.accidentalWyschnegradsky11TwelfthsSharp="",t.accidentalWyschnegradsky1TwelfthsFlat="",t.accidentalWyschnegradsky1TwelfthsSharp="",t.accidentalWyschnegradsky2TwelfthsFlat="",t.accidentalWyschnegradsky2TwelfthsSharp="",t.accidentalWyschnegradsky3TwelfthsFlat="",t.accidentalWyschnegradsky3TwelfthsSharp="",t.accidentalWyschnegradsky4TwelfthsFlat="",t.accidentalWyschnegradsky4TwelfthsSharp="",t.accidentalWyschnegradsky5TwelfthsFlat="",t.accidentalWyschnegradsky5TwelfthsSharp="",t.accidentalWyschnegradsky6TwelfthsFlat="",t.accidentalWyschnegradsky6TwelfthsSharp="",t.accidentalWyschnegradsky7TwelfthsFlat="",t.accidentalWyschnegradsky7TwelfthsSharp="",t.accidentalWyschnegradsky8TwelfthsFlat="",t.accidentalWyschnegradsky8TwelfthsSharp="",t.accidentalWyschnegradsky9TwelfthsFlat="",t.accidentalWyschnegradsky9TwelfthsSharp="",t.accidentalXenakisOneThirdToneSharp="",t.accidentalXenakisTwoThirdTonesSharp="",t.analyticsChoralmelodie="",t.analyticsEndStimme="",t.analyticsHauptrhythmus="",t.analyticsHauptstimme="",t.analyticsInversion1="",t.analyticsNebenstimme="",t.analyticsStartStimme="",t.analyticsTheme="",t.analyticsTheme1="",t.analyticsThemeInversion="",t.analyticsThemeRetrograde="",t.analyticsThemeRetrogradeInversion="",t.arpeggiato="",t.arpeggiatoDown="",t.arpeggiatoUp="",t.arrowBlackDown="",t.arrowBlackDownLeft="",t.arrowBlackDownRight="",t.arrowBlackLeft="",t.arrowBlackRight="",t.arrowBlackUp="",t.arrowBlackUpLeft="",t.arrowBlackUpRight="",t.arrowOpenDown="",t.arrowOpenDownLeft="",t.arrowOpenDownRight="",t.arrowOpenLeft="",t.arrowOpenRight="",t.arrowOpenUp="",t.arrowOpenUpLeft="",t.arrowOpenUpRight="",t.arrowWhiteDown="",t.arrowWhiteDownLeft="",t.arrowWhiteDownRight="",t.arrowWhiteLeft="",t.arrowWhiteRight="",t.arrowWhiteUp="",t.arrowWhiteUpLeft="",t.arrowWhiteUpRight="",t.arrowheadBlackDown="",t.arrowheadBlackDownLeft="",t.arrowheadBlackDownRight="",t.arrowheadBlackLeft="",t.arrowheadBlackRight="",t.arrowheadBlackUp="",t.arrowheadBlackUpLeft="",t.arrowheadBlackUpRight="",t.arrowheadOpenDown="",t.arrowheadOpenDownLeft="",t.arrowheadOpenDownRight="",t.arrowheadOpenLeft="",t.arrowheadOpenRight="",t.arrowheadOpenUp="",t.arrowheadOpenUpLeft="",t.arrowheadOpenUpRight="",t.arrowheadWhiteDown="",t.arrowheadWhiteDownLeft="",t.arrowheadWhiteDownRight="",t.arrowheadWhiteLeft="",t.arrowheadWhiteRight="",t.arrowheadWhiteUp="",t.arrowheadWhiteUpLeft="",t.arrowheadWhiteUpRight="",t.articAccentAbove="",t.articAccentBelow="",t.articAccentStaccatoAbove="",t.articAccentStaccatoBelow="",t.articLaissezVibrerAbove="",t.articLaissezVibrerBelow="",t.articMarcatoAbove="",t.articMarcatoBelow="",t.articMarcatoStaccatoAbove="",t.articMarcatoStaccatoBelow="",t.articMarcatoTenutoAbove="",t.articMarcatoTenutoBelow="",t.articSoftAccentAbove="",t.articSoftAccentBelow="",t.articSoftAccentStaccatoAbove="",t.articSoftAccentStaccatoBelow="",t.articSoftAccentTenutoAbove="",t.articSoftAccentTenutoBelow="",t.articSoftAccentTenutoStaccatoAbove="",t.articSoftAccentTenutoStaccatoBelow="",t.articStaccatissimoAbove="",t.articStaccatissimoBelow="",t.articStaccatissimoStrokeAbove="",t.articStaccatissimoStrokeBelow="",t.articStaccatissimoWedgeAbove="",t.articStaccatissimoWedgeBelow="",t.articStaccatoAbove="",t.articStaccatoBelow="",t.articStressAbove="",t.articStressBelow="",t.articTenutoAbove="",t.articTenutoAccentAbove="",t.articTenutoAccentBelow="",t.articTenutoBelow="",t.articTenutoStaccatoAbove="",t.articTenutoStaccatoBelow="",t.articUnstressAbove="",t.articUnstressBelow="",t.augmentationDot="",t.barlineDashed="",t.barlineDotted="",t.barlineDouble="",t.barlineFinal="",t.barlineHeavy="",t.barlineHeavyHeavy="",t.barlineReverseFinal="",t.barlineShort="",t.barlineSingle="",t.barlineTick="",t.beamAccelRit1="",t.beamAccelRit10="",t.beamAccelRit11="",t.beamAccelRit12="",t.beamAccelRit13="",t.beamAccelRit14="",t.beamAccelRit15="",t.beamAccelRit2="",t.beamAccelRit3="",t.beamAccelRit4="",t.beamAccelRit5="",t.beamAccelRit6="",t.beamAccelRit7="",t.beamAccelRit8="",t.beamAccelRit9="",t.beamAccelRitFinal="",t.brace="",t.bracket="",t.bracketBottom="",t.bracketTop="",t.brassBend="",t.brassDoitLong="",t.brassDoitMedium="",t.brassDoitShort="",t.brassFallLipLong="",t.brassFallLipMedium="",t.brassFallLipShort="",t.brassFallRoughLong="",t.brassFallRoughMedium="",t.brassFallRoughShort="",t.brassFallSmoothLong="",t.brassFallSmoothMedium="",t.brassFallSmoothShort="",t.brassFlip="",t.brassHarmonMuteClosed="",t.brassHarmonMuteStemHalfLeft="",t.brassHarmonMuteStemHalfRight="",t.brassHarmonMuteStemOpen="",t.brassJazzTurn="",t.brassLiftLong="",t.brassLiftMedium="",t.brassLiftShort="",t.brassLiftSmoothLong="",t.brassLiftSmoothMedium="",t.brassLiftSmoothShort="",t.brassMuteClosed="",t.brassMuteHalfClosed="",t.brassMuteOpen="",t.brassPlop="",t.brassScoop="",t.brassSmear="",t.brassValveTrill="",t.breathMarkComma="",t.breathMarkSalzedo="",t.breathMarkTick="",t.breathMarkUpbow="",t.bridgeClef="",t.buzzRoll="",t.cClef="",t.cClef8vb="",t.cClefArrowDown="",t.cClefArrowUp="",t.cClefChange="",t.cClefCombining="",t.cClefReversed="",t.cClefSquare="",t.caesura="",t.caesuraCurved="",t.caesuraShort="",t.caesuraSingleStroke="",t.caesuraThick="",t.chantAccentusAbove="",t.chantAccentusBelow="",t.chantAuctumAsc="",t.chantAuctumDesc="",t.chantAugmentum="",t.chantCaesura="",t.chantCclef="",t.chantCirculusAbove="",t.chantCirculusBelow="",t.chantConnectingLineAsc2nd="",t.chantConnectingLineAsc3rd="",t.chantConnectingLineAsc4th="",t.chantConnectingLineAsc5th="",t.chantConnectingLineAsc6th="",t.chantCustosStemDownPosHigh="",t.chantCustosStemDownPosHighest="",t.chantCustosStemDownPosMiddle="",t.chantCustosStemUpPosLow="",t.chantCustosStemUpPosLowest="",t.chantCustosStemUpPosMiddle="",t.chantDeminutumLower="",t.chantDeminutumUpper="",t.chantDivisioFinalis="",t.chantDivisioMaior="",t.chantDivisioMaxima="",t.chantDivisioMinima="",t.chantEntryLineAsc2nd="",t.chantEntryLineAsc3rd="",t.chantEntryLineAsc4th="",t.chantEntryLineAsc5th="",t.chantEntryLineAsc6th="",t.chantEpisema="",t.chantFclef="",t.chantIctusAbove="",t.chantIctusBelow="",t.chantLigaturaDesc2nd="",t.chantLigaturaDesc3rd="",t.chantLigaturaDesc4th="",t.chantLigaturaDesc5th="",t.chantOriscusAscending="",t.chantOriscusDescending="",t.chantOriscusLiquescens="",t.chantPodatusLower="",t.chantPodatusUpper="",t.chantPunctum="",t.chantPunctumCavum="",t.chantPunctumDeminutum="",t.chantPunctumInclinatum="",t.chantPunctumInclinatumAuctum="",t.chantPunctumInclinatumDeminutum="",t.chantPunctumLinea="",t.chantPunctumLineaCavum="",t.chantPunctumVirga="",t.chantPunctumVirgaReversed="",t.chantQuilisma="",t.chantSemicirculusAbove="",t.chantSemicirculusBelow="",t.chantStaff="",t.chantStaffNarrow="",t.chantStaffWide="",t.chantStrophicus="",t.chantStrophicusAuctus="",t.chantStrophicusLiquescens2nd="",t.chantStrophicusLiquescens3rd="",t.chantStrophicusLiquescens4th="",t.chantStrophicusLiquescens5th="",t.chantVirgula="",t.clef15="",t.clef8="",t.clefChangeCombining="",t.coda="",t.codaSquare="",t.conductorBeat2Compound="",t.conductorBeat2Simple="",t.conductorBeat3Compound="",t.conductorBeat3Simple="",t.conductorBeat4Compound="",t.conductorBeat4Simple="",t.conductorLeftBeat="",t.conductorRightBeat="",t.conductorStrongBeat="",t.conductorUnconducted="",t.conductorWeakBeat="",t.controlBeginBeam="",t.controlBeginPhrase="",t.controlBeginSlur="",t.controlBeginTie="",t.controlEndBeam="",t.controlEndPhrase="",t.controlEndSlur="",t.controlEndTie="",t.csymAccidentalDoubleFlat="",t.csymAccidentalDoubleSharp="",t.csymAccidentalFlat="",t.csymAccidentalNatural="",t.csymAccidentalSharp="",t.csymAccidentalTripleFlat="",t.csymAccidentalTripleSharp="",t.csymAlteredBassSlash="",t.csymAugmented="",t.csymBracketLeftTall="",t.csymBracketRightTall="",t.csymDiagonalArrangementSlash="",t.csymDiminished="",t.csymHalfDiminished="",t.csymMajorSeventh="",t.csymMinor="",t.csymParensLeftTall="",t.csymParensLeftVeryTall="",t.csymParensRightTall="",t.csymParensRightVeryTall="",t.curlewSign="",t.daCapo="",t.dalSegno="",t.daseianExcellentes1="",t.daseianExcellentes2="",t.daseianExcellentes3="",t.daseianExcellentes4="",t.daseianFinales1="",t.daseianFinales2="",t.daseianFinales3="",t.daseianFinales4="",t.daseianGraves1="",t.daseianGraves2="",t.daseianGraves3="",t.daseianGraves4="",t.daseianResidua1="",t.daseianResidua2="",t.daseianSuperiores1="",t.daseianSuperiores2="",t.daseianSuperiores3="",t.daseianSuperiores4="",t.doubleLateralRollStevens="",t.doubleTongueAbove="",t.doubleTongueBelow="",t.dynamicCombinedSeparatorColon="",t.dynamicCombinedSeparatorHyphen="",t.dynamicCombinedSeparatorSlash="",t.dynamicCombinedSeparatorSpace="",t.dynamicCrescendoHairpin="",t.dynamicDiminuendoHairpin="",t.dynamicFF="",t.dynamicFFF="",t.dynamicFFFF="",t.dynamicFFFFF="",t.dynamicFFFFFF="",t.dynamicForte="",t.dynamicFortePiano="",t.dynamicForzando="",t.dynamicHairpinBracketLeft="",t.dynamicHairpinBracketRight="",t.dynamicHairpinParenthesisLeft="",t.dynamicHairpinParenthesisRight="",t.dynamicMF="",t.dynamicMP="",t.dynamicMessaDiVoce="",t.dynamicMezzo="",t.dynamicNiente="",t.dynamicNienteForHairpin="",t.dynamicPF="",t.dynamicPP="",t.dynamicPPP="",t.dynamicPPPP="",t.dynamicPPPPP="",t.dynamicPPPPPP="",t.dynamicPiano="",t.dynamicRinforzando="",t.dynamicRinforzando1="",t.dynamicRinforzando2="",t.dynamicSforzando="",t.dynamicSforzando1="",t.dynamicSforzandoPianissimo="",t.dynamicSforzandoPiano="",t.dynamicSforzato="",t.dynamicSforzatoFF="",t.dynamicSforzatoPiano="",t.dynamicZ="",t.elecAudioChannelsEight="",t.elecAudioChannelsFive="",t.elecAudioChannelsFour="",t.elecAudioChannelsOne="",t.elecAudioChannelsSeven="",t.elecAudioChannelsSix="",t.elecAudioChannelsThreeFrontal="",t.elecAudioChannelsThreeSurround="",t.elecAudioChannelsTwo="",t.elecAudioIn="",t.elecAudioMono="",t.elecAudioOut="",t.elecAudioStereo="",t.elecCamera="",t.elecDataIn="",t.elecDataOut="",t.elecDisc="",t.elecDownload="",t.elecEject="",t.elecFastForward="",t.elecHeadphones="",t.elecHeadset="",t.elecLineIn="",t.elecLineOut="",t.elecLoop="",t.elecLoudspeaker="",t.elecMIDIController0="",t.elecMIDIController100="",t.elecMIDIController20="",t.elecMIDIController40="",t.elecMIDIController60="",t.elecMIDIController80="",t.elecMIDIIn="",t.elecMIDIOut="",t.elecMicrophone="",t.elecMicrophoneMute="",t.elecMicrophoneUnmute="",t.elecMixingConsole="",t.elecMonitor="",t.elecMute="",t.elecPause="",t.elecPlay="",t.elecPowerOnOff="",t.elecProjector="",t.elecReplay="",t.elecRewind="",t.elecShuffle="",t.elecSkipBackwards="",t.elecSkipForwards="",t.elecStop="",t.elecTape="",t.elecUSB="",t.elecUnmute="",t.elecUpload="",t.elecVideoCamera="",t.elecVideoIn="",t.elecVideoOut="",t.elecVolumeFader="",t.elecVolumeFaderThumb="",t.elecVolumeLevel0="",t.elecVolumeLevel100="",t.elecVolumeLevel20="",t.elecVolumeLevel40="",t.elecVolumeLevel60="",t.elecVolumeLevel80="",t.fClef="",t.fClef15ma="",t.fClef15mb="",t.fClef8va="",t.fClef8vb="",t.fClefArrowDown="",t.fClefArrowUp="",t.fClefChange="",t.fClefReversed="",t.fClefTurned="",t.fermataAbove="",t.fermataBelow="",t.fermataLongAbove="",t.fermataLongBelow="",t.fermataLongHenzeAbove="",t.fermataLongHenzeBelow="",t.fermataShortAbove="",t.fermataShortBelow="",t.fermataShortHenzeAbove="",t.fermataShortHenzeBelow="",t.fermataVeryLongAbove="",t.fermataVeryLongBelow="",t.fermataVeryShortAbove="",t.fermataVeryShortBelow="",t.figbass0="",t.figbass1="",t.figbass2="",t.figbass2Raised="",t.figbass3="",t.figbass4="",t.figbass4Raised="",t.figbass5="",t.figbass5Raised1="",t.figbass5Raised2="",t.figbass5Raised3="",t.figbass6="",t.figbass6Raised="",t.figbass6Raised2="",t.figbass7="",t.figbass7Diminished="",t.figbass7Raised1="",t.figbass7Raised2="",t.figbass8="",t.figbass9="",t.figbass9Raised="",t.figbassBracketLeft="",t.figbassBracketRight="",t.figbassCombiningLowering="",t.figbassCombiningRaising="",t.figbassDoubleFlat="",t.figbassDoubleSharp="",t.figbassFlat="",t.figbassNatural="",t.figbassParensLeft="",t.figbassParensRight="",t.figbassPlus="",t.figbassSharp="",t.figbassTripleFlat="",t.figbassTripleSharp="",t.fingering0="",t.fingering0Italic="",t.fingering1="",t.fingering1Italic="",t.fingering2="",t.fingering2Italic="",t.fingering3="",t.fingering3Italic="",t.fingering4="",t.fingering4Italic="",t.fingering5="",t.fingering5Italic="",t.fingering6="",t.fingering6Italic="",t.fingering7="",t.fingering7Italic="",t.fingering8="",t.fingering8Italic="",t.fingering9="",t.fingering9Italic="",t.fingeringALower="",t.fingeringCLower="",t.fingeringELower="",t.fingeringILower="",t.fingeringLeftBracket="",t.fingeringLeftBracketItalic="",t.fingeringLeftParenthesis="",t.fingeringLeftParenthesisItalic="",t.fingeringMLower="",t.fingeringMultipleNotes="",t.fingeringOLower="",t.fingeringPLower="",t.fingeringQLower="",t.fingeringRightBracket="",t.fingeringRightBracketItalic="",t.fingeringRightParenthesis="",t.fingeringRightParenthesisItalic="",t.fingeringSLower="",t.fingeringSeparatorMiddleDot="",t.fingeringSeparatorMiddleDotWhite="",t.fingeringSeparatorSlash="",t.fingeringSubstitutionAbove="",t.fingeringSubstitutionBelow="",t.fingeringSubstitutionDash="",t.fingeringTLower="",t.fingeringTUpper="",t.fingeringXLower="",t.flag1024thDown="",t.flag1024thUp="",t.flag128thDown="",t.flag128thUp="",t.flag16thDown="",t.flag16thUp="",t.flag256thDown="",t.flag256thUp="",t.flag32ndDown="",t.flag32ndUp="",t.flag512thDown="",t.flag512thUp="",t.flag64thDown="",t.flag64thUp="",t.flag8thDown="",t.flag8thUp="",t.flagInternalDown="",t.flagInternalUp="",t.fretboard3String="",t.fretboard3StringNut="",t.fretboard4String="",t.fretboard4StringNut="",t.fretboard5String="",t.fretboard5StringNut="",t.fretboard6String="",t.fretboard6StringNut="",t.fretboardFilledCircle="",t.fretboardO="",t.fretboardX="",t.functionAngleLeft="",t.functionAngleRight="",t.functionBracketLeft="",t.functionBracketRight="",t.functionDD="",t.functionDLower="",t.functionDUpper="",t.functionEight="",t.functionFUpper="",t.functionFive="",t.functionFour="",t.functionGLower="",t.functionGUpper="",t.functionGreaterThan="",t.functionILower="",t.functionIUpper="",t.functionKLower="",t.functionKUpper="",t.functionLLower="",t.functionLUpper="",t.functionLessThan="",t.functionMLower="",t.functionMUpper="",t.functionMinus="",t.functionNLower="",t.functionNUpper="",t.functionNUpperSuperscript="",t.functionNine="",t.functionOne="",t.functionPLower="",t.functionPUpper="",t.functionParensLeft="",t.functionParensRight="",t.functionPlus="",t.functionRLower="",t.functionRepetition1="",t.functionRepetition2="",t.functionRing="",t.functionSLower="",t.functionSSLower="",t.functionSSUpper="",t.functionSUpper="",t.functionSeven="",t.functionSix="",t.functionSlashedDD="",t.functionTLower="",t.functionTUpper="",t.functionThree="",t.functionTwo="",t.functionVLower="",t.functionVUpper="",t.functionZero="",t.gClef="",t.gClef15ma="",t.gClef15mb="",t.gClef8va="",t.gClef8vb="",t.gClef8vbCClef="",t.gClef8vbOld="",t.gClef8vbParens="",t.gClefArrowDown="",t.gClefArrowUp="",t.gClefChange="",t.gClefLigatedNumberAbove="",t.gClefLigatedNumberBelow="",t.gClefReversed="",t.gClefTurned="",t.glissandoDown="",t.glissandoUp="",t.graceNoteAcciaccaturaStemDown="",t.graceNoteAcciaccaturaStemUp="",t.graceNoteAppoggiaturaStemDown="",t.graceNoteAppoggiaturaStemUp="",t.graceNoteSlashStemDown="",t.graceNoteSlashStemUp="",t.guitarBarreFull="",t.guitarBarreHalf="",t.guitarClosePedal="",t.guitarFadeIn="",t.guitarFadeOut="",t.guitarGolpe="",t.guitarHalfOpenPedal="",t.guitarLeftHandTapping="",t.guitarOpenPedal="",t.guitarRightHandTapping="",t.guitarShake="",t.guitarString0="",t.guitarString1="",t.guitarString10="",t.guitarString11="",t.guitarString12="",t.guitarString13="",t.guitarString2="",t.guitarString3="",t.guitarString4="",t.guitarString5="",t.guitarString6="",t.guitarString7="",t.guitarString8="",t.guitarString9="",t.guitarStrumDown="",t.guitarStrumUp="",t.guitarVibratoBarDip="",t.guitarVibratoBarScoop="",t.guitarVibratoStroke="",t.guitarVolumeSwell="",t.guitarWideVibratoStroke="",t.handbellsBelltree="",t.handbellsDamp3="",t.handbellsEcho1="",t.handbellsEcho2="",t.handbellsGyro="",t.handbellsHandMartellato="",t.handbellsMalletBellOnTable="",t.handbellsMalletBellSuspended="",t.handbellsMalletLft="",t.handbellsMartellato="",t.handbellsMartellatoLift="",t.handbellsMutedMartellato="",t.handbellsPluckLift="",t.handbellsSwing="",t.handbellsSwingDown="",t.handbellsSwingUp="",t.handbellsTablePairBells="",t.handbellsTableSingleBell="",t.harpMetalRod="",t.harpPedalCentered="",t.harpPedalDivider="",t.harpPedalLowered="",t.harpPedalRaised="",t.harpSalzedoAeolianAscending="",t.harpSalzedoAeolianDescending="",t.harpSalzedoDampAbove="",t.harpSalzedoDampBelow="",t.harpSalzedoDampBothHands="",t.harpSalzedoDampLowStrings="",t.harpSalzedoFluidicSoundsLeft="",t.harpSalzedoFluidicSoundsRight="",t.harpSalzedoIsolatedSounds="",t.harpSalzedoMetallicSounds="",t.harpSalzedoMetallicSoundsOneString="",t.harpSalzedoMuffleTotally="",t.harpSalzedoOboicFlux="",t.harpSalzedoPlayUpperEnd="",t.harpSalzedoSlideWithSuppleness="",t.harpSalzedoSnareDrum="",t.harpSalzedoTamTamSounds="",t.harpSalzedoThunderEffect="",t.harpSalzedoTimpanicSounds="",t.harpSalzedoWhistlingSounds="",t.harpStringNoiseStem="",t.harpTuningKey="",t.harpTuningKeyGlissando="",t.harpTuningKeyHandle="",t.harpTuningKeyShank="",t.indianDrumClef="",t.kahnBackChug="",t.kahnBackFlap="",t.kahnBackRiff="",t.kahnBackRip="",t.kahnBallChange="",t.kahnBallDig="",t.kahnBrushBackward="",t.kahnBrushForward="",t.kahnChug="",t.kahnClap="",t.kahnDoubleSnap="",t.kahnDoubleWing="",t.kahnDrawStep="",t.kahnDrawTap="",t.kahnFlam="",t.kahnFlap="",t.kahnFlapStep="",t.kahnFlat="",t.kahnFleaHop="",t.kahnFleaTap="",t.kahnGraceTap="",t.kahnGraceTapChange="",t.kahnGraceTapHop="",t.kahnGraceTapStamp="",t.kahnHeel="",t.kahnHeelChange="",t.kahnHeelClick="",t.kahnHeelDrop="",t.kahnHeelStep="",t.kahnHeelTap="",t.kahnHop="",t.kahnJumpApart="",t.kahnJumpTogether="",t.kahnKneeInward="",t.kahnKneeOutward="",t.kahnLeap="",t.kahnLeapFlatFoot="",t.kahnLeapHeelClick="",t.kahnLeftCatch="",t.kahnLeftCross="",t.kahnLeftFoot="",t.kahnLeftToeStrike="",t.kahnLeftTurn="",t.kahnOverTheTop="",t.kahnOverTheTopTap="",t.kahnPull="",t.kahnPush="",t.kahnRiff="",t.kahnRiffle="",t.kahnRightCatch="",t.kahnRightCross="",t.kahnRightFoot="",t.kahnRightToeStrike="",t.kahnRightTurn="",t.kahnRip="",t.kahnRipple="",t.kahnScrape="",t.kahnScuff="",t.kahnScuffle="",t.kahnShuffle="",t.kahnSlam="",t.kahnSlap="",t.kahnSlideStep="",t.kahnSlideTap="",t.kahnSnap="",t.kahnStamp="",t.kahnStampStamp="",t.kahnStep="",t.kahnStepStamp="",t.kahnStomp="",t.kahnStompBrush="",t.kahnTap="",t.kahnToe="",t.kahnToeClick="",t.kahnToeDrop="",t.kahnToeStep="",t.kahnToeTap="",t.kahnTrench="",t.kahnWing="",t.kahnWingChange="",t.kahnZank="",t.kahnZink="",t.keyboardBebung2DotsAbove="",t.keyboardBebung2DotsBelow="",t.keyboardBebung3DotsAbove="",t.keyboardBebung3DotsBelow="",t.keyboardBebung4DotsAbove="",t.keyboardBebung4DotsBelow="",t.keyboardLeftPedalPictogram="",t.keyboardMiddlePedalPictogram="",t.keyboardPedalD="",t.keyboardPedalDot="",t.keyboardPedalE="",t.keyboardPedalHalf="",t.keyboardPedalHalf2="",t.keyboardPedalHalf3="",t.keyboardPedalHeel1="",t.keyboardPedalHeel2="",t.keyboardPedalHeel3="",t.keyboardPedalHeelToToe="",t.keyboardPedalHeelToe="",t.keyboardPedalHookEnd="",t.keyboardPedalHookStart="",t.keyboardPedalHyphen="",t.keyboardPedalP="",t.keyboardPedalParensLeft="",t.keyboardPedalParensRight="",t.keyboardPedalPed="",t.keyboardPedalS="",t.keyboardPedalSost="",t.keyboardPedalToe1="",t.keyboardPedalToe2="",t.keyboardPedalToeToHeel="",t.keyboardPedalUp="",t.keyboardPedalUpNotch="",t.keyboardPedalUpSpecial="",t.keyboardPlayWithLH="",t.keyboardPlayWithLHEnd="",t.keyboardPlayWithRH="",t.keyboardPlayWithRHEnd="",t.keyboardPluckInside="",t.keyboardRightPedalPictogram="",t.kievanAccidentalFlat="",t.kievanAccidentalSharp="",t.kievanAugmentationDot="",t.kievanCClef="",t.kievanEndingSymbol="",t.kievanNote8thStemDown="",t.kievanNote8thStemUp="",t.kievanNoteBeam="",t.kievanNoteHalfStaffLine="",t.kievanNoteHalfStaffSpace="",t.kievanNoteQuarterStemDown="",t.kievanNoteQuarterStemUp="",t.kievanNoteReciting="",t.kievanNoteWhole="",t.kievanNoteWholeFinal="",t.kodalyHandDo="",t.kodalyHandFa="",t.kodalyHandLa="",t.kodalyHandMi="",t.kodalyHandRe="",t.kodalyHandSo="",t.kodalyHandTi="",t.leftRepeatSmall="",t.legerLine="",t.legerLineNarrow="",t.legerLineWide="",t.luteBarlineEndRepeat="",t.luteBarlineFinal="",t.luteBarlineStartRepeat="",t.luteDuration16th="",t.luteDuration32nd="",t.luteDuration8th="",t.luteDurationDoubleWhole="",t.luteDurationHalf="",t.luteDurationQuarter="",t.luteDurationWhole="",t.luteFingeringRHFirst="",t.luteFingeringRHSecond="",t.luteFingeringRHThird="",t.luteFingeringRHThumb="",t.luteFrench10thCourse="",t.luteFrench7thCourse="",t.luteFrench8thCourse="",t.luteFrench9thCourse="",t.luteFrenchAppoggiaturaAbove="",t.luteFrenchAppoggiaturaBelow="",t.luteFrenchFretA="",t.luteFrenchFretB="",t.luteFrenchFretC="",t.luteFrenchFretD="",t.luteFrenchFretE="",t.luteFrenchFretF="",t.luteFrenchFretG="",t.luteFrenchFretH="",t.luteFrenchFretI="",t.luteFrenchFretK="",t.luteFrenchFretL="",t.luteFrenchFretM="",t.luteFrenchFretN="",t.luteFrenchMordentInverted="",t.luteFrenchMordentLower="",t.luteFrenchMordentUpper="",t.luteGermanALower="",t.luteGermanAUpper="",t.luteGermanBLower="",t.luteGermanBUpper="",t.luteGermanCLower="",t.luteGermanCUpper="",t.luteGermanDLower="",t.luteGermanDUpper="",t.luteGermanELower="",t.luteGermanEUpper="",t.luteGermanFLower="",t.luteGermanFUpper="",t.luteGermanGLower="",t.luteGermanGUpper="",t.luteGermanHLower="",t.luteGermanHUpper="",t.luteGermanILower="",t.luteGermanIUpper="",t.luteGermanKLower="",t.luteGermanKUpper="",t.luteGermanLLower="",t.luteGermanLUpper="",t.luteGermanMLower="",t.luteGermanMUpper="",t.luteGermanNLower="",t.luteGermanNUpper="",t.luteGermanOLower="",t.luteGermanPLower="",t.luteGermanQLower="",t.luteGermanRLower="",t.luteGermanSLower="",t.luteGermanTLower="",t.luteGermanVLower="",t.luteGermanXLower="",t.luteGermanYLower="",t.luteGermanZLower="",t.luteItalianClefCSolFaUt="",t.luteItalianClefFFaUt="",t.luteItalianFret0="",t.luteItalianFret1="",t.luteItalianFret2="",t.luteItalianFret3="",t.luteItalianFret4="",t.luteItalianFret5="",t.luteItalianFret6="",t.luteItalianFret7="",t.luteItalianFret8="",t.luteItalianFret9="",t.luteItalianHoldFinger="",t.luteItalianHoldNote="",t.luteItalianReleaseFinger="",t.luteItalianTempoFast="",t.luteItalianTempoNeitherFastNorSlow="",t.luteItalianTempoSlow="",t.luteItalianTempoSomewhatFast="",t.luteItalianTempoVerySlow="",t.luteItalianTimeTriple="",t.luteItalianTremolo="",t.luteItalianVibrato="",t.luteStaff6Lines="",t.luteStaff6LinesNarrow="",t.luteStaff6LinesWide="",t.lyricsElision="",t.lyricsElisionNarrow="",t.lyricsElisionWide="",t.lyricsHyphenBaseline="",t.lyricsHyphenBaselineNonBreaking="",t.lyricsTextRepeat="",t.medRenFlatHardB="",t.medRenFlatSoftB="",t.medRenFlatWithDot="",t.medRenGClefCMN="",t.medRenLiquescenceCMN="",t.medRenLiquescentAscCMN="",t.medRenLiquescentDescCMN="",t.medRenNatural="",t.medRenNaturalWithCross="",t.medRenOriscusCMN="",t.medRenPlicaCMN="",t.medRenPunctumCMN="",t.medRenQuilismaCMN="",t.medRenSharpCroix="",t.medRenStrophicusCMN="",t.mensuralAlterationSign="",t.mensuralBlackBrevis="",t.mensuralBlackBrevisVoid="",t.mensuralBlackDragma="",t.mensuralBlackLonga="",t.mensuralBlackMaxima="",t.mensuralBlackMinima="",t.mensuralBlackMinimaVoid="",t.mensuralBlackSemibrevis="",t.mensuralBlackSemibrevisCaudata="",t.mensuralBlackSemibrevisOblique="",t.mensuralBlackSemibrevisVoid="",t.mensuralBlackSemiminima="",t.mensuralCclef="",t.mensuralCclefPetrucciPosHigh="",t.mensuralCclefPetrucciPosHighest="",t.mensuralCclefPetrucciPosLow="",t.mensuralCclefPetrucciPosLowest="",t.mensuralCclefPetrucciPosMiddle="",t.mensuralColorationEndRound="",t.mensuralColorationEndSquare="",t.mensuralColorationStartRound="",t.mensuralColorationStartSquare="",t.mensuralCombStemDiagonal="",t.mensuralCombStemDown="",t.mensuralCombStemDownFlagExtended="",t.mensuralCombStemDownFlagFlared="",t.mensuralCombStemDownFlagFusa="",t.mensuralCombStemDownFlagLeft="",t.mensuralCombStemDownFlagRight="",t.mensuralCombStemDownFlagSemiminima="",t.mensuralCombStemUp="",t.mensuralCombStemUpFlagExtended="",t.mensuralCombStemUpFlagFlared="",t.mensuralCombStemUpFlagFusa="",t.mensuralCombStemUpFlagLeft="",t.mensuralCombStemUpFlagRight="",t.mensuralCombStemUpFlagSemiminima="",t.mensuralCustosCheckmark="",t.mensuralCustosDown="",t.mensuralCustosTurn="",t.mensuralCustosUp="",t.mensuralFclef="",t.mensuralFclefPetrucci="",t.mensuralGclef="",t.mensuralGclefPetrucci="",t.mensuralModusImperfectumVert="",t.mensuralModusPerfectumVert="",t.mensuralNoteheadLongaBlack="",t.mensuralNoteheadLongaBlackVoid="",t.mensuralNoteheadLongaVoid="",t.mensuralNoteheadLongaWhite="",t.mensuralNoteheadMaximaBlack="",t.mensuralNoteheadMaximaBlackVoid="",t.mensuralNoteheadMaximaVoid="",t.mensuralNoteheadMaximaWhite="",t.mensuralNoteheadMinimaWhite="",t.mensuralNoteheadSemibrevisBlack="",t.mensuralNoteheadSemibrevisBlackVoid="",t.mensuralNoteheadSemibrevisBlackVoidTurned="",t.mensuralNoteheadSemibrevisVoid="",t.mensuralNoteheadSemiminimaWhite="",t.mensuralObliqueAsc2ndBlack="",t.mensuralObliqueAsc2ndBlackVoid="",t.mensuralObliqueAsc2ndVoid="",t.mensuralObliqueAsc2ndWhite="",t.mensuralObliqueAsc3rdBlack="",t.mensuralObliqueAsc3rdBlackVoid="",t.mensuralObliqueAsc3rdVoid="",t.mensuralObliqueAsc3rdWhite="",t.mensuralObliqueAsc4thBlack="",t.mensuralObliqueAsc4thBlackVoid="",t.mensuralObliqueAsc4thVoid="",t.mensuralObliqueAsc4thWhite="",t.mensuralObliqueAsc5thBlack="",t.mensuralObliqueAsc5thBlackVoid="",t.mensuralObliqueAsc5thVoid="",t.mensuralObliqueAsc5thWhite="",t.mensuralObliqueDesc2ndBlack="",t.mensuralObliqueDesc2ndBlackVoid="",t.mensuralObliqueDesc2ndVoid="",t.mensuralObliqueDesc2ndWhite="",t.mensuralObliqueDesc3rdBlack="",t.mensuralObliqueDesc3rdBlackVoid="",t.mensuralObliqueDesc3rdVoid="",t.mensuralObliqueDesc3rdWhite="",t.mensuralObliqueDesc4thBlack="",t.mensuralObliqueDesc4thBlackVoid="",t.mensuralObliqueDesc4thVoid="",t.mensuralObliqueDesc4thWhite="",t.mensuralObliqueDesc5thBlack="",t.mensuralObliqueDesc5thBlackVoid="",t.mensuralObliqueDesc5thVoid="",t.mensuralObliqueDesc5thWhite="",t.mensuralProlation1="",t.mensuralProlation10="",t.mensuralProlation11="",t.mensuralProlation2="",t.mensuralProlation3="",t.mensuralProlation4="",t.mensuralProlation5="",t.mensuralProlation6="",t.mensuralProlation7="",t.mensuralProlation8="",t.mensuralProlation9="",t.mensuralProlationCombiningDot="",t.mensuralProlationCombiningDotVoid="",t.mensuralProlationCombiningStroke="",t.mensuralProlationCombiningThreeDots="",t.mensuralProlationCombiningThreeDotsTri="",t.mensuralProlationCombiningTwoDots="",t.mensuralProportion1="",t.mensuralProportion2="",t.mensuralProportion3="",t.mensuralProportion4="",t.mensuralProportion5="",t.mensuralProportion6="",t.mensuralProportion7="",t.mensuralProportion8="",t.mensuralProportion9="",t.mensuralProportionMajor="",t.mensuralProportionMinor="",t.mensuralProportionProportioDupla1="",t.mensuralProportionProportioDupla2="",t.mensuralProportionProportioQuadrupla="",t.mensuralProportionProportioTripla="",t.mensuralProportionTempusPerfectum="",t.mensuralRestBrevis="",t.mensuralRestFusa="",t.mensuralRestLongaImperfecta="",t.mensuralRestLongaPerfecta="",t.mensuralRestMaxima="",t.mensuralRestMinima="",t.mensuralRestSemibrevis="",t.mensuralRestSemifusa="",t.mensuralRestSemiminima="",t.mensuralSignumDown="",t.mensuralSignumUp="",t.mensuralTempusImperfectumHoriz="",t.mensuralTempusPerfectumHoriz="",t.mensuralWhiteBrevis="",t.mensuralWhiteFusa="",t.mensuralWhiteLonga="",t.mensuralWhiteMaxima="",t.mensuralWhiteMinima="",t.mensuralWhiteSemibrevis="",t.mensuralWhiteSemiminima="",t.metAugmentationDot="",t.metNote1024thDown="",t.metNote1024thUp="",t.metNote128thDown="",t.metNote128thUp="",t.metNote16thDown="",t.metNote16thUp="",t.metNote256thDown="",t.metNote256thUp="",t.metNote32ndDown="",t.metNote32ndUp="",t.metNote512thDown="",t.metNote512thUp="",t.metNote64thDown="",t.metNote64thUp="",t.metNote8thDown="",t.metNote8thUp="",t.metNoteDoubleWhole="",t.metNoteDoubleWholeSquare="",t.metNoteHalfDown="",t.metNoteHalfUp="",t.metNoteQuarterDown="",t.metNoteQuarterUp="",t.metNoteWhole="",t.metricModulationArrowLeft="",t.metricModulationArrowRight="",t.miscDoNotCopy="",t.miscDoNotPhotocopy="",t.miscEyeglasses="",t.note1024thDown="",t.note1024thUp="",t.note128thDown="",t.note128thUp="",t.note16thDown="",t.note16thUp="",t.note256thDown="",t.note256thUp="",t.note32ndDown="",t.note32ndUp="",t.note512thDown="",t.note512thUp="",t.note64thDown="",t.note64thUp="",t.note8thDown="",t.note8thUp="",t.noteABlack="",t.noteAFlatBlack="",t.noteAFlatHalf="",t.noteAFlatWhole="",t.noteAHalf="",t.noteASharpBlack="",t.noteASharpHalf="",t.noteASharpWhole="",t.noteAWhole="",t.noteBBlack="",t.noteBFlatBlack="",t.noteBFlatHalf="",t.noteBFlatWhole="",t.noteBHalf="",t.noteBSharpBlack="",t.noteBSharpHalf="",t.noteBSharpWhole="",t.noteBWhole="",t.noteCBlack="",t.noteCFlatBlack="",t.noteCFlatHalf="",t.noteCFlatWhole="",t.noteCHalf="",t.noteCSharpBlack="",t.noteCSharpHalf="",t.noteCSharpWhole="",t.noteCWhole="",t.noteDBlack="",t.noteDFlatBlack="",t.noteDFlatHalf="",t.noteDFlatWhole="",t.noteDHalf="",t.noteDSharpBlack="",t.noteDSharpHalf="",t.noteDSharpWhole="",t.noteDWhole="",t.noteDiBlack="",t.noteDiHalf="",t.noteDiWhole="",t.noteDoBlack="",t.noteDoHalf="",t.noteDoWhole="",t.noteDoubleWhole="",t.noteDoubleWholeSquare="",t.noteEBlack="",t.noteEFlatBlack="",t.noteEFlatHalf="",t.noteEFlatWhole="",t.noteEHalf="",t.noteESharpBlack="",t.noteESharpHalf="",t.noteESharpWhole="",t.noteEWhole="",t.noteEmptyBlack="",t.noteEmptyHalf="",t.noteEmptyWhole="",t.noteFBlack="",t.noteFFlatBlack="",t.noteFFlatHalf="",t.noteFFlatWhole="",t.noteFHalf="",t.noteFSharpBlack="",t.noteFSharpHalf="",t.noteFSharpWhole="",t.noteFWhole="",t.noteFaBlack="",t.noteFaHalf="",t.noteFaWhole="",t.noteFiBlack="",t.noteFiHalf="",t.noteFiWhole="",t.noteGBlack="",t.noteGFlatBlack="",t.noteGFlatHalf="",t.noteGFlatWhole="",t.noteGHalf="",t.noteGSharpBlack="",t.noteGSharpHalf="",t.noteGSharpWhole="",t.noteGWhole="",t.noteHBlack="",t.noteHHalf="",t.noteHSharpBlack="",t.noteHSharpHalf="",t.noteHSharpWhole="",t.noteHWhole="",t.noteHalfDown="",t.noteHalfUp="",t.noteLaBlack="",t.noteLaHalf="",t.noteLaWhole="",t.noteLeBlack="",t.noteLeHalf="",t.noteLeWhole="",t.noteLiBlack="",t.noteLiHalf="",t.noteLiWhole="",t.noteMeBlack="",t.noteMeHalf="",t.noteMeWhole="",t.noteMiBlack="",t.noteMiHalf="",t.noteMiWhole="",t.noteQuarterDown="",t.noteQuarterUp="",t.noteRaBlack="",t.noteRaHalf="",t.noteRaWhole="",t.noteReBlack="",t.noteReHalf="",t.noteReWhole="",t.noteRiBlack="",t.noteRiHalf="",t.noteRiWhole="",t.noteSeBlack="",t.noteSeHalf="",t.noteSeWhole="",t.noteShapeArrowheadLeftBlack="",t.noteShapeArrowheadLeftDoubleWhole="",t.noteShapeArrowheadLeftWhite="",t.noteShapeDiamondBlack="",t.noteShapeDiamondDoubleWhole="",t.noteShapeDiamondWhite="",t.noteShapeIsoscelesTriangleBlack="",t.noteShapeIsoscelesTriangleDoubleWhole="",t.noteShapeIsoscelesTriangleWhite="",t.noteShapeKeystoneBlack="",t.noteShapeKeystoneDoubleWhole="",t.noteShapeKeystoneWhite="",t.noteShapeMoonBlack="",t.noteShapeMoonDoubleWhole="",t.noteShapeMoonLeftBlack="",t.noteShapeMoonLeftDoubleWhole="",t.noteShapeMoonLeftWhite="",t.noteShapeMoonWhite="",t.noteShapeQuarterMoonBlack="",t.noteShapeQuarterMoonDoubleWhole="",t.noteShapeQuarterMoonWhite="",t.noteShapeRoundBlack="",t.noteShapeRoundDoubleWhole="",t.noteShapeRoundWhite="",t.noteShapeSquareBlack="",t.noteShapeSquareDoubleWhole="",t.noteShapeSquareWhite="",t.noteShapeTriangleLeftBlack="",t.noteShapeTriangleLeftDoubleWhole="",t.noteShapeTriangleLeftWhite="",t.noteShapeTriangleRightBlack="",t.noteShapeTriangleRightDoubleWhole="",t.noteShapeTriangleRightWhite="",t.noteShapeTriangleRoundBlack="",t.noteShapeTriangleRoundDoubleWhole="",t.noteShapeTriangleRoundLeftBlack="",t.noteShapeTriangleRoundLeftDoubleWhole="",t.noteShapeTriangleRoundLeftWhite="",t.noteShapeTriangleRoundWhite="",t.noteShapeTriangleUpBlack="",t.noteShapeTriangleUpDoubleWhole="",t.noteShapeTriangleUpWhite="",t.noteSiBlack="",t.noteSiHalf="",t.noteSiWhole="",t.noteSoBlack="",t.noteSoHalf="",t.noteSoWhole="",t.noteTeBlack="",t.noteTeHalf="",t.noteTeWhole="",t.noteTiBlack="",t.noteTiHalf="",t.noteTiWhole="",t.noteWhole="",t.noteheadBlack="",t.noteheadCircleSlash="",t.noteheadCircleX="",t.noteheadCircleXDoubleWhole="",t.noteheadCircleXHalf="",t.noteheadCircleXWhole="",t.noteheadCircledBlack="",t.noteheadCircledBlackLarge="",t.noteheadCircledDoubleWhole="",t.noteheadCircledDoubleWholeLarge="",t.noteheadCircledHalf="",t.noteheadCircledHalfLarge="",t.noteheadCircledWhole="",t.noteheadCircledWholeLarge="",t.noteheadCircledXLarge="",t.noteheadClusterDoubleWhole2nd="",t.noteheadClusterDoubleWhole3rd="",t.noteheadClusterDoubleWholeBottom="",t.noteheadClusterDoubleWholeMiddle="",t.noteheadClusterDoubleWholeTop="",t.noteheadClusterHalf2nd="",t.noteheadClusterHalf3rd="",t.noteheadClusterHalfBottom="",t.noteheadClusterHalfMiddle="",t.noteheadClusterHalfTop="",t.noteheadClusterQuarter2nd="",t.noteheadClusterQuarter3rd="",t.noteheadClusterQuarterBottom="",t.noteheadClusterQuarterMiddle="",t.noteheadClusterQuarterTop="",t.noteheadClusterRoundBlack="",t.noteheadClusterRoundWhite="",t.noteheadClusterSquareBlack="",t.noteheadClusterSquareWhite="",t.noteheadClusterWhole2nd="",t.noteheadClusterWhole3rd="",t.noteheadClusterWholeBottom="",t.noteheadClusterWholeMiddle="",t.noteheadClusterWholeTop="",t.noteheadCowellEleventhNoteSeriesHalf="",t.noteheadCowellEleventhNoteSeriesWhole="",t.noteheadCowellEleventhSeriesBlack="",t.noteheadCowellFifteenthNoteSeriesBlack="",t.noteheadCowellFifteenthNoteSeriesHalf="",t.noteheadCowellFifteenthNoteSeriesWhole="",t.noteheadCowellFifthNoteSeriesBlack="",t.noteheadCowellFifthNoteSeriesHalf="",t.noteheadCowellFifthNoteSeriesWhole="",t.noteheadCowellNinthNoteSeriesBlack="",t.noteheadCowellNinthNoteSeriesHalf="",t.noteheadCowellNinthNoteSeriesWhole="",t.noteheadCowellSeventhNoteSeriesBlack="",t.noteheadCowellSeventhNoteSeriesHalf="",t.noteheadCowellSeventhNoteSeriesWhole="",t.noteheadCowellThirdNoteSeriesBlack="",t.noteheadCowellThirdNoteSeriesHalf="",t.noteheadCowellThirdNoteSeriesWhole="",t.noteheadCowellThirteenthNoteSeriesBlack="",t.noteheadCowellThirteenthNoteSeriesHalf="",t.noteheadCowellThirteenthNoteSeriesWhole="",t.noteheadDiamondBlack="",t.noteheadDiamondBlackOld="",t.noteheadDiamondBlackWide="",t.noteheadDiamondClusterBlack2nd="",t.noteheadDiamondClusterBlack3rd="",t.noteheadDiamondClusterBlackBottom="",t.noteheadDiamondClusterBlackMiddle="",t.noteheadDiamondClusterBlackTop="",t.noteheadDiamondClusterWhite2nd="",t.noteheadDiamondClusterWhite3rd="",t.noteheadDiamondClusterWhiteBottom="",t.noteheadDiamondClusterWhiteMiddle="",t.noteheadDiamondClusterWhiteTop="",t.noteheadDiamondDoubleWhole="",t.noteheadDiamondDoubleWholeOld="",t.noteheadDiamondHalf="",t.noteheadDiamondHalfFilled="",t.noteheadDiamondHalfOld="",t.noteheadDiamondHalfWide="",t.noteheadDiamondOpen="",t.noteheadDiamondWhite="",t.noteheadDiamondWhiteWide="",t.noteheadDiamondWhole="",t.noteheadDiamondWholeOld="",t.noteheadDoubleWhole="",t.noteheadDoubleWholeSquare="",t.noteheadDoubleWholeWithX="",t.noteheadHalf="",t.noteheadHalfFilled="",t.noteheadHalfWithX="",t.noteheadHeavyX="",t.noteheadHeavyXHat="",t.noteheadLargeArrowDownBlack="",t.noteheadLargeArrowDownDoubleWhole="",t.noteheadLargeArrowDownHalf="",t.noteheadLargeArrowDownWhole="",t.noteheadLargeArrowUpBlack="",t.noteheadLargeArrowUpDoubleWhole="",t.noteheadLargeArrowUpHalf="",t.noteheadLargeArrowUpWhole="",t.noteheadMoonBlack="",t.noteheadMoonWhite="",t.noteheadNancarrowSine="",t.noteheadNull="",t.noteheadParenthesis="",t.noteheadParenthesisLeft="",t.noteheadParenthesisRight="",t.noteheadPlusBlack="",t.noteheadPlusDoubleWhole="",t.noteheadPlusHalf="",t.noteheadPlusWhole="",t.noteheadRectangularClusterBlackBottom="",t.noteheadRectangularClusterBlackMiddle="",t.noteheadRectangularClusterBlackTop="",t.noteheadRectangularClusterWhiteBottom="",t.noteheadRectangularClusterWhiteMiddle="",t.noteheadRectangularClusterWhiteTop="",t.noteheadRoundBlack="",t.noteheadRoundBlackDoubleSlashed="",t.noteheadRoundBlackLarge="",t.noteheadRoundBlackSlashed="",t.noteheadRoundBlackSlashedLarge="",t.noteheadRoundWhite="",t.noteheadRoundWhiteDoubleSlashed="",t.noteheadRoundWhiteLarge="",t.noteheadRoundWhiteSlashed="",t.noteheadRoundWhiteSlashedLarge="",t.noteheadRoundWhiteWithDot="",t.noteheadRoundWhiteWithDotLarge="",t.noteheadSlashDiamondWhite="",t.noteheadSlashHorizontalEnds="",t.noteheadSlashHorizontalEndsMuted="",t.noteheadSlashVerticalEnds="",t.noteheadSlashVerticalEndsMuted="",t.noteheadSlashVerticalEndsSmall="",t.noteheadSlashWhiteDoubleWhole="",t.noteheadSlashWhiteHalf="",t.noteheadSlashWhiteMuted="",t.noteheadSlashWhiteWhole="",t.noteheadSlashX="",t.noteheadSlashedBlack1="",t.noteheadSlashedBlack2="",t.noteheadSlashedDoubleWhole1="",t.noteheadSlashedDoubleWhole2="",t.noteheadSlashedHalf1="",t.noteheadSlashedHalf2="",t.noteheadSlashedWhole1="",t.noteheadSlashedWhole2="",t.noteheadSquareBlack="",t.noteheadSquareBlackLarge="",t.noteheadSquareBlackWhite="",t.noteheadSquareWhite="",t.noteheadTriangleDownBlack="",t.noteheadTriangleDownDoubleWhole="",t.noteheadTriangleDownHalf="",t.noteheadTriangleDownWhite="",t.noteheadTriangleDownWhole="",t.noteheadTriangleLeftBlack="",t.noteheadTriangleLeftWhite="",t.noteheadTriangleRightBlack="",t.noteheadTriangleRightWhite="",t.noteheadTriangleRoundDownBlack="",t.noteheadTriangleRoundDownWhite="",t.noteheadTriangleUpBlack="",t.noteheadTriangleUpDoubleWhole="",t.noteheadTriangleUpHalf="",t.noteheadTriangleUpRightBlack="",t.noteheadTriangleUpRightWhite="",t.noteheadTriangleUpWhite="",t.noteheadTriangleUpWhole="",t.noteheadVoidWithX="",t.noteheadWhole="",t.noteheadWholeFilled="",t.noteheadWholeWithX="",t.noteheadXBlack="",t.noteheadXDoubleWhole="",t.noteheadXHalf="",t.noteheadXOrnate="",t.noteheadXOrnateEllipse="",t.noteheadXWhole="",t.octaveBaselineA="",t.octaveBaselineB="",t.octaveBaselineM="",t.octaveBaselineV="",t.octaveBassa="",t.octaveLoco="",t.octaveParensLeft="",t.octaveParensRight="",t.octaveSuperscriptA="",t.octaveSuperscriptB="",t.octaveSuperscriptM="",t.octaveSuperscriptV="",t.oneHandedRollStevens="",t.organGerman2Fusae="",t.organGerman2Minimae="",t.organGerman2OctaveUp="",t.organGerman2Semifusae="",t.organGerman2Semiminimae="",t.organGerman3Fusae="",t.organGerman3Minimae="",t.organGerman3Semifusae="",t.organGerman3Semiminimae="",t.organGerman4Fusae="",t.organGerman4Minimae="",t.organGerman4Semifusae="",t.organGerman4Semiminimae="",t.organGerman5Fusae="",t.organGerman5Minimae="",t.organGerman5Semifusae="",t.organGerman5Semiminimae="",t.organGerman6Fusae="",t.organGerman6Minimae="",t.organGerman6Semifusae="",t.organGerman6Semiminimae="",t.organGermanALower="",t.organGermanAUpper="",t.organGermanAugmentationDot="",t.organGermanBLower="",t.organGermanBUpper="",t.organGermanBuxheimerBrevis2="",t.organGermanBuxheimerBrevis3="",t.organGermanBuxheimerMinimaRest="",t.organGermanBuxheimerSemibrevis="",t.organGermanBuxheimerSemibrevisRest="",t.organGermanCLower="",t.organGermanCUpper="",t.organGermanCisLower="",t.organGermanCisUpper="",t.organGermanDLower="",t.organGermanDUpper="",t.organGermanDisLower="",t.organGermanDisUpper="",t.organGermanELower="",t.organGermanEUpper="",t.organGermanFLower="",t.organGermanFUpper="",t.organGermanFisLower="",t.organGermanFisUpper="",t.organGermanFusa="",t.organGermanFusaRest="",t.organGermanGLower="",t.organGermanGUpper="",t.organGermanGisLower="",t.organGermanGisUpper="",t.organGermanHLower="",t.organGermanHUpper="",t.organGermanMinima="",t.organGermanMinimaRest="",t.organGermanOctaveDown="",t.organGermanOctaveUp="",t.organGermanSemibrevis="",t.organGermanSemibrevisRest="",t.organGermanSemifusa="",t.organGermanSemifusaRest="",t.organGermanSemiminima="",t.organGermanSemiminimaRest="",t.organGermanTie="",t.ornamentBottomLeftConcaveStroke="",t.ornamentBottomLeftConcaveStrokeLarge="",t.ornamentBottomLeftConvexStroke="",t.ornamentBottomRightConcaveStroke="",t.ornamentBottomRightConvexStroke="",t.ornamentComma="",t.ornamentDoubleObliqueLinesAfterNote="",t.ornamentDoubleObliqueLinesBeforeNote="",t.ornamentDownCurve="",t.ornamentHaydn="",t.ornamentHighLeftConcaveStroke="",t.ornamentHighLeftConvexStroke="",t.ornamentHighRightConcaveStroke="",t.ornamentHighRightConvexStroke="",t.ornamentHookAfterNote="",t.ornamentHookBeforeNote="",t.ornamentLeftFacingHalfCircle="",t.ornamentLeftFacingHook="",t.ornamentLeftPlus="",t.ornamentLeftShakeT="",t.ornamentLeftVerticalStroke="",t.ornamentLeftVerticalStrokeWithCross="",t.ornamentLowLeftConcaveStroke="",t.ornamentLowLeftConvexStroke="",t.ornamentLowRightConcaveStroke="",t.ornamentLowRightConvexStroke="",t.ornamentMiddleVerticalStroke="",t.ornamentMordent="",t.ornamentObliqueLineAfterNote="",t.ornamentObliqueLineBeforeNote="",t.ornamentObliqueLineHorizAfterNote="",t.ornamentObliqueLineHorizBeforeNote="",t.ornamentOriscus="",t.ornamentPinceCouperin="",t.ornamentPortDeVoixV="",t.ornamentPrecompAppoggTrill="",t.ornamentPrecompAppoggTrillSuffix="",t.ornamentPrecompCadence="",t.ornamentPrecompCadenceUpperPrefix="",t.ornamentPrecompCadenceUpperPrefixTurn="",t.ornamentPrecompCadenceWithTurn="",t.ornamentPrecompDescendingSlide="",t.ornamentPrecompDoubleCadenceLowerPrefix="",t.ornamentPrecompDoubleCadenceUpperPrefix="",t.ornamentPrecompDoubleCadenceUpperPrefixTurn="",t.ornamentPrecompInvertedMordentUpperPrefix="",t.ornamentPrecompMordentRelease="",t.ornamentPrecompMordentUpperPrefix="",t.ornamentPrecompPortDeVoixMordent="",t.ornamentPrecompSlide="",t.ornamentPrecompSlideTrillBach="",t.ornamentPrecompSlideTrillDAnglebert="",t.ornamentPrecompSlideTrillMarpurg="",t.ornamentPrecompSlideTrillMuffat="",t.ornamentPrecompSlideTrillSuffixMuffat="",t.ornamentPrecompTrillLowerSuffix="",t.ornamentPrecompTrillSuffixDandrieu="",t.ornamentPrecompTrillWithMordent="",t.ornamentPrecompTurnTrillBach="",t.ornamentPrecompTurnTrillDAnglebert="",t.ornamentQuilisma="",t.ornamentRightFacingHalfCircle="",t.ornamentRightFacingHook="",t.ornamentRightVerticalStroke="",t.ornamentSchleifer="",t.ornamentShake3="",t.ornamentShakeMuffat1="",t.ornamentShortObliqueLineAfterNote="",t.ornamentShortObliqueLineBeforeNote="",t.ornamentShortTrill="",t.ornamentTopLeftConcaveStroke="",t.ornamentTopLeftConvexStroke="",t.ornamentTopRightConcaveStroke="",t.ornamentTopRightConvexStroke="",t.ornamentTremblement="",t.ornamentTremblementCouperin="",t.ornamentTrill="",t.ornamentTurn="",t.ornamentTurnInverted="",t.ornamentTurnSlash="",t.ornamentTurnUp="",t.ornamentTurnUpS="",t.ornamentUpCurve="",t.ornamentVerticalLine="",t.ornamentZigZagLineNoRightEnd="",t.ornamentZigZagLineWithRightEnd="",t.ottava="",t.ottavaAlta="",t.ottavaBassa="",t.ottavaBassaBa="",t.ottavaBassaVb="",t.pendereckiTremolo="",t.pictAgogo="",t.pictAlmglocken="",t.pictAnvil="",t.pictBambooChimes="",t.pictBambooScraper="",t.pictBassDrum="",t.pictBassDrumOnSide="",t.pictBeaterBow="",t.pictBeaterBox="",t.pictBeaterBrassMalletsDown="",t.pictBeaterBrassMalletsLeft="",t.pictBeaterBrassMalletsRight="",t.pictBeaterBrassMalletsUp="",t.pictBeaterCombiningDashedCircle="",t.pictBeaterCombiningParentheses="",t.pictBeaterDoubleBassDrumDown="",t.pictBeaterDoubleBassDrumUp="",t.pictBeaterFinger="",t.pictBeaterFingernails="",t.pictBeaterFist="",t.pictBeaterGuiroScraper="",t.pictBeaterHammer="",t.pictBeaterHammerMetalDown="",t.pictBeaterHammerMetalUp="",t.pictBeaterHammerPlasticDown="",t.pictBeaterHammerPlasticUp="",t.pictBeaterHammerWoodDown="",t.pictBeaterHammerWoodUp="",t.pictBeaterHand="",t.pictBeaterHardBassDrumDown="",t.pictBeaterHardBassDrumUp="",t.pictBeaterHardGlockenspielDown="",t.pictBeaterHardGlockenspielLeft="",t.pictBeaterHardGlockenspielRight="",t.pictBeaterHardGlockenspielUp="",t.pictBeaterHardTimpaniDown="",t.pictBeaterHardTimpaniLeft="",t.pictBeaterHardTimpaniRight="",t.pictBeaterHardTimpaniUp="",t.pictBeaterHardXylophoneDown="",t.pictBeaterHardXylophoneLeft="",t.pictBeaterHardXylophoneRight="",t.pictBeaterHardXylophoneUp="",t.pictBeaterHardYarnDown="",t.pictBeaterHardYarnLeft="",t.pictBeaterHardYarnRight="",t.pictBeaterHardYarnUp="",t.pictBeaterJazzSticksDown="",t.pictBeaterJazzSticksUp="",t.pictBeaterKnittingNeedle="",t.pictBeaterMallet="",t.pictBeaterMalletDown="",t.pictBeaterMediumBassDrumDown="",t.pictBeaterMediumBassDrumUp="",t.pictBeaterMediumTimpaniDown="",t.pictBeaterMediumTimpaniLeft="",t.pictBeaterMediumTimpaniRight="",t.pictBeaterMediumTimpaniUp="",t.pictBeaterMediumXylophoneDown="",t.pictBeaterMediumXylophoneLeft="",t.pictBeaterMediumXylophoneRight="",t.pictBeaterMediumXylophoneUp="",t.pictBeaterMediumYarnDown="",t.pictBeaterMediumYarnLeft="",t.pictBeaterMediumYarnRight="",t.pictBeaterMediumYarnUp="",t.pictBeaterMetalBassDrumDown="",t.pictBeaterMetalBassDrumUp="",t.pictBeaterMetalDown="",t.pictBeaterMetalHammer="",t.pictBeaterMetalLeft="",t.pictBeaterMetalRight="",t.pictBeaterMetalUp="",t.pictBeaterSnareSticksDown="",t.pictBeaterSnareSticksUp="",t.pictBeaterSoftBassDrumDown="",t.pictBeaterSoftBassDrumUp="",t.pictBeaterSoftGlockenspielDown="",t.pictBeaterSoftGlockenspielLeft="",t.pictBeaterSoftGlockenspielRight="",t.pictBeaterSoftGlockenspielUp="",t.pictBeaterSoftTimpaniDown="",t.pictBeaterSoftTimpaniLeft="",t.pictBeaterSoftTimpaniRight="",t.pictBeaterSoftTimpaniUp="",t.pictBeaterSoftXylophone="",t.pictBeaterSoftXylophoneDown="",t.pictBeaterSoftXylophoneLeft="",t.pictBeaterSoftXylophoneRight="",t.pictBeaterSoftXylophoneUp="",t.pictBeaterSoftYarnDown="",t.pictBeaterSoftYarnLeft="",t.pictBeaterSoftYarnRight="",t.pictBeaterSoftYarnUp="",t.pictBeaterSpoonWoodenMallet="",t.pictBeaterSuperballDown="",t.pictBeaterSuperballLeft="",t.pictBeaterSuperballRight="",t.pictBeaterSuperballUp="",t.pictBeaterTriangleDown="",t.pictBeaterTrianglePlain="",t.pictBeaterTriangleUp="",t.pictBeaterWireBrushesDown="",t.pictBeaterWireBrushesUp="",t.pictBeaterWoodTimpaniDown="",t.pictBeaterWoodTimpaniLeft="",t.pictBeaterWoodTimpaniRight="",t.pictBeaterWoodTimpaniUp="",t.pictBeaterWoodXylophoneDown="",t.pictBeaterWoodXylophoneLeft="",t.pictBeaterWoodXylophoneRight="",t.pictBeaterWoodXylophoneUp="",t.pictBell="",t.pictBellOfCymbal="",t.pictBellPlate="",t.pictBellTree="",t.pictBirdWhistle="",t.pictBoardClapper="",t.pictBongos="",t.pictBrakeDrum="",t.pictCabasa="",t.pictCannon="",t.pictCarHorn="",t.pictCastanets="",t.pictCastanetsWithHandle="",t.pictCelesta="",t.pictCencerro="",t.pictCenter1="",t.pictCenter2="",t.pictCenter3="",t.pictChainRattle="",t.pictChimes="",t.pictChineseCymbal="",t.pictChokeCymbal="",t.pictClaves="",t.pictCoins="",t.pictConga="",t.pictCowBell="",t.pictCrashCymbals="",t.pictCrotales="",t.pictCrushStem="",t.pictCuica="",t.pictCymbalTongs="",t.pictDamp1="",t.pictDamp2="",t.pictDamp3="",t.pictDamp4="",t.pictDeadNoteStem="",t.pictDrumStick="",t.pictDuckCall="",t.pictEdgeOfCymbal="",t.pictEmptyTrap="",t.pictFingerCymbals="",t.pictFlexatone="",t.pictFootballRatchet="",t.pictGlassHarmonica="",t.pictGlassHarp="",t.pictGlassPlateChimes="",t.pictGlassTubeChimes="",t.pictGlsp="",t.pictGlspSmithBrindle="",t.pictGobletDrum="",t.pictGong="",t.pictGongWithButton="",t.pictGuiro="",t.pictGumHardDown="",t.pictGumHardLeft="",t.pictGumHardRight="",t.pictGumHardUp="",t.pictGumMediumDown="",t.pictGumMediumLeft="",t.pictGumMediumRight="",t.pictGumMediumUp="",t.pictGumSoftDown="",t.pictGumSoftLeft="",t.pictGumSoftRight="",t.pictGumSoftUp="",t.pictHalfOpen1="",t.pictHalfOpen2="",t.pictHandbell="",t.pictHiHat="",t.pictHiHatOnStand="",t.pictJawHarp="",t.pictJingleBells="",t.pictKlaxonHorn="",t.pictLeftHandCircle="",t.pictLionsRoar="",t.pictLithophone="",t.pictLogDrum="",t.pictLotusFlute="",t.pictMar="",t.pictMarSmithBrindle="",t.pictMaraca="",t.pictMaracas="",t.pictMegaphone="",t.pictMetalPlateChimes="",t.pictMetalTubeChimes="",t.pictMusicalSaw="",t.pictNormalPosition="",t.pictOnRim="",t.pictOpen="",t.pictOpenRimShot="",t.pictPistolShot="",t.pictPoliceWhistle="",t.pictQuijada="",t.pictRainstick="",t.pictRatchet="",t.pictRecoReco="",t.pictRightHandSquare="",t.pictRim1="",t.pictRim2="",t.pictRim3="",t.pictRimShotOnStem="",t.pictSandpaperBlocks="",t.pictScrapeAroundRim="",t.pictScrapeAroundRimClockwise="",t.pictScrapeCenterToEdge="",t.pictScrapeEdgeToCenter="",t.pictShellBells="",t.pictShellChimes="",t.pictSiren="",t.pictSistrum="",t.pictSizzleCymbal="",t.pictSleighBell="",t.pictSlideBrushOnGong="",t.pictSlideWhistle="",t.pictSlitDrum="",t.pictSnareDrum="",t.pictSnareDrumMilitary="",t.pictSnareDrumSnaresOff="",t.pictSteelDrums="",t.pictStickShot="",t.pictSuperball="",t.pictSuspendedCymbal="",t.pictSwishStem="",t.pictTabla="",t.pictTamTam="",t.pictTamTamWithBeater="",t.pictTambourine="",t.pictTempleBlocks="",t.pictTenorDrum="",t.pictThundersheet="",t.pictTimbales="",t.pictTimpani="",t.pictTomTom="",t.pictTomTomChinese="",t.pictTomTomIndoAmerican="",t.pictTomTomJapanese="",t.pictTriangle="",t.pictTubaphone="",t.pictTubularBells="",t.pictTurnLeftStem="",t.pictTurnRightLeftStem="",t.pictTurnRightStem="",t.pictVib="",t.pictVibMotorOff="",t.pictVibSmithBrindle="",t.pictVibraslap="",t.pictVietnameseHat="",t.pictWhip="",t.pictWindChimesGlass="",t.pictWindMachine="",t.pictWindWhistle="",t.pictWoodBlock="",t.pictWoundHardDown="",t.pictWoundHardLeft="",t.pictWoundHardRight="",t.pictWoundHardUp="",t.pictWoundSoftDown="",t.pictWoundSoftLeft="",t.pictWoundSoftRight="",t.pictWoundSoftUp="",t.pictXyl="",t.pictXylBass="",t.pictXylSmithBrindle="",t.pictXylTenor="",t.pictXylTenorTrough="",t.pictXylTrough="",t.pluckedBuzzPizzicato="",t.pluckedDamp="",t.pluckedDampAll="",t.pluckedDampOnStem="",t.pluckedFingernailFlick="",t.pluckedLeftHandPizzicato="",t.pluckedPlectrum="",t.pluckedSnapPizzicatoAbove="",t.pluckedSnapPizzicatoBelow="",t.pluckedWithFingernails="",t.quindicesima="",t.quindicesimaAlta="",t.quindicesimaBassa="",t.quindicesimaBassaMb="",t.repeat1Bar="",t.repeat2Bars="",t.repeat4Bars="",t.repeatBarLowerDot="",t.repeatBarSlash="",t.repeatBarUpperDot="",t.repeatDot="",t.repeatDots="",t.repeatLeft="",t.repeatRight="",t.repeatRightLeft="",t.rest1024th="",t.rest128th="",t.rest16th="",t.rest256th="",t.rest32nd="",t.rest512th="",t.rest64th="",t.rest8th="",t.restDoubleWhole="",t.restDoubleWholeLegerLine="",t.restHBar="",t.restHBarLeft="",t.restHBarMiddle="",t.restHBarRight="",t.restHalf="",t.restHalfLegerLine="",t.restLonga="",t.restMaxima="",t.restQuarter="",t.restQuarterOld="",t.restQuarterZ="",t.restWhole="",t.restWholeLegerLine="",t.reversedBrace="",t.reversedBracketBottom="",t.reversedBracketTop="",t.rightRepeatSmall="",t.scaleDegree1="",t.scaleDegree2="",t.scaleDegree3="",t.scaleDegree4="",t.scaleDegree5="",t.scaleDegree6="",t.scaleDegree7="",t.scaleDegree8="",t.scaleDegree9="",t.schaefferClef="",t.schaefferFClefToGClef="",t.schaefferGClefToFClef="",t.schaefferPreviousClef="",t.segno="",t.segnoSerpent1="",t.segnoSerpent2="",t.semipitchedPercussionClef1="",t.semipitchedPercussionClef2="",t.smnFlat="",t.smnFlatWhite="",t.smnHistoryDoubleFlat="",t.smnHistoryDoubleSharp="",t.smnHistoryFlat="",t.smnHistorySharp="",t.smnNatural="",t.smnSharp="",t.smnSharpDown="",t.smnSharpWhite="",t.smnSharpWhiteDown="",t.splitBarDivider="",t.staff1Line="",t.staff1LineNarrow="",t.staff1LineWide="",t.staff2Lines="",t.staff2LinesNarrow="",t.staff2LinesWide="",t.staff3Lines="",t.staff3LinesNarrow="",t.staff3LinesWide="",t.staff4Lines="",t.staff4LinesNarrow="",t.staff4LinesWide="",t.staff5Lines="",t.staff5LinesNarrow="",t.staff5LinesWide="",t.staff6Lines="",t.staff6LinesNarrow="",t.staff6LinesWide="",t.staffDivideArrowDown="",t.staffDivideArrowUp="",t.staffDivideArrowUpDown="",t.staffPosLower1="",t.staffPosLower2="",t.staffPosLower3="",t.staffPosLower4="",t.staffPosLower5="",t.staffPosLower6="",t.staffPosLower7="",t.staffPosLower8="",t.staffPosRaise1="",t.staffPosRaise2="",t.staffPosRaise3="",t.staffPosRaise4="",t.staffPosRaise5="",t.staffPosRaise6="",t.staffPosRaise7="",t.staffPosRaise8="",t.stem="",t.stemBowOnBridge="",t.stemBowOnTailpiece="",t.stemBuzzRoll="",t.stemDamp="",t.stemHarpStringNoise="",t.stemMultiphonicsBlack="",t.stemMultiphonicsBlackWhite="",t.stemMultiphonicsWhite="",t.stemPendereckiTremolo="",t.stemRimShot="",t.stemSprechgesang="",t.stemSulPonticello="",t.stemSussurando="",t.stemSwished="",t.stemVibratoPulse="",t.stockhausenTremolo="",t.stringsBowBehindBridge="",t.stringsBowBehindBridgeFourStrings="",t.stringsBowBehindBridgeOneString="",t.stringsBowBehindBridgeThreeStrings="",t.stringsBowBehindBridgeTwoStrings="",t.stringsBowOnBridge="",t.stringsBowOnTailpiece="",t.stringsChangeBowDirection="",t.stringsDownBow="",t.stringsDownBowAwayFromBody="",t.stringsDownBowBeyondBridge="",t.stringsDownBowTowardsBody="",t.stringsDownBowTurned="",t.stringsFouette="",t.stringsHalfHarmonic="",t.stringsHarmonic="",t.stringsJeteAbove="",t.stringsJeteBelow="",t.stringsMuteOff="",t.stringsMuteOn="",t.stringsOverpressureDownBow="",t.stringsOverpressureNoDirection="",t.stringsOverpressurePossibileDownBow="",t.stringsOverpressurePossibileUpBow="",t.stringsOverpressureUpBow="",t.stringsScrapeCircularClockwise="",t.stringsScrapeCircularCounterclockwise="",t.stringsScrapeParallelInward="",t.stringsScrapeParallelOutward="",t.stringsThumbPosition="",t.stringsThumbPositionTurned="",t.stringsTripleChopInward="",t.stringsTripleChopOutward="",t.stringsUpBow="",t.stringsUpBowAwayFromBody="",t.stringsUpBowBeyondBridge="",t.stringsUpBowTowardsBody="",t.stringsUpBowTurned="",t.stringsVibratoPulse="",t.swissRudimentsNoteheadBlackDouble="",t.swissRudimentsNoteheadBlackFlam="",t.swissRudimentsNoteheadHalfDouble="",t.swissRudimentsNoteheadHalfFlam="",t.systemDivider="",t.systemDividerExtraLong="",t.systemDividerLong="",t.textAugmentationDot="",t.textBlackNoteFrac16thLongStem="",t.textBlackNoteFrac16thShortStem="",t.textBlackNoteFrac32ndLongStem="",t.textBlackNoteFrac8thLongStem="",t.textBlackNoteFrac8thShortStem="",t.textBlackNoteLongStem="",t.textBlackNoteShortStem="",t.textCont16thBeamLongStem="",t.textCont16thBeamShortStem="",t.textCont32ndBeamLongStem="",t.textCont8thBeamLongStem="",t.textCont8thBeamShortStem="",t.textHeadlessBlackNoteFrac16thLongStem="",t.textHeadlessBlackNoteFrac16thShortStem="",t.textHeadlessBlackNoteFrac32ndLongStem="",t.textHeadlessBlackNoteFrac8thLongStem="",t.textHeadlessBlackNoteFrac8thShortStem="",t.textHeadlessBlackNoteLongStem="",t.textHeadlessBlackNoteShortStem="",t.textTie="",t.textTuplet3LongStem="",t.textTuplet3ShortStem="",t.textTupletBracketEndLongStem="",t.textTupletBracketEndShortStem="",t.textTupletBracketStartLongStem="",t.textTupletBracketStartShortStem="",t.timeSig0="",t.timeSig0Reversed="",t.timeSig0Turned="",t.timeSig1="",t.timeSig1Reversed="",t.timeSig1Turned="",t.timeSig2="",t.timeSig2Reversed="",t.timeSig2Turned="",t.timeSig3="",t.timeSig3Reversed="",t.timeSig3Turned="",t.timeSig4="",t.timeSig4Reversed="",t.timeSig4Turned="",t.timeSig5="",t.timeSig5Reversed="",t.timeSig5Turned="",t.timeSig6="",t.timeSig6Reversed="",t.timeSig6Turned="",t.timeSig7="",t.timeSig7Reversed="",t.timeSig7Turned="",t.timeSig8="",t.timeSig8Reversed="",t.timeSig8Turned="",t.timeSig9="",t.timeSig9Reversed="",t.timeSig9Turned="",t.timeSigBracketLeft="",t.timeSigBracketLeftSmall="",t.timeSigBracketRight="",t.timeSigBracketRightSmall="",t.timeSigCombDenominator="",t.timeSigCombNumerator="",t.timeSigComma="",t.timeSigCommon="",t.timeSigCommonReversed="",t.timeSigCommonTurned="",t.timeSigCut2="",t.timeSigCut3="",t.timeSigCutCommon="",t.timeSigCutCommonReversed="",t.timeSigCutCommonTurned="",t.timeSigEquals="",t.timeSigFractionHalf="",t.timeSigFractionOneThird="",t.timeSigFractionQuarter="",t.timeSigFractionThreeQuarters="",t.timeSigFractionTwoThirds="",t.timeSigFractionalSlash="",t.timeSigMinus="",t.timeSigMultiply="",t.timeSigOpenPenderecki="",t.timeSigParensLeft="",t.timeSigParensLeftSmall="",t.timeSigParensRight="",t.timeSigParensRightSmall="",t.timeSigPlus="",t.timeSigPlusSmall="",t.timeSigSlash="",t.timeSigX="",t.tremolo1="",t.tremolo2="",t.tremolo3="",t.tremolo4="",t.tremolo5="",t.tremoloDivisiDots2="",t.tremoloDivisiDots3="",t.tremoloDivisiDots4="",t.tremoloDivisiDots6="",t.tremoloFingered1="",t.tremoloFingered2="",t.tremoloFingered3="",t.tremoloFingered4="",t.tremoloFingered5="",t.tripleTongueAbove="",t.tripleTongueBelow="",t.tuplet0="",t.tuplet1="",t.tuplet2="",t.tuplet3="",t.tuplet4="",t.tuplet5="",t.tuplet6="",t.tuplet7="",t.tuplet8="",t.tuplet9="",t.tupletColon="",t.unmeasuredTremolo="",t.unmeasuredTremoloSimple="",t.unpitchedPercussionClef1="",t.unpitchedPercussionClef2="",t.ventiduesima="",t.ventiduesimaAlta="",t.ventiduesimaBassa="",t.ventiduesimaBassaMb="",t.vocalFingerClickStockhausen="",t.vocalHalbGesungen="",t.vocalMouthClosed="",t.vocalMouthOpen="",t.vocalMouthPursed="",t.vocalMouthSlightlyOpen="",t.vocalMouthWideOpen="",t.vocalNasalVoice="",t.vocalSprechgesang="",t.vocalTongueClickStockhausen="",t.vocalTongueFingerClickStockhausen="",t.vocalsSussurando="",t.wiggleArpeggiatoDown="",t.wiggleArpeggiatoDownArrow="",t.wiggleArpeggiatoDownSwash="",t.wiggleArpeggiatoUp="",t.wiggleArpeggiatoUpArrow="",t.wiggleArpeggiatoUpSwash="",t.wiggleCircular="",t.wiggleCircularConstant="",t.wiggleCircularConstantFlipped="",t.wiggleCircularConstantFlippedLarge="",t.wiggleCircularConstantLarge="",t.wiggleCircularEnd="",t.wiggleCircularLarge="",t.wiggleCircularLarger="",t.wiggleCircularLargerStill="",t.wiggleCircularLargest="",t.wiggleCircularSmall="",t.wiggleCircularStart="",t.wiggleGlissando="",t.wiggleGlissandoGroup1="",t.wiggleGlissandoGroup2="",t.wiggleGlissandoGroup3="",t.wiggleRandom1="",t.wiggleRandom2="",t.wiggleRandom3="",t.wiggleRandom4="",t.wiggleSawtooth="",t.wiggleSawtoothNarrow="",t.wiggleSawtoothWide="",t.wiggleSquareWave="",t.wiggleSquareWaveNarrow="",t.wiggleSquareWaveWide="",t.wiggleTrill="",t.wiggleTrillFast="",t.wiggleTrillFaster="",t.wiggleTrillFasterStill="",t.wiggleTrillFastest="",t.wiggleTrillSlow="",t.wiggleTrillSlower="",t.wiggleTrillSlowerStill="",t.wiggleTrillSlowest="",t.wiggleVIbratoLargestSlower="",t.wiggleVIbratoMediumSlower="",t.wiggleVibrato="",t.wiggleVibratoLargeFast="",t.wiggleVibratoLargeFaster="",t.wiggleVibratoLargeFasterStill="",t.wiggleVibratoLargeFastest="",t.wiggleVibratoLargeSlow="",t.wiggleVibratoLargeSlower="",t.wiggleVibratoLargeSlowest="",t.wiggleVibratoLargestFast="",t.wiggleVibratoLargestFaster="",t.wiggleVibratoLargestFasterStill="",t.wiggleVibratoLargestFastest="",t.wiggleVibratoLargestSlow="",t.wiggleVibratoLargestSlowest="",t.wiggleVibratoMediumFast="",t.wiggleVibratoMediumFaster="",t.wiggleVibratoMediumFasterStill="",t.wiggleVibratoMediumFastest="",t.wiggleVibratoMediumSlow="",t.wiggleVibratoMediumSlowest="",t.wiggleVibratoSmallFast="",t.wiggleVibratoSmallFaster="",t.wiggleVibratoSmallFasterStill="",t.wiggleVibratoSmallFastest="",t.wiggleVibratoSmallSlow="",t.wiggleVibratoSmallSlower="",t.wiggleVibratoSmallSlowest="",t.wiggleVibratoSmallestFast="",t.wiggleVibratoSmallestFaster="",t.wiggleVibratoSmallestFasterStill="",t.wiggleVibratoSmallestFastest="",t.wiggleVibratoSmallestSlow="",t.wiggleVibratoSmallestSlower="",t.wiggleVibratoSmallestSlowest="",t.wiggleVibratoStart="",t.wiggleVibratoWide="",t.wiggleWavy="",t.wiggleWavyNarrow="",t.wiggleWavyWide="",t.windClosedHole="",t.windFlatEmbouchure="",t.windHalfClosedHole1="",t.windHalfClosedHole2="",t.windHalfClosedHole3="",t.windLessRelaxedEmbouchure="",t.windLessTightEmbouchure="",t.windMouthpiecePop="",t.windMultiphonicsBlackStem="",t.windMultiphonicsBlackWhiteStem="",t.windMultiphonicsWhiteStem="",t.windOpenHole="",t.windReedPositionIn="",t.windReedPositionNormal="",t.windReedPositionOut="",t.windRelaxedEmbouchure="",t.windRimOnly="",t.windSharpEmbouchure="",t.windStrongAirPressure="",t.windThreeQuartersClosedHole="",t.windTightEmbouchure="",t.windTrillKey="",t.windVeryTightEmbouchure="",t.windWeakAirPressure=""})(C||(C={}));const dn=16384,$g={"1/2":dn*2,1:dn/1,2:dn/2,4:dn/4,8:dn/8,16:dn/16,32:dn/32,64:dn/64,128:dn/128,256:dn/256},Kx={w:"1",h:"2",q:"4",b:"256"},Ic={C:{num:0},Am:{num:0},F:{accidental:"b",num:1},Dm:{accidental:"b",num:1},Bb:{accidental:"b",num:2},Gm:{accidental:"b",num:2},Eb:{accidental:"b",num:3},Cm:{accidental:"b",num:3},Ab:{accidental:"b",num:4},Fm:{accidental:"b",num:4},Db:{accidental:"b",num:5},Bbm:{accidental:"b",num:5},Gb:{accidental:"b",num:6},Ebm:{accidental:"b",num:6},Cb:{accidental:"b",num:7},Abm:{accidental:"b",num:7},G:{accidental:"#",num:1},Em:{accidental:"#",num:1},D:{accidental:"#",num:2},Bm:{accidental:"#",num:2},A:{accidental:"#",num:3},"F#m":{accidental:"#",num:3},E:{accidental:"#",num:4},"C#m":{accidental:"#",num:4},B:{accidental:"#",num:5},"G#m":{accidental:"#",num:5},"F#":{accidental:"#",num:6},"D#m":{accidental:"#",num:6},"C#":{accidental:"#",num:7},"A#m":{accidental:"#",num:7}},eE={treble:{lineShift:0},bass:{lineShift:6},tenor:{lineShift:4},alto:{lineShift:3},soprano:{lineShift:1},percussion:{lineShift:0},"mezzo-soprano":{lineShift:2},"baritone-c":{lineShift:5},"baritone-f":{lineShift:5},subbass:{lineShift:7},french:{lineShift:-1}},Qx={C:{index:0,intVal:0},CN:{index:0,intVal:0},"C#":{index:0,intVal:1},"C##":{index:0,intVal:2},CB:{index:0,intVal:11},CBB:{index:0,intVal:10},D:{index:1,intVal:2},DN:{index:1,intVal:2},"D#":{index:1,intVal:3},"D##":{index:1,intVal:4},DB:{index:1,intVal:1},DBB:{index:1,intVal:0},E:{index:2,intVal:4},EN:{index:2,intVal:4},"E#":{index:2,intVal:5},"E##":{index:2,intVal:6},EB:{index:2,intVal:3},EBB:{index:2,intVal:2},F:{index:3,intVal:5},FN:{index:3,intVal:5},"F#":{index:3,intVal:6},"F##":{index:3,intVal:7},FB:{index:3,intVal:4},FBB:{index:3,intVal:3},G:{index:4,intVal:7},GN:{index:4,intVal:7},"G#":{index:4,intVal:8},"G##":{index:4,intVal:9},GB:{index:4,intVal:6},GBB:{index:4,intVal:5},A:{index:5,intVal:9},AN:{index:5,intVal:9},"A#":{index:5,intVal:10},"A##":{index:5,intVal:11},AB:{index:5,intVal:8},ABB:{index:5,intVal:7},B:{index:6,intVal:11},BN:{index:6,intVal:11},"B#":{index:6,intVal:12},"B##":{index:6,intVal:13},BB:{index:6,intVal:10},BBB:{index:6,intVal:9},R:{index:6},X:{index:6}},Gx={n:{name:"note"},r:{name:"rest"},h:{name:"harmonic"},m:{name:"muted"},s:{name:"slash"},g:{name:"ghost"},d:{name:"diamond"},x:{name:"x"},ci:{name:"circled"},cx:{name:"circle x"},sf:{name:"slashed"},sb:{name:"slashed backward"},sq:{name:"square"},tu:{name:"triangle up"},td:{name:"triangle down"}},_x={"#":C.accidentalSharp,"##":C.accidentalDoubleSharp,b:C.accidentalFlat,bb:C.accidentalDoubleFlat,n:C.accidentalNatural,"{":C.accidentalParensLeft,"}":C.accidentalParensRight,db:C.accidentalThreeQuarterTonesFlatZimmermann,d:C.accidentalQuarterToneFlatStein,"++":C.accidentalThreeQuarterTonesSharpStein,"+":C.accidentalQuarterToneSharpStein,"+-":C.accidentalKucukMucennebSharp,bs:C.accidentalBakiyeFlat,bss:C.accidentalBuyukMucennebFlat,o:C.accidentalSori,k:C.accidentalKoron,bbs:C.accidentalBuyukMucennebSharp,"++-":C.accidentalBuyukMucennebSharp,ashs:C.accidentalBuyukMucennebSharp,afhf:C.accidentalBuyukMucennebSharp},$x={1:{a:[1],b:[1]},2:{a:[1,2]},3:{a:[1,3,2],b:[1,2,1],secondOnBottom:[1,2,3]},4:{a:[1,3,4,2],b:[1,2,3,1],spacedOutTetrachord:[1,2,1,2]},5:{a:[1,3,5,4,2],b:[1,2,4,3,1],spacedOutPentachord:[1,2,3,2,1],verySpacedOutPentachord:[1,2,1,2,1]},6:{a:[1,3,5,6,4,2],b:[1,2,4,5,3,1],spacedOutHexachord:[1,3,2,1,3,2],verySpacedOutHexachord:[1,2,1,2,1,2]}},eB={"a.":{code:C.augmentationDot,betweenLines:!0},av:{aboveCode:C.articStaccatissimoAbove,belowCode:C.articStaccatissimoBelow,betweenLines:!0},"a>":{aboveCode:C.articAccentAbove,belowCode:C.articAccentBelow,betweenLines:!0},"a-":{aboveCode:C.articTenutoAbove,belowCode:C.articTenutoBelow,betweenLines:!0},"a^":{aboveCode:C.articMarcatoAbove,belowCode:C.articMarcatoBelow,betweenLines:!1},"a+":{code:C.pluckedLeftHandPizzicato,betweenLines:!1},ao:{aboveCode:C.pluckedSnapPizzicatoAbove,belowCode:C.pluckedSnapPizzicatoBelow,betweenLines:!1},ah:{code:C.stringsHarmonic,betweenLines:!1},"a@":{aboveCode:C.fermataAbove,belowCode:C.fermataBelow,betweenLines:!1},"a@a":{code:C.fermataAbove,betweenLines:!1},"a@u":{code:C.fermataBelow,betweenLines:!1},"a@s":{aboveCode:C.fermataShortAbove,belowCode:C.fermataShortBelow,betweenLines:!1},"a@as":{code:C.fermataShortAbove,betweenLines:!1},"a@us":{code:C.fermataShortBelow,betweenLines:!1},"a@l":{aboveCode:C.fermataLongAbove,belowCode:C.fermataLongBelow,betweenLines:!1},"a@al":{code:C.fermataLongAbove,betweenLines:!1},"a@ul":{code:C.fermataLongBelow,betweenLines:!1},"a@vl":{aboveCode:C.fermataVeryLongAbove,belowCode:C.fermataVeryLongBelow,betweenLines:!1},"a@avl":{code:C.fermataVeryLongAbove,betweenLines:!1},"a@uvl":{code:C.fermataVeryLongBelow,betweenLines:!1},"a|":{code:C.stringsUpBow,betweenLines:!1},am:{code:C.stringsDownBow,betweenLines:!1},"a,":{code:C.pictChokeCymbal,betweenLines:!1}},tB={mordent:C.ornamentShortTrill,mordentInverted:C.ornamentMordent,turn:C.ornamentTurn,turnInverted:C.ornamentTurnSlash,tr:C.ornamentTrill,upprall:C.ornamentPrecompSlideTrillDAnglebert,downprall:C.ornamentPrecompDoubleCadenceUpperPrefix,prallup:C.ornamentPrecompTrillSuffixDandrieu,pralldown:C.ornamentPrecompTrillLowerSuffix,upmordent:C.ornamentPrecompSlideTrillBach,downmordent:C.ornamentPrecompDoubleCadenceUpperPrefixTurn,lineprall:C.ornamentPrecompAppoggTrill,prallprall:C.ornamentTremblement,scoop:C.brassScoop,doit:C.brassDoitMedium,fall:C.brassFallLipShort,doitLong:C.brassLiftMedium,fallLong:C.brassFallRoughMedium,bend:C.brassBend,plungerClosed:C.brassMuteClosed,plungerOpen:C.brassMuteOpen,flip:C.brassFlip,jazzTurn:C.brassJazzTurn,smear:C.brassSmear};class k{static clefProperties(e){if(!e||!(e in eE))throw new P("BadArgument","Invalid clef: "+e);return eE[e]}static keyProperties(e,n="treble",i="N",r){let s={octaveShift:0,duration:"4"};typeof r=="object"&&(s=Object.assign(Object.assign({},s),r));const o=k.sanitizeDuration(s.duration),a=e.split("/");if(a.length<2)throw new P("BadArguments",`First argument must be note/octave or note/octave/glyph-code: ${e}`);const l=a[0].toUpperCase();i=i.toUpperCase();const d=Qx[l];if(!d)throw new P("BadArguments","Invalid key name: "+l);let f=parseInt(a[1],10);f-=s.octaveShift;let c=(f*7-4*7+d.index)/2;c+=k.clefProperties(n).lineShift;const h=typeof d.intVal<"u"?f*12+d.intVal:void 0;let g="",E="N";return a.length>2&&a[2]?E=a[2].toUpperCase():i!=="N"?E=i:E=l,g=this.codeNoteHead(E,o),{key:l,octave:f,line:c,intValue:h,code:g,displaced:!1}}static integerToNote(e){if(typeof e>"u"||e<0||e>11)throw new P("BadArguments",`integerToNote() requires an integer in the range [0, 11]: ${e}`);const i={0:"C",1:"C#",2:"D",3:"D#",4:"E",5:"F",6:"F#",7:"G",8:"G#",9:"A",10:"A#",11:"B"}[e];if(!i)throw new P("BadArguments",`Unknown note value for integer: ${e}`);return i}static textWidth(e){return 7*e.toString().length}static articulationCodes(e){return eB[e]}static accidentalCodes(e){var n;return(n=_x[e])!==null&&n!==void 0?n:e}static ornamentCodes(e){var n;return(n=tB[e])!==null&&n!==void 0?n:e}static keySignature(e){const n=Ic[e];if(!n)throw new P("BadKeySignature",`Bad key signature spec: '${e}'`);if(!n.accidental)return[];const r={b:[2,.5,2.5,1,3,1.5,3.5],"#":[0,1.5,-.5,1,2.5,.5,2]}[n.accidental],s=[];for(let o=0;o<n.num;++o){const a=r[o];s.push({type:n.accidental,line:a})}return s}static getKeySignatures(){return Ic}static hasKeySignature(e){return e in Ic}static sanitizeDuration(e){const n=Kx[e];if(n!==void 0&&(e=n),$g[e]===void 0)throw new P("BadArguments",`The provided duration is not valid: ${e}`);return e}static durationToFraction(e){return new ue().parse(k.sanitizeDuration(e))}static durationToNumber(e){return k.durationToFraction(e).value()}static durationToTicks(e){e=k.sanitizeDuration(e);const n=$g[e];if(n===void 0)throw new P("InvalidDuration");return n}static codeNoteHead(e,n){switch(e){case"D0":return C.noteheadDiamondWhole;case"D1":return C.noteheadDiamondHalf;case"D2":return C.noteheadDiamondBlack;case"D3":return C.noteheadDiamondBlack;case"T0":return C.noteheadTriangleUpWhole;case"T1":return C.noteheadTriangleUpHalf;case"T2":return C.noteheadTriangleUpBlack;case"T3":return C.noteheadTriangleUpBlack;case"X0":return C.noteheadXWhole;case"X1":return C.noteheadXHalf;case"X2":return C.noteheadXBlack;case"X3":return C.noteheadCircleX;case"S1":return C.noteheadSquareWhite;case"S2":return C.noteheadSquareBlack;case"R1":return C.noteheadSquareWhite;case"R2":return C.noteheadSquareWhite;case"DO":return C.noteheadTriangleUpBlack;case"RE":return C.noteheadMoonBlack;case"MI":return C.noteheadDiamondBlack;case"FA":return C.noteheadTriangleLeftBlack;case"FAUP":return C.noteheadTriangleRightBlack;case"SO":return C.noteheadBlack;case"LA":return C.noteheadSquareBlack;case"TI":return C.noteheadTriangleRoundDownBlack;case"DI":case"H":switch(n){case"1/2":return C.noteheadDiamondDoubleWhole;case"1":return C.noteheadDiamondWhole;case"2":return C.noteheadDiamondHalf;default:return C.noteheadDiamondBlack}case"X":case"M":switch(n){case"1/2":return C.noteheadXDoubleWhole;case"1":return C.noteheadXWhole;case"2":return C.noteheadXHalf;default:return C.noteheadXBlack}case"CX":switch(n){case"1/2":return C.noteheadCircleXDoubleWhole;case"1":return C.noteheadCircleXWhole;case"2":return C.noteheadCircleXHalf;default:return C.noteheadCircleX}case"CI":switch(n){case"1/2":return C.noteheadCircledDoubleWhole;case"1":return C.noteheadCircledWhole;case"2":return C.noteheadCircledHalf;default:return C.noteheadCircledBlack}case"SQ":switch(n){case"1/2":return C.noteheadDoubleWholeSquare;case"1":return C.noteheadSquareWhite;case"2":return C.noteheadSquareWhite;default:return C.noteheadSquareBlack}case"TU":switch(n){case"1/2":return C.noteheadTriangleUpDoubleWhole;case"1":return C.noteheadTriangleUpWhole;case"2":return C.noteheadTriangleUpHalf;default:return C.noteheadTriangleUpBlack}case"TD":switch(n){case"1/2":return C.noteheadTriangleDownDoubleWhole;case"1":return C.noteheadTriangleDownWhole;case"2":return C.noteheadTriangleDownHalf;default:return C.noteheadTriangleDownBlack}case"SF":switch(n){case"1/2":return C.noteheadSlashedDoubleWhole1;case"1":return C.noteheadSlashedWhole1;case"2":return C.noteheadSlashedHalf1;default:return C.noteheadSlashedBlack1}case"SB":switch(n){case"1/2":return C.noteheadSlashedDoubleWhole2;case"1":return C.noteheadSlashedWhole2;case"2":return C.noteheadSlashedHalf2;default:return C.noteheadSlashedBlack2}case"R":switch(n){case"1/2":return C.restDoubleWhole;case"1":return C.restWhole;case"2":return C.restHalf;case"4":return C.restQuarter;case"8":return C.rest8th;case"16":return C.rest16th;case"32":return C.rest32nd;case"64":return C.rest64th;case"128":return C.rest128th}break;case"S":switch(n){case"1/2":return C.noteheadSlashWhiteDoubleWhole;case"1":return C.noteheadSlashWhiteWhole;case"2":return C.noteheadSlashWhiteHalf;default:return C.noteheadSlashVerticalEnds}default:switch(n){case"1/2":return C.noteheadDoubleWhole;case"1":return C.noteheadWhole;case"2":return C.noteheadHalf;default:return C.noteheadBlack}}return C.null}}k.UNISON=!0;k.SOFTMAX_FACTOR=10;k.STEM_WIDTH=1.5;k.STEM_HEIGHT=35;k.STAVE_LINE_THICKNESS=1;k.RENDER_PRECISION_PLACES=3;k.RESOLUTION=dn;k.durationCodes={"1/2":{stem:!1},1:{stem:!1},2:{stem:!0},4:{stem:!0},8:{stem:!0,beamCount:1,stemBeamExtension:0,codeFlagUp:C.flag8thUp},16:{beamCount:2,stemBeamExtension:0,stem:!0,codeFlagUp:C.flag16thUp},32:{beamCount:3,stemBeamExtension:7.5,stem:!0,codeFlagUp:C.flag32ndUp},64:{beamCount:4,stemBeamExtension:15,stem:!0,codeFlagUp:C.flag64thUp},128:{beamCount:5,stemBeamExtension:22.5,stem:!0,codeFlagUp:C.flag128thUp}};k.NOTATION_FONT_SCALE=39;k.TABLATURE_FONT_SCALE=39;k.SLASH_NOTEHEAD_WIDTH=15;k.STAVE_LINE_DISTANCE=10;k.TEXT_HEIGHT_OFFSET_HACK=1;k.accidentalColumnsTable=$x;k.unicode={sharp:"♯",flat:"♭",natural:"♮",triangle:"△","o-with-slash":"ø",degrees:"°",circle:"○"};k.validTypes=Gx;k.TIME4_4={numBeats:4,beatValue:4,resolution:dn};function Kn(t,e,n=!0){if(typeof t!="object"||t===null)return!1;let i=t.constructor;if(n){for(;t!==null;){if(i=t.constructor,"CATEGORY"in i&&i.CATEGORY===e)return!0;t=Object.getPrototypeOf(t)}return!1}else return"CATEGORY"in i&&i.CATEGORY===e}const nB=t=>Kn(t,"Accidental"),iB=t=>Kn(t,"Annotation"),dS=t=>Kn(t,"Barline"),rB=t=>Kn(t,"Dot"),hS=t=>Kn(t,"GraceNote"),sB=t=>Kn(t,"GraceNoteGroup"),fS=t=>Kn(t,"Note"),oB=t=>Kn(t,"RenderContext"),ai=t=>Kn(t,"StaveNote"),Nl=t=>Kn(t,"StemmableNote"),wn=t=>Kn(t,"TabNote");function La(...t){Or.DEBUG&&Ge("VexFlow.Accidental",t)}class Or extends q{static get CATEGORY(){return"Accidental"}static format(e,n){if(!e||e.length===0)return;const i=W.get("Accidental.noteheadAccidentalPadding"),r=n.leftShift+i,s=W.get("Accidental.accidentalSpacing"),o=W.get("Accidental.leftPadding"),a=[];let l,d=0;for(let m=0;m<e.length;++m){const b=e[m],A=b.getNote(),S=A.getStave(),w=b.checkIndex(),D=A.getKeyProps()[w];if(A!==l){for(let x=0;x<A.keys.length;++x)d=Math.max(A.getLeftDisplacedHeadPx()-A.getXShift(),d);l=A}if(S){const x=S.getSpacingBetweenLines(),F=S.getYForLine(D.line),y=Math.round(F/x*2)/2;a.push({y:F,line:y,extraXSpaceNeeded:d,accidental:b,spacingBetweenStaveLines:x})}else a.push({line:D.line,extraXSpaceNeeded:d,accidental:b})}a.sort((m,b)=>b.line-m.line);const f=[];let u=0;for(let m=0;m<a.length;m++){const b=a[m],A=b.accidental.type,S=f[f.length-1];let w;!S||(S==null?void 0:S.line)!==b.line?(w={line:b.line,flatLine:!0,dblSharpLine:!0,numAcc:0,width:0,column:0},f.push(w)):w=S,A!=="b"&&A!=="bb"&&(w.flatLine=!1),A!=="##"&&(w.dblSharpLine=!1),w.numAcc++,w.width+=b.accidental.getWidth()+s,u=Math.max(b.extraXSpaceNeeded,u)}let c=0;for(let m=0;m<f.length;m++){let b=!1;const A=m;let S=m;for(;S+1<f.length&&!b;)this.checkCollision(f[S],f[S+1])?S++:b=!0;const w=re=>f[A+re],D=re=>re.map(w),x=(re,be)=>{const[de,xt]=D([re,be]).map(mt=>mt.line);return de-xt},F=(...re)=>re.map(D).every(([be,de])=>!this.checkCollision(be,de)),y=S-A+1;let X=this.checkCollision(f[A],f[S])?"a":"b";switch(y){case 3:X==="a"&&x(1,2)===.5&&x(0,1)!==.5&&(X="secondOnBottom");break;case 4:F([0,2],[1,3])&&(X="spacedOutTetrachord");break;case 5:X==="b"&&F([1,3])&&(X="spacedOutPentachord",F([0,2],[2,4])&&(X="verySpacedOutPentachord"));break;case 6:F([0,3],[1,4],[2,5])&&(X="spacedOutHexachord"),F([0,2],[2,4],[1,3],[3,5])&&(X="verySpacedOutHexachord");break}let G,Ee;if(y>=7){let re=2,be=!0;for(;be===!0;){be=!1;for(let de=0;de+re<f.length;de++)if(this.checkCollision(f[de],f[de+re])){be=!0,re++;break}}for(G=m;G<=S;G++)Ee=(G-m)%re+1,f[G].column=Ee,c=c>Ee?c:Ee}else for(G=m;G<=S;G++)Ee=k.accidentalColumnsTable[y][X][G-m],f[G].column=Ee,c=c>Ee?c:Ee;m=S}const h=[],g=[];for(let m=0;m<=c;m++)h[m]=0,g[m]=0;h[0]=r+u,g[0]=r,f.forEach(m=>{m.width>h[m.column]&&(h[m.column]=m.width)});for(let m=1;m<h.length;m++)g[m]=h[m]+g[m-1];const E=g[g.length-1];let p=0;f.forEach(m=>{let b=0;const A=p+m.numAcc;for(p;p<A;p++){const S=g[m.column-1]+b+u;a[p].accidental.setXShift(S),b+=a[p].accidental.getWidth()+s,La("Line, accCount, shift: ",m.line,p,S)}}),n.leftShift=E+o}static checkCollision(e,n){let i=n.line-e.line,r=3;i>0?(r=n.flatLine||n.dblSharpLine?2.5:3,e.dblSharpLine&&(i-=.5)):(r=e.flatLine||e.dblSharpLine?2.5:3,n.dblSharpLine&&(i-=.5));const s=Math.abs(i)<r;return La("Line1, Line2, Collision: ",e.line,n.line,s),s}static applyAccidentals(e,n){const i=[],r={};e.forEach(l=>{const d=new ue(0,1);l.getTickables().forEach(u=>{if(u.shouldIgnoreTicks())return;const c=r[d.value()];c?c.push(u):(i.push(d.value()),r[d.value()]=[u]),d.add(u.getTicks())})});const s=new De;n||(n="C");const o=s.createScaleMap(n),a={};i.forEach(l=>{const d=r[l],f=[],u=c=>{if(!ai(c)||c.isRest()||c.shouldIgnoreTicks())return;const h=c;h.keys.forEach((g,E)=>{const p=s.getNoteParts(g.split("/")[0]),m=g.split("/")[1],b=p.accidental||"n",A=p.root+b;a[p.root+m]||(a[p.root+m]=o[p.root]);const S=a[p.root+m]===A,w=f.indexOf(g)>-1;if(h.getModifiers().forEach((D,x)=>{nB(D)&&D.type==b&&D.getIndex()==E&&h.getModifiers().splice(x,1)}),!S||S&&w){a[p.root+m]=A;const D=new Or(b);h.addModifier(D,E),f.push(g)}}),h.getModifiers().forEach(g=>{sB(g)&&g.getGraceNotes().forEach(u)})};d.forEach(u)})}constructor(e){super(),La("New accidental: ",e),this.type=e,this.position=q.Position.LEFT,this.cautionary=!1,this.reset()}reset(){this.text="",this.cautionary?(this.text+=k.accidentalCodes("{"),this.text+=k.accidentalCodes(this.type),this.text+=k.accidentalCodes("}"),this.fontInfo.size=W.get("Accidental.cautionary.fontSize")):(this.text+=k.accidentalCodes(this.type),this.fontInfo.size=W.get("Accidental.fontSize")),hS(this.note)&&(this.fontInfo.size=W.get("Accidental.grace.fontSize"))}setNote(e){return Xe(e,"ArgumentError",`Bad note value: ${e}`),this.note=e,this.reset(),this}setAsCautionary(){return this.cautionary=!0,this.reset(),this}draw(){const{type:e,position:n,index:i}=this,r=this.checkContext(),s=this.checkAttachedNote();this.setRendered();const o=s.getModifierStartXY(n,i);this.x=o.x-this.width,this.y=o.y,La("Rendering: ",e,o.x,o.y),this.renderText(r,0,0)}}Or.DEBUG=!1;function aB(...t){I.DEBUG&&Ge("VexFlow.Stem",t)}class I extends Q{static get CATEGORY(){return"Stem"}static get UP(){return 1}static get DOWN(){return-1}static get WIDTH(){return k.STEM_WIDTH}static get HEIGHT(){return k.STEM_HEIGHT}constructor(e){var n,i,r,s,o,a,l;super(),this.stemUpYOffset=0,this.stemDownYOffset=0,this.stemUpYBaseOffset=0,this.stemDownYBaseOffset=0,this.xBegin=(n=e==null?void 0:e.xBegin)!==null&&n!==void 0?n:0,this.xEnd=(i=e==null?void 0:e.xEnd)!==null&&i!==void 0?i:0,this.yTop=(r=e==null?void 0:e.yTop)!==null&&r!==void 0?r:0,this.yBottom=(s=e==null?void 0:e.yBottom)!==null&&s!==void 0?s:0,this.stemExtension=(o=e==null?void 0:e.stemExtension)!==null&&o!==void 0?o:0,this.stemDirection=(a=e==null?void 0:e.stemDirection)!==null&&a!==void 0?a:0,this.hide=(e==null?void 0:e.hide)||!1,this.isStemlet=(e==null?void 0:e.isStemlet)||!1,this.stemletHeight=(l=e==null?void 0:e.stemletHeight)!==null&&l!==void 0?l:0,this.renderHeightAdjustment=0,this.setOptions(e)}setOptions(e){var n,i,r,s;this.stemUpYOffset=(n=e==null?void 0:e.stemUpYOffset)!==null&&n!==void 0?n:0,this.stemDownYOffset=(i=e==null?void 0:e.stemDownYOffset)!==null&&i!==void 0?i:0,this.stemUpYBaseOffset=(r=e==null?void 0:e.stemUpYBaseOffset)!==null&&r!==void 0?r:0,this.stemDownYBaseOffset=(s=e==null?void 0:e.stemDownYBaseOffset)!==null&&s!==void 0?s:0}setNoteHeadXBounds(e,n){return this.xBegin=e,this.xEnd=n,this}setDirection(e){this.stemDirection=e}setExtension(e){this.stemExtension=e}getExtension(){return this.stemExtension}setYBounds(e,n){this.yTop=e,this.yBottom=n}getHeight(){const e=this.stemDirection===I.UP?this.stemUpYOffset:this.stemDownYOffset;return(this.yBottom-this.yTop+(I.HEIGHT-e+this.stemExtension))*this.stemDirection}getBoundingBox(){throw new P("NotImplemented","getBoundingBox() not implemented.")}getExtents(){const e=this.stemDirection===I.UP,n=[this.yTop,this.yBottom],i=I.HEIGHT+this.stemExtension,r=(e?Math.min:Math.max)(...n),s=(e?Math.max:Math.min)(...n);return{topY:r+i*-this.stemDirection,baseY:s}}setVisibility(e){return this.hide=!e,this}setStemlet(e,n){return this.isStemlet=e,this.stemletHeight=n,this}adjustHeightForFlag(){this.renderHeightAdjustment=W.get("Stem.heightAdjustmentForFlag",-3)}adjustHeightForBeam(){this.renderHeightAdjustment=-I.WIDTH/2}draw(){if(this.setRendered(),this.hide)return;const e=this.checkContext();let n,i;const r=this.stemDirection;let s=0;r===I.DOWN?(n=this.xBegin,i=this.yTop+this.stemDownYOffset,s=this.stemDownYBaseOffset):(n=this.xEnd,i=this.yBottom-this.stemUpYOffset,s=this.stemUpYBaseOffset);const o=this.getHeight();aB("Rendering stem - ","Top Y: ",this.yTop,"Bottom Y: ",this.yBottom);const a=this.isStemlet?o-this.stemletHeight*this.stemDirection:0;e.openGroup("stem",this.getAttribute("id")),e.beginPath(),e.setLineWidth(I.WIDTH),e.moveTo(n,i-a+s),e.lineTo(n,i-o-this.renderHeightAdjustment*r),e.stroke(),e.closeGroup()}}I.DEBUG=!1;function uB(...t){Yt.DEBUG&&Ge("VexFlow.Annotation",t)}var Ft;(function(t){t[t.LEFT=1]="LEFT",t[t.CENTER=2]="CENTER",t[t.RIGHT=3]="RIGHT",t[t.CENTER_STEM=4]="CENTER_STEM"})(Ft||(Ft={}));var Mt;(function(t){t[t.TOP=1]="TOP",t[t.CENTER=2]="CENTER",t[t.BOTTOM=3]="BOTTOM",t[t.CENTER_STEM=4]="CENTER_STEM"})(Mt||(Mt={}));class Yt extends q{static get CATEGORY(){return"Annotation"}static get minAnnotationPadding(){return W.get("NoteHead.minPadding")}static format(e,n){if(!e||e.length===0)return!1;let i=0,r=0,s=0,o=0;for(let d=0;d<e.length;++d){const f=e[d];let c=(2+ne.convertSizeToPixelValue(f.fontInfo.size))/k.STAVE_LINE_DISTANCE;const h=f.checkAttachedNote(),g=h.getGlyphWidth(),E=f.getWidth();f.horizontalJustification===Ft.RIGHT?(s=Math.max(g,s),i=Math.max(i,E)+Yt.minAnnotationPadding):f.horizontalJustification===Ft.LEFT?(o=Math.max(g,o),r=Math.max(r,E)):(i=Math.max(i,E/2)+Yt.minAnnotationPadding,r=Math.max(r,E/2),s=Math.max(g/2,s),o=Math.max(g/2,o));const p=h.getStave(),m=h.hasStem()?h.getStemDirection():I.UP;let b=0,A=5;if(wn(h))if(h.renderOptions.drawStem){const S=h.getStem();S&&(b=Math.abs(S.getHeight())/k.STAVE_LINE_DISTANCE)}else b=0;else if(Nl(h)){const S=h.getStem();S&&h.getNoteType()==="n"&&(b=Math.abs(S.getHeight())/k.STAVE_LINE_DISTANCE)}if(p&&(A=p.getNumLines()),f.verticalJustification===this.VerticalJustify.TOP){let S=h.getLineNumber(!0);wn(h)&&(S=A-(h.leastString()-.5)),m===I.UP&&(S+=b),S+n.topTextLine+.5<A?(f.setTextLine(A-S),c+=A-S,n.topTextLine=c):(f.setTextLine(n.topTextLine),n.topTextLine+=c)}else if(f.verticalJustification===this.VerticalJustify.BOTTOM){let S=A-h.getLineNumber();wn(h)&&(S=h.greatestString()-1),m===I.DOWN&&(S+=b);const w=S+n.textLine+1;w<A?(f.setTextLine(A-w),c+=A-w,n.textLine=c):(f.setTextLine(n.textLine),n.textLine+=c)}else f.setTextLine(n.textLine)}const a=Math.min(Math.max(r-o,0),Math.max(r-n.rightShift,0)),l=Math.min(Math.max(i-s,0),Math.max(i-n.leftShift,0));return n.leftShift+=l,n.rightShift+=a,!0}constructor(e){super(),this.text=e,this.horizontalJustification=Ft.CENTER,this.verticalJustification=Mt.TOP}setVerticalJustification(e){return this.verticalJustification=typeof e=="string"?Yt.VerticalJustifyString[e]:e,this}getJustification(){return this.horizontalJustification}setJustification(e){return this.horizontalJustification=typeof e=="string"?Yt.HorizontalJustifyString[e]:e,this}draw(){const e=this.checkContext(),n=this.checkAttachedNote(),i=n.hasStem()?n.getStemDirection():I.UP,r=n.getModifierStartXY(Fe.ABOVE,this.index);this.setRendered(),e.openGroup("annotation",this.getAttribute("id"));const s=this.getWidth(),o=ne.convertSizeToPixelValue(this.fontInfo.size);let a,l;this.horizontalJustification===Ft.LEFT?a=r.x:this.horizontalJustification===Ft.RIGHT?a=r.x-s:this.horizontalJustification===Ft.CENTER?a=r.x-s/2:a=n.getStemX()-s/2;let d={},f=0;const u=n.hasStem(),c=n.checkStave();if(u&&(d=n.checkStem().getExtents(),f=c.getSpacingBetweenLines()),this.verticalJustification===Mt.BOTTOM)l=n.getYs().reduce((g,E)=>g>E?g:E),l+=(this.textLine+1)*k.STAVE_LINE_DISTANCE+o,u&&i===I.DOWN&&(l=Math.max(l,d.topY+o+f*this.textLine));else if(this.verticalJustification===Mt.CENTER){const h=n.getYForTopText(this.textLine)-1,g=c.getYForBottomText(this.textLine);l=h+(g-h)/2+o/2}else if(this.verticalJustification===Mt.TOP)l=Math.min(...n.getYs())-(this.textLine+1)*k.STAVE_LINE_DISTANCE,u&&i===I.UP&&(f=d.topY<c.getTopLineTopY()?k.STAVE_LINE_DISTANCE:f,l=Math.min(l,d.topY-f*(this.textLine+1)));else{const h=n.getStemExtents();l=h.topY+(h.baseY-h.topY)/2+o/2}uB("Rendering annotation: ",this.text,a,l),this.x=a,this.y=l,this.renderText(e,0,0),e.closeGroup()}}Yt.DEBUG=!1;Yt.HorizontalJustify=Ft;Yt.HorizontalJustifyString={left:Ft.LEFT,right:Ft.RIGHT,center:Ft.CENTER,centerStem:Ft.CENTER_STEM};Yt.VerticalJustify=Mt;Yt.VerticalJustifyString={above:Mt.TOP,top:Mt.TOP,below:Mt.BOTTOM,bottom:Mt.BOTTOM,center:Mt.CENTER,centerStem:Mt.CENTER_STEM};function lB(...t){ui.DEBUG&&Ge("VexFlow.Articulation",t)}const{ABOVE:ei,BELOW:co}=q.Position;function mS(t,e){return t(e/.5)*.5}function Df(t,e){return e===ei?t<=5:t>=1}function gS(t,e){return Df(t,e)?e===ei?Math.ceil:Math.floor:Math.round}function cB(t,e,n,i){const r=mS(gS(e,n),e),s=t&&Df(r,n),o=r%1===0;return s&&o?r+.5*-i:r}const xf=t=>ai(t)||hS(t);function ES(t,e){const n=t.getStemDirection(),{topY:i,baseY:r}=t.getStemExtents();if(xf(t))return t.hasStem()?n===I.UP?i:r:Math.min(...t.getYs());if(wn(t))return t.hasStem()&&n===I.UP?i:t.checkStave().getYForTopText(e);throw new P("UnknownCategory","Only can get the top and bottom ys of stavenotes and tabnotes")}function bS(t,e){const n=t.getStemDirection(),{topY:i,baseY:r}=t.getStemExtents();if(xf(t))return t.hasStem()?n===I.UP?r:i:Math.max(...t.getYs());if(wn(t))return t.hasStem()?n===I.UP?t.checkStave().getYForBottomText(e):i:t.checkStave().getYForBottomText(e);throw new P("UnknownCategory","Only can get the top and bottom ys of stavenotes and tabnotes")}function pS(t,e){const n=e===ei&&t.getStemDirection()===I.UP||e===co&&t.getStemDirection()===I.DOWN;return xf(t)?t.hasStem()&&n?.5:1:t.hasStem()&&n?1:0}class ui extends q{static get CATEGORY(){return"Articulation"}static format(e,n){if(!e||e.length===0)return!1;const i=.5;let r=0;const s=(l,d,f)=>mS(gS(d,f),l.height/10+i);e.forEach(l=>{const d=l.checkAttachedNote();r=Math.max(d.getGlyphWidth(),r);let f=5;const u=d.hasStem()?d.getStemDirection():I.UP;let c=0;if(Nl(d)){const g=d.getStem();g&&(c=Math.abs(g.getHeight())/k.STAVE_LINE_DISTANCE)}const h=d.getStave();if(h&&(f=h.getNumLines()),l.getPosition()===ei){let g=d.getLineNumber(!0);u===I.UP&&(g+=c);let E=s(l,n.topTextLine,ei);const p=g+n.topTextLine+.5;!l.articulation.betweenLines&&p<f&&(E+=f-p),l.setTextLine(n.topTextLine),n.topTextLine+=E,l.setOrigin(.5,1)}else if(l.getPosition()===co){let g=Math.max(f-d.getLineNumber(),0);u===I.DOWN&&(g+=c);let E=s(l,n.textLine,co);const p=g+n.textLine+.5;!l.articulation.betweenLines&&p<f&&(E+=f-p),l.setTextLine(n.textLine),n.textLine+=E,l.setOrigin(.5,0)}});const o=e.map(l=>l.getWidth()).reduce((l,d)=>Math.max(d,l)),a=Math.min(Math.max(o-r,0),Math.max(o-(n.leftShift+n.rightShift),0));return n.leftShift+=a/2,n.rightShift+=a/2,!0}static easyScoreHook({articulations:e},n,i){if(!e)return;const r={staccato:"a.",tenuto:"a-",accent:"a>"};e.split(",").map(s=>s.trim().split(".")).map(([s,o])=>{const a={type:r[s]};return o&&(a.position=q.PositionString[o]),i.getFactory().Articulation(a)}).map(s=>n.addModifier(s,0))}constructor(e){var n;super(),this.heightShift=0,this.type=e,this.position=ei,k.articulationCodes(this.type)||(((n=this.type.codePointAt(0))!==null&&n!==void 0?n:0)%2===0?this.position=ei:this.position=co),this.articulation={betweenLines:!1},this.reset()}reset(){this.articulation=k.articulationCodes(this.type),this.articulation||(this.articulation={code:this.type,betweenLines:!1});const e=(this.position===ei?this.articulation.aboveCode:this.articulation.belowCode)||this.articulation.code||C.null;this.text=e}setBetweenLines(e=!0){return this.articulation.betweenLines=e,this}draw(){const e=this.checkContext(),n=this.checkAttachedNote();this.setRendered();const i=this.checkIndex(),{position:r,textLine:s}=this,o=this.articulation.betweenLines,a=n.checkStave(),l=a.getSpacingBetweenLines(),d=wn(n),{x:f}=n.getModifierStartXY(r,i),u=!o||d,c=pS(n,r);let h={[ei]:()=>{const g=ES(n,s)-(s+c)*l;return u?Math.min(a.getYForTopText(ui.INITIAL_OFFSET),g):g},[co]:()=>{const g=bS(n,s)+(s+c)*l;return u?Math.max(a.getYForBottomText(ui.INITIAL_OFFSET),g):g}}[r]();if(!d){const g=r===ei?-1:1,E=n.getKeyProps()[i].line,m=(n.getYs()[i]-h)/l+Number(E),b=cB(o,m,r,g);Df(b,r)&&this.setOrigin(.5,.5),h+=Math.abs(b-m)*l*g}lB(`Rendering articulation at (x: ${f}, y: ${h})`),this.x=f,this.y=h,this.renderText(e,0,0)}}ui.DEBUG=!1;ui.INITIAL_OFFSET=-.5;class Bf{static get CATEGORY(){return"RenderContext"}set font(e){this.setFont(e)}get font(){return this.getFont()}}function dB(t,e,n,i="#F55"){t.save(),t.setFillStyle(i),t.beginPath(),t.arc(e,n,3,0,Math.PI*2,!1),t.closePath(),t.fill(),t.restore()}class hB extends Q{static get CATEGORY(){return"Tickable"}constructor(){super(),this._preFormatted=!1,this._postFormatted=!1,this.ticks=new ue(0,1),this.intrinsicTicks=0,this.tickMultiplier=new ue(1,1),this.modifiers=[],this.tupletStack=[],this.alignCenter=!1,this.centerXShift=0,this.ignoreTicks=!1,this.formatterMetrics={freedom:{left:0,right:0},duration:"",iterations:0,space:{used:0,mean:0,deviation:0}}}reset(){return this}getTicks(){return this.ticks}shouldIgnoreTicks(){return this.ignoreTicks}setIgnoreTicks(e){return this.ignoreTicks=e,this}getWidth(){if(!this._preFormatted)throw new P("UnformattedNote","Can't call GetWidth on an unformatted note.");return this.width+(this.modifierContext?this.modifierContext.getWidth():0)}getX(){return this.checkTickContext("Can't getX() without a TickContext.").getX()+this.xShift}getFormatterMetrics(){return this.formatterMetrics}getCenterXShift(){return this.isCenterAligned()?this.centerXShift:0}setCenterXShift(e){return this.centerXShift=e,this}isCenterAligned(){return this.alignCenter}setCenterAlignment(e){return this.alignCenter=e,this}getVoice(){return Xe(this.voice,"NoVoice","Tickable has no voice.")}setVoice(e){this.voice=e}getTuplet(){return this.tuplet}getTupletStack(){return this.tupletStack}resetTuplet(e){let n,i;if(e){const r=this.tupletStack.indexOf(e);return r!==-1&&(this.tupletStack.splice(r,1),n=e.getNoteCount(),i=e.getNotesOccupied(),this.applyTickMultiplier(n,i)),this}for(;this.tupletStack.length;)e=this.tupletStack.pop(),n=e.getNoteCount(),i=e.getNotesOccupied(),this.applyTickMultiplier(n,i);return this}setTuplet(e){if(e){this.tupletStack.push(e);const n=e.getNoteCount(),i=e.getNotesOccupied();this.applyTickMultiplier(i,n)}return this.tuplet=e,this}addToModifierContext(e){this.modifierContext=e;for(let n=0;n<this.modifiers.length;++n)this.modifierContext.addMember(this.modifiers[n]);return this.modifierContext.addMember(this),this._preFormatted=!1,this}addModifier(e,n=0){return this.modifiers.push(e),this._preFormatted=!1,this}getModifiers(){return this.modifiers}setTickContext(e){this.tickContext=e,this._preFormatted=!1}checkTickContext(e="Tickable has no tick context."){return Xe(this.tickContext,"NoTickContext",e)}preFormat(){this._preFormatted||(this.width=0,this.modifierContext&&(this.modifierContext.preFormat(),this.width+=this.modifierContext.getWidth()))}set preFormatted(e){this._preFormatted=e}get preFormatted(){return this._preFormatted}postFormat(){return this._postFormatted?this:(this._postFormatted=!0,this)}set postFormatted(e){this._postFormatted=e}get postFormatted(){return this._postFormatted}getIntrinsicTicks(){return this.intrinsicTicks}setIntrinsicTicks(e){this.intrinsicTicks=e,this.ticks=this.tickMultiplier.clone().multiply(this.intrinsicTicks)}getTickMultiplier(){return this.tickMultiplier}applyTickMultiplier(e,n){this.tickMultiplier.multiply(e,n),this.ticks=this.tickMultiplier.clone().multiply(this.intrinsicTicks)}setDuration(e){const n=e.numerator*(k.RESOLUTION/e.denominator);this.ticks=this.tickMultiplier.clone().multiply(n),this.intrinsicTicks=this.ticks.value()}getAbsoluteX(){return this.checkTickContext("Can't getAbsoluteX() without a TickContext.").getX()}setModifierContext(e){return this.modifierContext=e,this}getModifierContext(){return this.modifierContext}checkModifierContext(){return Xe(this.modifierContext,"NoModifierContext","No modifier context attached to this tickable.")}}class st extends hB{static get CATEGORY(){return"Note"}static getGlyphProps(e,n="n"){e=k.sanitizeDuration(e);let i=k.durationCodes[e];i===void 0&&(i=k.durationCodes[4]);const r=k.codeNoteHead(n.toUpperCase(),e);return r!==C.null&&(i=Object.assign(Object.assign({},i),{codeHead:r})),i}static plotMetrics(e,n,i){var r;const s=n.getMetrics(),o=n.getAbsoluteX()-s.modLeftPx-s.leftDisplacedHeadPx,a=n.getAbsoluteX()-s.leftDisplacedHeadPx,l=n.getAbsoluteX(),d=n.getAbsoluteX()+s.notePx,f=n.getAbsoluteX()+s.notePx+s.rightDisplacedHeadPx,u=n.getAbsoluteX()+s.notePx+s.rightDisplacedHeadPx+s.modRightPx,c=u+((r=n.getFormatterMetrics().freedom.right)!==null&&r!==void 0?r:0),h=u-o;e.save(),e.setFont(W.get("fontFamily"),8),e.fillText(Math.round(h)+"px",o+n.getXShift(),i);const g=i+7;function E(m,b,A,S=g){e.beginPath(),e.setStrokeStyle(A),e.setFillStyle(A),e.setLineWidth(3),e.moveTo(m+n.getXShift(),S),e.lineTo(b+n.getXShift(),S),e.stroke()}E(o,a,"red"),E(a,l,"#999"),E(l,d,"green"),E(d,f,"#999"),E(f,u,"red"),E(u,c,"#DD0"),E(o-n.getXShift(),o,"#BBB"),dB(e,l+n.getXShift(),g,"blue");const p=n.getFormatterMetrics();if(p.iterations>0){const m=p.space.deviation,b=m>=0?"+":"";e.setFillStyle("red"),e.fillText(b+Math.round(m),l+n.getXShift(),i-10)}e.restore()}static parseDuration(e){if(!e)return;const i=/(\d*\/?\d+|[a-z])(d*)([nrhms]|$)/.exec(e);if(!i)return;const r=i[1],s=i[2].length,o=i[3]||"n";return{duration:r,dots:s,type:o}}static parseNoteStruct(e){const n=st.parseDuration(e.duration);if(!n)return;let i=e.type;if(i&&!k.validTypes[i])return;const r=[];i||(i=n.type||"n",e.keys!==void 0&&e.keys.forEach((l,d)=>{const f=l.split("/");r[d]=f&&f.length===3?f[2]:i}));let s=k.durationToTicks(n.duration);if(!s)return;const o=e.dots?e.dots:n.dots;if(typeof o!="number")return;let a=s;for(let l=0;l<o;l++){if(a<=1)return;a=a/2,s+=a}return{duration:n.duration,type:i,customTypes:r,dots:o,ticks:s}}constructor(e){if(super(),!e)throw new P("BadArguments","Note must have valid initialization data to identify duration and type.");const n=st.parseNoteStruct(e);if(!n)throw new P("BadArguments",`Invalid note initialization object: ${JSON.stringify(e)}`);this.keys=e.keys||[],this.keyProps=[],this.duration=n.duration,this.noteType=n.type,this.customTypes=n.customTypes,e.durationOverride?this.setDuration(e.durationOverride):this.setIntrinsicTicks(n.ticks),this.modifiers=[],this.glyphProps=st.getGlyphProps(this.duration,this.noteType),this.customGlyphs=this.customTypes.map(i=>st.getGlyphProps(this.duration,i)),this.playNote=void 0,this.ignoreTicks=!1,this.width=0,this.leftDisplacedHeadPx=0,this.rightDisplacedHeadPx=0,this.xShift=0,this.ys=[],e.alignCenter&&this.setCenterAlignment(e.alignCenter),this.renderOptions={annotationSpacing:5,strokePx:1,yShift:0}}getPlayNote(){return this.playNote}setPlayNote(e){return this.playNote=e,this}isRest(){return!1}addStroke(e,n){return n.setNote(this),n.setIndex(e),this.modifiers.push(n),this.preFormatted=!1,this}getStave(){return this.stave}checkStave(){return Xe(this.stave,"NoStave","No stave attached to instance.")}setStave(e){return this.stave=e,this.setYs([e.getYForLine(0)]),this.setContext(this.stave.getContext()),this}getLeftDisplacedHeadPx(){return this.leftDisplacedHeadPx}getRightDisplacedHeadPx(){return this.rightDisplacedHeadPx}setLeftDisplacedHeadPx(e){return this.leftDisplacedHeadPx=e,this}setRightDisplacedHeadPx(e){return this.rightDisplacedHeadPx=e,this}shouldIgnoreTicks(){return this.ignoreTicks}getLineNumber(e){return 0}getLineForRest(){return 0}getGlyphProps(){return this.glyphProps}getGlyphWidth(){return 0}setYs(e){return this.ys=e,this}getYs(){if(this.ys.length===0)throw new P("NoYValues","No Y-values calculated for this note.");return this.ys}getYForTopText(e){return this.checkStave().getYForTopText(e)}getVoice(){if(!this.voice)throw new P("NoVoice","Note has no voice.");return this.voice}setVoice(e){return this.voice=e,this.preFormatted=!1,this}getTickContext(){return this.checkTickContext()}setTickContext(e){return this.tickContext=e,this.preFormatted=!1,this}getDuration(){return this.duration}isDotted(){return this.getModifiersByType("Dot").length>0}hasStem(){return!1}getNoteType(){return this.noteType}getBeam(){return this.beam}checkBeam(){return Xe(this.beam,"NoBeam","No beam attached to instance")}hasBeam(){return this.beam!==void 0}setBeam(e){return this.beam=e,this}addModifier(e,n=0){const i="Note.addModifier(modifier: Modifier, index: number=0)";if(typeof n=="string"&&(n=parseInt(n),console.warn(i+" expected a number for `index`, but received a string.")),typeof e!="object"||typeof n!="number")throw new P("WrongParams","Incorrect call signature. Use "+i+" instead.");return e.setNote(this),e.setIndex(n),super.addModifier(e),this}getModifiersByType(e){return this.modifiers.filter(n=>n.getCategory()===e)}getModifierStartXY(e,n,i){if(!this.preFormatted)throw new P("UnformattedNote","Can't call GetModifierStartXY on an unformatted note");return{x:this.getAbsoluteX(),y:this.ys[0]}}getRightParenthesisPx(e){return this.getKeyProps()[e].displaced?this.getRightDisplacedHeadPx():0}getLeftParenthesisPx(e){return this.getKeyProps()[e].displaced?this.getLeftDisplacedHeadPx()-this.xShift:-this.xShift}getFirstDotPx(){let e=this.getRightDisplacedHeadPx();const n=this.checkModifierContext().getMembers("Parenthesis");return n.length!==0&&(e+=n[0].getWidth()+1),e}getMetrics(){if(!this.preFormatted)throw new P("UnformattedNote","Can't call getMetrics on an unformatted note.");const e=this.modifierContext?this.modifierContext.getState().leftShift:0,n=this.modifierContext?this.modifierContext.getState().rightShift:0,i=this.getWidth(),r=this.getGlyphWidth(),s=i-e-n-this.leftDisplacedHeadPx-this.rightDisplacedHeadPx;return{width:i,glyphWidth:r,notePx:s,modLeftPx:e,modRightPx:n,leftDisplacedHeadPx:this.leftDisplacedHeadPx,rightDisplacedHeadPx:this.rightDisplacedHeadPx,glyphPx:0}}getAbsoluteX(){let n=this.checkTickContext("Can't getAbsoluteX() without a TickContext.").getX();return this.stave&&(n+=this.stave.getNoteStartX()+W.get("Stave.padding",0)),this.isCenterAligned()&&(n+=this.getCenterXShift()),n}getStemDirection(){throw new P("NoStem","No stem attached to this note.")}getStemExtents(){throw new P("NoStem","No stem attached to this note.")}getTieRightX(){let e=this.getAbsoluteX();const n=this.getGlyphWidth();return e+=n/2,e+=-this.width/2+this.width+2,e}getTieLeftX(){let e=this.getAbsoluteX();const n=this.getGlyphWidth();return e+=n/2,e-=this.width/2+2,e}getKeys(){return this.keys}getKeyProps(){return this.keyProps}getBoundingBox(){const e=super.getBoundingBox();for(let n=0;n<this.modifiers.length;n++)e.mergeWith(this.modifiers[n].getBoundingBox());return e}}var oe;(function(t){t[t.CENTER=0]="CENTER",t[t.LEFT=1]="LEFT",t[t.RIGHT=2]="RIGHT",t[t.ABOVE=3]="ABOVE",t[t.BELOW=4]="BELOW",t[t.BEGIN=5]="BEGIN",t[t.END=6]="END"})(oe||(oe={}));class di extends Q{static get CATEGORY(){return"StaveModifier"}static get Position(){return oe}constructor(){super(),this.padding=10,this.position=oe.ABOVE}getPosition(){return this.position}setPosition(e){return this.position=e,this}getStave(){return this.stave}checkStave(){return Xe(this.stave,"NoStave","No stave attached to instance.")}setStave(e){return this.stave=e,this}getPadding(e){return e!==void 0&&e<2?0:this.padding}setPadding(e){return this.padding=e,this}setLayoutMetrics(e){return this.layoutMetrics=e,this}getLayoutMetrics(){return this.layoutMetrics}}var ve;(function(t){t[t.SINGLE=1]="SINGLE",t[t.DOUBLE=2]="DOUBLE",t[t.END=3]="END",t[t.REPEAT_BEGIN=4]="REPEAT_BEGIN",t[t.REPEAT_END=5]="REPEAT_END",t[t.REPEAT_BOTH=6]="REPEAT_BOTH",t[t.NONE=7]="NONE"})(ve||(ve={}));class Xn extends di{static get CATEGORY(){return"Barline"}static get type(){return ve}static get typeString(){return{single:ve.SINGLE,double:ve.DOUBLE,end:ve.END,repeatBegin:ve.REPEAT_BEGIN,repeatEnd:ve.REPEAT_END,repeatBoth:ve.REPEAT_BOTH,none:ve.NONE}}constructor(e){super(),this.thickness=k.STAVE_LINE_THICKNESS;const n=ve;this.widths={},this.widths[n.SINGLE]=5,this.widths[n.DOUBLE]=5,this.widths[n.END]=5,this.widths[n.REPEAT_BEGIN]=5,this.widths[n.REPEAT_END]=5,this.widths[n.REPEAT_BOTH]=5,this.widths[n.NONE]=5,this.paddings={},this.paddings[n.SINGLE]=0,this.paddings[n.DOUBLE]=0,this.paddings[n.END]=0,this.paddings[n.REPEAT_BEGIN]=15,this.paddings[n.REPEAT_END]=15,this.paddings[n.REPEAT_BOTH]=15,this.paddings[n.NONE]=0,this.layoutMetricsMap={},this.layoutMetricsMap[n.SINGLE]={xMin:0,xMax:1,paddingLeft:5,paddingRight:5},this.layoutMetricsMap[n.DOUBLE]={xMin:-3,xMax:1,paddingLeft:5,paddingRight:5},this.layoutMetricsMap[n.END]={xMin:-5,xMax:1,paddingLeft:5,paddingRight:5},this.layoutMetricsMap[n.REPEAT_END]={xMin:-10,xMax:1,paddingLeft:5,paddingRight:5},this.layoutMetricsMap[n.REPEAT_BEGIN]={xMin:-2,xMax:10,paddingLeft:5,paddingRight:5},this.layoutMetricsMap[n.REPEAT_BOTH]={xMin:-10,xMax:10,paddingLeft:5,paddingRight:5},this.layoutMetricsMap[n.NONE]={xMin:0,xMax:0,paddingLeft:5,paddingRight:5},this.setPosition(oe.BEGIN),this.setType(e)}getType(){return this.type}setType(e){return this.type=typeof e=="string"?Xn.typeString[e]:e,this.setWidth(this.widths[this.type]),this.setPadding(this.paddings[this.type]),this.setLayoutMetrics(this.layoutMetricsMap[this.type]),this}draw(){const e=this.checkStave(),n=e.checkContext();switch(this.setRendered(),n.openGroup("stavebarline",this.getAttribute("id")),this.type){case ve.SINGLE:this.drawVerticalBar(e,this.x,!1);break;case ve.DOUBLE:this.drawVerticalBar(e,this.x,!0);break;case ve.END:this.drawVerticalEndBar(e,this.x);break;case ve.REPEAT_BEGIN:this.drawRepeatBar(e,this.x,!0),e.getX()!==this.x&&this.drawVerticalBar(e,e.getX());break;case ve.REPEAT_END:this.drawRepeatBar(e,this.x,!1);break;case ve.REPEAT_BOTH:this.drawRepeatBar(e,this.x,!1),this.drawRepeatBar(e,this.x,!0);break}n.closeGroup()}drawVerticalBar(e,n,i){const r=e.checkContext(),s=e.getTopLineTopY(),o=e.getBottomLineBottomY();i&&r.fillRect(n-3,s,1,o-s),r.fillRect(n,s,1,o-s)}drawVerticalEndBar(e,n){const i=e.checkContext(),r=e.getTopLineTopY(),s=e.getBottomLineBottomY();i.fillRect(n-5,r,1,s-r),i.fillRect(n-2,r,3,s-r)}drawRepeatBar(e,n,i){const r=e.checkContext(),s=e.getTopLineTopY(),o=e.getBottomLineBottomY();let a=3;i||(a=-5),r.fillRect(n+a,s,1,o-s),r.fillRect(n-2,s,3,o-s);const l=2;i?a+=4:a-=4;const d=n+a+l/2;let f=(e.getNumLines()-1)*e.getSpacingBetweenLines();f=f/2-e.getSpacingBetweenLines()/2;let u=s+f+l/2;r.beginPath(),r.arc(d,u,l,0,Math.PI*2,!1),r.fill(),u+=e.getSpacingBetweenLines(),r.beginPath(),r.arc(d,u,l,0,Math.PI*2,!1),r.fill()}}function fB(...t){Fl.DEBUG&&Ge("VexFlow.BarNote",t)}class Fl extends st{static get CATEGORY(){return"BarNote"}constructor(e=ve.SINGLE){super({duration:"b"}),this.metrics={widths:{}};const n=ve;this.metrics.widths={[n.SINGLE]:8,[n.DOUBLE]:12,[n.END]:15,[n.REPEAT_BEGIN]:14,[n.REPEAT_END]:14,[n.REPEAT_BOTH]:18,[n.NONE]:0},this.ignoreTicks=!0,this.setType(e)}getType(){return this.type}setType(e){return this.type=typeof e=="string"?Xn.typeString[e]:e,this.setWidth(this.metrics.widths[this.type]),this}addToModifierContext(e){return this}preFormat(){return this.preFormatted=!0,this}draw(){const e=this.checkContext();fB("Rendering bar line at: ",this.getAbsoluteX());const n=new Xn(this.type);n.setX(this.getAbsoluteX()),n.setStave(this.checkStave()),n.setContext(e),n.drawWithStyle(),this.setRendered()}}Fl.DEBUG=!1;function tE(t){let e=0;return t.forEach(n=>{n.keyProps&&n.keyProps.forEach(i=>{e+=i.line-3})}),e>=0?I.DOWN:I.UP}function mB(t,e){const n=t.getStemExtents().topY,i=t.getStemX(),r=e.getStemExtents().topY,s=e.getStemX();return(r-n)/(s-i)}const jc="L",gB="R",nE="B";class er extends Q{static get CATEGORY(){return"Beam"}getStemDirection(){return this._stemDirection}static getDefaultBeamGroups(e){(!e||e==="c")&&(e="4/4");const i={"1/2":["1/2"],"2/2":["1/2"],"3/2":["1/2"],"4/2":["1/2"],"1/4":["1/4"],"2/4":["1/4"],"3/4":["1/4"],"4/4":["1/4"],"1/8":["1/8"],"2/8":["2/8"],"3/8":["3/8"],"4/8":["2/8"],"1/16":["1/16"],"2/16":["2/16"],"3/16":["3/16"],"4/16":["2/16"]}[e];if(i===void 0){const r=parseInt(e.split("/")[0],10),s=parseInt(e.split("/")[1],10);if(r%3===0)return[new ue(3,s)];if(s>4)return[new ue(2,s)];if(s<=4)return[new ue(1,s)]}else return i.map(r=>new ue().parse(r));return[new ue(1,4)]}static applyAndGetBeams(e,n,i){return er.generateBeams(e.getTickables(),{groups:i,stemDirection:n})}static generateBeams(e,n={}){(!n.groups||!n.groups.length)&&(n.groups=[new ue(2,8)]);const i=n.groups.map(S=>{if(!S.multiply)throw new P("InvalidBeamGroups","The beam groups must be an array of VexFlow.Fractions");return S.clone().multiply(k.RESOLUTION,1)}),r=e;let s=0,o=[],a=[];function l(S){return S.reduce((w,D)=>D.getTicks().clone().add(w),new ue(0,1))}function d(){i.length-1>s?s+=1:s=0}function f(){let S=[],w=new ue(0,1);r.forEach(D=>{if(S=[],D.shouldIgnoreTicks()){o.push(a),a=S;return}a.push(D);const x=i[s].clone(),F=l(a).add(w),y=k.durationToNumber(D.getDuration())<8;if(y&&D.getTuplet()&&(x.numerator*=2),F.greaterThan(x)){if(!y){const X=a.pop();X&&S.push(X)}o.push(a);do w=F.subtract(i[s]),d();while(w.greaterThanEquals(i[s]));a=S}else F.equals(x)&&(o.push(a),w=new ue(0,1),a=S,d())}),a.length>0&&o.push(a)}function u(){return o.filter(S=>{if(S.length>1){let w=!0;return S.forEach(D=>{D.getIntrinsicTicks()>=k.durationToTicks("4")&&(w=!1)}),w}return!1})}function c(){const S=[];o.forEach(w=>{let D=[];w.forEach((x,F,y)=>{const X=F===0||F===y.length-1,G=y[F-1],Ee=!n.beamRests&&x.isRest(),re=n.beamRests&&n.beamMiddleOnly&&x.isRest()&&X;let be=!1;if(n.maintainStemDirections&&G&&!x.isRest()&&!G.isRest()){const mt=G.getStemDirection();be=x.getStemDirection()!==mt}const de=parseInt(x.getDuration(),10)<8;Ee||re||be||de?(D.length>0&&S.push(D),D=be?[x]:[]):D.push(x)}),D.length>0&&S.push(D)}),o=S}function h(){o.forEach(S=>{let w;if(n.maintainStemDirections){const D=g(S);w=D?D.getStemDirection():I.UP}else n.stemDirection?w=n.stemDirection:w=tE(S);E(S,w)})}function g(S){for(let w=0;w<S.length;w++){const D=S[w];if(!D.isRest())return D}return!1}function E(S,w){S.forEach(D=>{D.setStemDirection(w)})}function p(){const S=[];return o.forEach(w=>{let D;w.forEach(x=>{const F=x.getTuplet();F&&D!==F&&(D=F,S.push(D))})}),S}f(),c(),h();const m=u(),b=p(),A=[];return m.forEach(S=>{const w=new er(S);n.showStemlets&&(w.renderOptions.showStemlets=!0),n.secondaryBreaks&&(w.renderOptions.secondaryBreakTicks=k.durationToTicks(n.secondaryBreaks)),n.flatBeams===!0&&(w.renderOptions.flatBeams=!0,w.renderOptions.flatBeamOffset=n.flatBeamOffset),A.push(w)}),b.forEach(S=>{const w=S.notes[0].stemDirection===I.DOWN?-1:1;S.setTupletLocation(w);let D=!1;for(let x=0;x<S.notes.length;x++)if(!S.notes[x].hasBeam()){D=!0;break}S.setBracketed(D)}),A}constructor(e,n=!1){if(super(),this.slope=0,this.yShift=0,this.forcedPartialDirections={},!e||e.length===0)throw new P("BadArguments","No notes provided for beam.");if(e.length===1)throw new P("BadArguments","Too few notes for beam.");if(this._ticks=e[0].getIntrinsicTicks(),this._ticks>=k.durationToTicks("4"))throw new P("BadArguments","Beams can only be applied to notes shorter than a quarter note.");let i,r;this._stemDirection=e[0].getStemDirection();let s=this._stemDirection;for(n&&ai(e[0])?s=tE(e):n&&wn(e[0])&&(s=e.reduce((a,l)=>a+l.getStemDirection(),0)>-1?I.UP:I.DOWN),i=0;i<e.length;++i)r=e[i],n&&(r.setStemDirection(s),this._stemDirection=s),r.setBeam(this);this.postFormatted=!1,this.notes=e,this._beamCount=this.getBeamCount(),this.breakOnIndexes=[],this.renderOptions={beamWidth:5,maxSlope:.25,minSlope:-.25,slopeIterations:20,slopeCost:100,showStemlets:!1,stemletExtension:7,partialBeamLength:10,flatBeams:!1,minFlatBeamOffset:15}}getNotes(){return this.notes}getBeamCount(){return this.notes.map(i=>i.getGlyphProps().beamCount).reduce((i,r)=>r>i?r:i)}breakSecondaryAt(e){return this.breakOnIndexes=e,this}setPartialBeamSideAt(e,n){return this.forcedPartialDirections[e]=n,this}unsetPartialBeamSideAt(e){return delete this.forcedPartialDirections[e],this}getSlopeY(e,n,i,r){return i+(e-n)*r}calculateSlope(){const{notes:e,renderOptions:{maxSlope:n,minSlope:i,slopeIterations:r,slopeCost:s}}=this,o=this._stemDirection,a=e[0],l=mB(a,e[e.length-1]),d=(n-i)/r;let f=Number.MAX_VALUE,u=0,c=0;for(let h=i;h<=n;h+=d){let g=0,E=0;for(let A=1;A<e.length;++A){const S=e[A];if(S.hasStem()||S.isRest()){const w=this.getSlopeY(S.getStemX(),a.getStemX(),a.getStemExtents().topY,h)+E,D=S.getStemExtents().topY;if(D*o<w*o){const x=Math.abs(D-w);E+=x*-o,g+=x*A}else g+=(D-w)*o}}const p=l/2,m=Math.abs(p-h),b=s*m+Math.abs(g);b<f&&(f=b,u=h,c=E)}this.slope=u,this.yShift=c}calculateFlatSlope(){const{notes:e,renderOptions:{beamWidth:n,minFlatBeamOffset:i,flatBeamOffset:r}}=this,s=this._stemDirection;let o=0,a=0,l=0,d=0;for(let h=0;h<e.length;h++){const g=e[h],E=g.getStemExtents().topY;o+=E,s===I.DOWN&&d<E?(d=E,a=Math.max(...g.getYs()),l=g.getBeamCount()):s===I.UP&&(d===0||d>E)&&(d=E,a=Math.min(...g.getYs()),l=g.getBeamCount())}let f=o/e.length;const u=i+l*n*1.5,c=a+u*-s;s===I.DOWN&&f<c?f=a+u:s===I.UP&&f>c&&(f=a-u),r?s===I.DOWN&&f>r?this.renderOptions.flatBeamOffset=f:s===I.UP&&f<r&&(this.renderOptions.flatBeamOffset=f):this.renderOptions.flatBeamOffset=f,this.slope=0,this.yShift=0}getBeamYToDraw(){let i=this.notes[0].getStemExtents().topY;return this.renderOptions.flatBeams&&this.renderOptions.flatBeamOffset&&(i=this.renderOptions.flatBeamOffset),i}applyStemExtensions(){const{notes:e,slope:n,renderOptions:{showStemlets:i,stemletExtension:r,beamWidth:s}}=this,o=this.yShift,a=this._beamCount,l=e[0],d=this.getBeamYToDraw(),f=l.getStemX();for(let u=0;u<e.length;++u){const c=e[u],h=c.getStem();if(h){const g=c.getStemX(),{topY:E}=c.getStemExtents(),p=this.getSlopeY(g,f,d,n)+o,m=h.getExtension(),b=c.getStemDirection()===I.UP?E-p:p-E;let A=0;if(c.getStemDirection()!==this._stemDirection&&(A=(1+(c.getGlyphProps().beamCount-1)*1.5)*this.renderOptions.beamWidth),h.setExtension(m+b+A),h.adjustHeightForBeam(),c.isRest()&&i){const S=(a-1)*s*1.5+s;h.setVisibility(!0).setStemlet(!0,S+r)}}}}lookupBeamDirection(e,n,i,r,s){if(e==="4")return jc;const o=this.forcedPartialDirections[s];if(o)return o;const a=`${k.durationToNumber(e)/2}`,l=n<k.durationToTicks(a),d=r<k.durationToTicks(a),f=i<k.durationToTicks(a);return l&&d&&f?nE:l&&!d&&f?jc:!l&&d&&f?gB:this.lookupBeamDirection(a,n,i,r,s)}getBeamLines(e){const n=k.durationToTicks(e);let i=!1;const r=[];let s;const o=this.renderOptions.partialBeamLength;let a=!1,l=0;for(let f=0;f<this.notes.length;++f){const u=this.notes[f],c=u.getTicks().value();l+=c;let h=!1;parseInt(e,10)>=8&&(h=this.breakOnIndexes.indexOf(f)!==-1,this.renderOptions.secondaryBreakTicks&&l>=this.renderOptions.secondaryBreakTicks&&(l=0,h=!0));const g=u.getIntrinsicTicks()<n,E=u.getStemX()-I.WIDTH/2,p=this.notes[f-1],m=this.notes[f+1],b=m&&m.getIntrinsicTicks()<n,A=p&&p.getIntrinsicTicks()<n,S=p&&m&&g&&!A&&!b;if(g)if(i)s=r[r.length-1],s.end=E,h&&(i=!1,m&&!b&&s.end===void 0&&(s.end=s.start-o));else{if(s={start:E,end:void 0},i=!0,S){const w=p.getIntrinsicTicks(),D=m.getIntrinsicTicks(),x=u.getIntrinsicTicks(),F=this.lookupBeamDirection(e,w,x,D,f);[jc,nE].includes(F)?s.end=s.start-o:s.end=s.start+o}else b?h&&(s.end=s.start-o,i=!1):(a||f===0)&&m?s.end=s.start+o:s.end=s.start-o;r.push(s)}else i=!1;a=h}const d=r[r.length-1];return d&&d.end===void 0&&(d.end=d.start-o),r}drawStems(e){this.notes.forEach(n=>{const i=n.getStem();if(i){const r=n.getStemX();i.setNoteHeadXBounds(r,r),i.setContext(e).drawWithStyle()}},this)}drawBeamLines(e){const n=["4","8","16","32","64"],i=this.notes[0];let r=this.getBeamYToDraw();const s=i.getStemX(),o=this.renderOptions.beamWidth*this._stemDirection;for(let a=0;a<n.length;++a){const l=n[a],d=this.getBeamLines(l);for(let f=0;f<d.length;++f){const u=d[f],c=u.start,h=this.getSlopeY(c,s,r,this.slope),g=u.end;if(g){const E=this.getSlopeY(g,s,r,this.slope);e.beginPath(),e.moveTo(c,h),e.lineTo(c,h+o),e.lineTo(g+1,E+o),e.lineTo(g+1,E),e.closePath(),e.fill()}else throw new P("NoLastBeamX","lastBeamX undefined.")}r+=o*1.5}}preFormat(){return this}postFormat(){this.postFormatted||(wn(this.notes[0])||this.renderOptions.flatBeams?this.calculateFlatSlope():this.calculateSlope(),this.applyStemExtensions(),this.postFormatted=!0)}draw(){const e=this.checkContext();this.setRendered(),!this.unbeamable&&(this.postFormatted||this.postFormat(),e.openGroup("beam",this.getAttribute("id")),this.drawStems(e),this.drawBeamLines(e),e.closeGroup())}}class fn extends q{static get CATEGORY(){return"Bend"}static get UP(){return 0}static get DOWN(){return 1}static format(e,n){if(!e||e.length===0)return!1;let i=0;for(let r=0;r<e.length;++r){const s=e[r],o=s.checkAttachedNote();if(wn(o)){const a=o.leastString()-1;n.topTextLine<a&&(n.topTextLine=a)}s.setXShift(i),i=s.getWidth(),s.setTextLine(n.topTextLine)}return n.rightShift+=i,n.topTextLine+=1,!0}setStyleLine(e){return this.styleLine=e,this}getStyleLine(){return this.styleLine}constructor(e){super(),this.styleLine=W.getStyle("Bend.line"),this.xShift=0,this.tap="",this.renderOptions={bendWidth:8,releaseWidth:8},this.phrase=e,this.updateWidth()}setXShift(e){return this.xShift=e,this.updateWidth(),this}setTap(e){return this.tap=e,this}getTextHeight(){const e=new Q("Bend");return e.setText(this.phrase[0].text),e.getHeight()}updateWidth(){const e=i=>{const r=new Q("Bend");return r.setText(i),r.getWidth()};let n=0;for(let i=0;i<this.phrase.length;++i){const r=this.phrase[i];if(r.width!==void 0)n+=r.width;else{const s=r.type===fn.UP?this.renderOptions.bendWidth:this.renderOptions.releaseWidth;r.width=Math.max(s,e(r.text))+3,r.drawWidth=r.width/2,n+=r.width}}return this.setWidth(n+this.xShift),this}draw(){var e;const n=this.checkContext(),i=this.checkAttachedNote();this.setRendered();const r=i.getModifierStartXY(q.Position.RIGHT,this.index);r.x+=3,r.y+=.5;const s=this.xShift,a=i.checkStave().getSpacingBetweenLines(),l=i.getYs().reduce((b,A)=>b<A?b:A),d=r.y-((this.textLine+1)*a+r.y-l)+3,f=r.y-((this.textLine+1)*a+r.y-l)-1,u=(b,A,S,w)=>{const D=b+S,x=A;this.applyStyle(n,this.styleLine),n.beginPath(),n.moveTo(b,A),n.quadraticCurveTo(D,x,b+S,w),n.stroke()},c=(b,A,S,w)=>{this.applyStyle(n,this.styleLine),n.beginPath(),n.moveTo(b,w),n.quadraticCurveTo(b+S,w,b+S,A),n.stroke()},h=(b,A,S)=>{const D=A+4*S;n.beginPath(),n.moveTo(b,A),n.lineTo(b-4,D),n.lineTo(b+4,D),n.closePath(),n.fill()},g=(b,A)=>{n.setFont(this.fontInfo);const S=b-n.measureText(A).width/2;n.fillText(A,S,f)};let E,p=0,m=0;if(!((e=this.tap)===null||e===void 0)&&e.length){const b=i.getModifierStartXY(q.Position.CENTER,this.index);g(b.x,this.tap)}for(let b=0;b<this.phrase.length;++b){const A=this.phrase[b];A.drawWidth||(A.drawWidth=0),b===0&&(A.drawWidth+=s),m=A.drawWidth+p-(b===1?s:0),A.type===fn.UP&&(E&&E.type===fn.UP&&h(r.x,d,1),u(r.x,r.y,m,d)),A.type===fn.DOWN&&(E&&E.type===fn.UP&&c(r.x,r.y,m,d),E&&E.type===fn.DOWN&&(h(r.x,r.y,-1),c(r.x,r.y,m,d)),E||(m=A.drawWidth,c(r.x,r.y,m,d))),g(r.x+m,A.text),E=A,p=A.drawWidth,E.x=r.x,r.x+=m}if(!E||E.x===void 0)throw new P("NoLastBendForBend","Internal error.");E.type===fn.UP?h(E.x+m,d,1):E.type===fn.DOWN&&h(E.x+m,r.y,-1)}}function Tf(t){if(!t)return!1;const e=ra();return typeof e.HTMLCanvasElement=="function"&&t instanceof e.HTMLCanvasElement||typeof t.getContext=="function"&&typeof t.toDataURL=="function"}function EB(t){if(!t)return!1;const e=ra();return typeof e.HTMLDivElement=="function"&&t instanceof e.HTMLDivElement||typeof t.appendChild=="function"&&typeof t.style=="object"}class cs extends Bf{static get WIDTH(){return 600}static get HEIGHT(){return 400}static get CANVAS_BROWSER_SIZE_LIMIT(){return 32767}static sanitizeCanvasDims(e,n){const i=this.CANVAS_BROWSER_SIZE_LIMIT;return Math.max(e,n)>i&&(qx("Canvas dimensions exceed browser limit. Cropping to "+i),e>i&&(e=i),n>i&&(n=i)),[e,n]}constructor(e){super(),this.textHeight=0,this.context2D=e,this.curTransfrom=e.getTransform(),e.canvas?this.canvas=e.canvas:this.canvas={width:cs.WIDTH,height:cs.HEIGHT}}clear(){this.context2D.clearRect(0,0,this.canvas.width,this.canvas.height)}openGroup(e,n){}closeGroup(){}openRotation(e,n,i){this.curTransfrom=this.context2D.getTransform(),this.context2D.translate(n,i),this.context2D.rotate(e*Math.PI/180),this.context2D.translate(-n,-i)}closeRotation(){this.context2D.setTransform(this.curTransfrom)}add(e){}setFillStyle(e){return this.context2D.fillStyle=e,this}setBackgroundFillStyle(e){return this}setStrokeStyle(e){return this.context2D.strokeStyle=e,this}setShadowColor(e){return this.context2D.shadowColor=e,this}setShadowBlur(e){const n=this.context2D.getTransform(),i=Math.sqrt(n.a*n.a+n.b*n.b+n.c*n.c+n.d*n.d);return this.context2D.shadowBlur=i*e,this}setLineWidth(e){return this.context2D.lineWidth=e,this}setLineCap(e){return this.context2D.lineCap=e,this}setLineDash(e){return this.context2D.setLineDash(e),this}scale(e,n){return this.context2D.scale(e,n),this}resize(e,n,i){var r;const s=this.context2D.canvas,o=(r=i??ra().devicePixelRatio)!==null&&r!==void 0?r:1;return[e,n]=cs.sanitizeCanvasDims(e*o,n*o),e=e/o|0,n=n/o|0,s.width=e*o,s.height=n*o,Tf(s)&&(s.style.width=e+"px",s.style.height=n+"px"),this.scale(o,o)}rect(e,n,i,r){return this.context2D.rect(e,n,i,r),this}fillRect(e,n,i,r){return this.context2D.fillRect(e,n,i,r),this}pointerRect(e,n,i,r){return this}clearRect(e,n,i,r){return this.context2D.clearRect(e,n,i,r),this}beginPath(){return this.context2D.beginPath(),this}moveTo(e,n){return this.context2D.moveTo(e,n),this}lineTo(e,n){return this.context2D.lineTo(e,n),this}bezierCurveTo(e,n,i,r,s,o){return this.context2D.bezierCurveTo(e,n,i,r,s,o),this}quadraticCurveTo(e,n,i,r){return this.context2D.quadraticCurveTo(e,n,i,r),this}arc(e,n,i,r,s,o){return this.context2D.arc(e,n,i,r,s,o),this}fill(){return this.context2D.fill(),this}stroke(){return this.context2D.stroke(),this}closePath(){return this.context2D.closePath(),this}measureText(e){const n=this.context2D.measureText(e);let i=0,r=0;return n.fontBoundingBoxAscent?(i=-n.fontBoundingBoxAscent,r=n.fontBoundingBoxDescent+n.fontBoundingBoxAscent):(i=-n.actualBoundingBoxAscent,r=n.actualBoundingBoxDescent+n.actualBoundingBoxAscent),{x:0,y:i,width:n.width,height:r}}fillText(e,n,i){return this.context2D.fillText(e,n,i),this}save(){return this.context2D.save(),this}restore(){return this.context2D.restore(),this}set fillStyle(e){this.context2D.fillStyle=e}get fillStyle(){return this.context2D.fillStyle}set strokeStyle(e){this.context2D.strokeStyle=e}get strokeStyle(){return this.context2D.strokeStyle}setFont(e,n,i,r){const s=ne.validate(e,n,i,r);return this.context2D.font=ne.toCSSString(s),this.textHeight=ne.convertSizeToPixelValue(s.size),this}getFont(){return this.context2D.font}}function iE(...t){je.DEBUG&&Ge("VexFlow.ChordSymbol",t)}class bB extends Q{constructor(e,n,i,r,s){super(),this.text=e,this.symbolModifier=n,this.xShift=i,this.yShift=r,this.vAlign=s}isSuperscript(){return this.symbolModifier===Ai.SUPERSCRIPT}isSubscript(){return this.symbolModifier===Ai.SUBSCRIPT}}var Ht;(function(t){t[t.LEFT=1]="LEFT",t[t.CENTER=2]="CENTER",t[t.RIGHT=3]="RIGHT",t[t.CENTER_STEM=4]="CENTER_STEM"})(Ht||(Ht={}));var zn;(function(t){t[t.TOP=1]="TOP",t[t.BOTTOM=2]="BOTTOM"})(zn||(zn={}));var Ai;(function(t){t[t.NONE=1]="NONE",t[t.SUBSCRIPT=2]="SUBSCRIPT",t[t.SUPERSCRIPT=3]="SUPERSCRIPT"})(Ai||(Ai={}));class je extends q{static get CATEGORY(){return"ChordSymbol"}static get superSubRatio(){return W.get("ChordSymbol.superSubRatio")}static get spacingBetweenBlocks(){return W.get("ChordSymbol.spacing")}static get superscriptOffset(){return W.get("ChordSymbol.superscriptOffset")}static get subscriptOffset(){return W.get("ChordSymbol.subscriptOffset")}static get minPadding(){return W.get("NoteHead.minPadding")}static format(e,n){if(!e||e.length===0)return!1;let i=0,r=0,s=0,o=0,a=0;for(const f of e){const u=f.checkAttachedNote();let c=1;for(let h=0;h<f.symbolBlocks.length;++h){const g=f.symbolBlocks[h],E=g.isSuperscript(),p=g.isSubscript();if(g.setXShift(i),(E||p)&&(c=2),p&&h>0){const m=f.symbolBlocks[h-1];m.isSuperscript()&&(g.setXShift(i-m.getWidth()-je.minPadding),g.vAlign=!0,i+=-m.getWidth()-je.minPadding+(m.getWidth()>g.getWidth()?m.getWidth()-g.getWidth():0))}i+=g.getWidth()+je.minPadding}if(f.getVertical()===zn.TOP?(f.setTextLine(n.topTextLine),n.topTextLine+=c):(f.setTextLine(n.textLine+1),n.textLine+=c+1),f.getReportWidth()){if(Nl(u)){const h=u.getGlyphWidth();f.getHorizontal()===Ht.RIGHT?(o=Math.max(h,o),r=Math.max(r,i)+je.minPadding):f.getHorizontal()===Ht.LEFT?(a=Math.max(h,a),s=Math.max(s,i)):(r=Math.max(r,i/2)+je.minPadding,s=Math.max(s,i/2),o=Math.max(h/2,o),a=Math.max(h/2,a))}f.width=i}i=0}const l=Math.min(Math.max(s-a,0),Math.max(s-n.rightShift,0)),d=Math.min(Math.max(r-o,0),Math.max(r-n.leftShift,0));return n.leftShift+=d,n.rightShift+=l,!0}constructor(){super(),this.symbolBlocks=[],this.horizontal=Ht.LEFT,this.vertical=zn.TOP,this.reportWidth=!0}get superscriptOffset(){return je.superscriptOffset*ne.convertSizeToPixelValue(this.fontInfo.size)}get subscriptOffset(){return je.subscriptOffset*ne.convertSizeToPixelValue(this.fontInfo.size)}setReportWidth(e){return this.reportWidth=e,this}getReportWidth(){return this.reportWidth}getSymbolBlock(e={}){var n,i;const r=new bB((n=e.text)!==null&&n!==void 0?n:"",(i=e.symbolModifier)!==null&&i!==void 0?i:Ai.NONE,0,0,!1);if(r.isSubscript()&&r.setYShift(this.subscriptOffset),r.isSuperscript()&&r.setYShift(this.superscriptOffset),r.isSubscript()||r.isSuperscript()){const{family:s,size:o,weight:a,style:l}=this.fontInfo,d=ne.scaleSize(o,je.superSubRatio);r.setFont(s,d,a,l)}else r.setFont(this.fontInfo);return r}addSymbolBlock(e){return this.symbolBlocks.push(this.getSymbolBlock(e)),this}addText(e,n={}){return this.addSymbolBlock(Object.assign(Object.assign({},n),{text:e}))}addTextSuperscript(e){const n=Ai.SUPERSCRIPT;return this.addSymbolBlock({text:e,symbolModifier:n})}addTextSubscript(e){const n=Ai.SUBSCRIPT;return this.addSymbolBlock({text:e,symbolModifier:n})}addGlyphSuperscript(e){return this.addTextSuperscript(je.glyphs[e])}addGlyph(e,n={}){return this.addText(je.glyphs[e],n)}addGlyphOrText(e,n={}){let i="";for(let r=0;r<e.length;++r){const s=e[r],o=je.glyphs[s];o?i+=o:i+=s}return i.length>0&&this.addText(i,n),this}addLine(e={}){return this.addText("",e)}setVertical(e){return this.vertical=typeof e=="string"?je.VerticalJustifyString[e]:e,this}getVertical(){return this.vertical}setHorizontal(e){return this.horizontal=typeof e=="string"?je.HorizontalJustifyString[e]:e,this}getHorizontal(){return this.horizontal}draw(){const e=this.checkContext(),n=this.checkAttachedNote();this.setRendered(),e.openGroup("chordsymbol",this.getAttribute("id"));const i=n.getModifierStartXY(q.Position.ABOVE,this.index);e.setFont(this.fontInfo);let r;const s=n.hasStem(),o=n.checkStave();if(this.vertical===zn.BOTTOM){if(r=o.getYForBottomText(this.textLine+k.TEXT_HEIGHT_OFFSET_HACK),s){const l=n.checkStem().getExtents(),d=o.getSpacingBetweenLines(),f=n.getStemDirection()===1?l.baseY:l.topY;r=Math.max(r,f+d*(this.textLine+2))}}else{const l=Math.min(...n.getYs());if(r=Math.min(o.getYForTopText(this.textLine),l-10),s){const d=n.checkStem().getExtents(),f=o.getSpacingBetweenLines();r=Math.min(r,d.topY-5-f*this.textLine)}}let a=i.x;this.horizontal===Ht.LEFT?a=i.x:this.horizontal===Ht.RIGHT?a=i.x+this.getWidth():this.horizontal===Ht.CENTER?a=i.x-this.getWidth()/2:a=n.getStemX()-this.getWidth()/2,iE("Rendering ChordSymbol: ",a,r),this.symbolBlocks.forEach(l=>{iE("Rendering Text: ",l.getText(),a+l.getXShift(),r+l.getYShift()),l.setX(a),l.setY(r),l.renderText(e,0,0)}),e.closeGroup()}getBoundingBox(){const e=this.symbolBlocks[0].getBoundingBox();for(let n=1;n<this.symbolBlocks.length;n++)e.mergeWith(this.symbolBlocks[n].getBoundingBox());return e}}je.DEBUG=!1;je.HorizontalJustify=Ht;je.HorizontalJustifyString={left:Ht.LEFT,right:Ht.RIGHT,center:Ht.CENTER,centerStem:Ht.CENTER_STEM};je.VerticalJustify=zn;je.VerticalJustifyString={top:zn.TOP,above:zn.TOP,below:zn.BOTTOM,bottom:zn.BOTTOM};je.glyphs={diminished:C.csymDiminished,dim:C.csymDiminished,halfDiminished:C.csymHalfDiminished,"+":C.csymAugmented,augmented:C.csymAugmented,majorSeventh:C.csymMajorSeventh,minor:C.csymMinor,"-":C.csymMinor,"(":"(",leftParen:"(",")":")",rightParen:")",leftBracket:C.csymBracketLeftTall,rightBracket:C.csymBracketRightTall,leftParenTall:"(",rightParenTall:")","/":C.csymDiagonalArrangementSlash,over:C.csymDiagonalArrangementSlash,"#":C.csymAccidentalSharp,b:C.csymAccidentalFlat};je.symbolModifiers=Ai;function pB(...t){Wt.DEBUG&&Ge("VexFlow.Clef",t)}class Wt extends di{static get CATEGORY(){return"Clef"}static get types(){const{gClef:e,fClef:n,cClef:i,unpitchedPercussionClef1:r,sixStringTabClef:s}=C;return{treble:{code:e,line:3},bass:{code:n,line:1},alto:{code:i,line:2},tenor:{code:i,line:1},percussion:{code:r,line:2},soprano:{code:i,line:4},"mezzo-soprano":{code:i,line:3},"baritone-c":{code:i,line:0},"baritone-f":{code:n,line:2},subbass:{code:n,line:0},french:{code:e,line:4},tab:{code:s,line:2.5}}}constructor(e,n,i){super(),this.code=Wt.types.treble.code,this.line=Wt.types.treble.line,this.size="default",this.type="treble",this.setPosition(oe.BEGIN),this.setType(e,n,i),pB("Creating clef:",e)}setType(e,n="default",i){return this.type=e,this.code=Wt.types[e].code,this.line=Wt.types[e].line,this.size=n??"default",i==="8va"&&(this.code===C.gClef&&(this.code=C.gClef8va),this.code===C.fClef&&(this.code=C.fClef8va)),i==="8vb"&&(this.code===C.gClef&&(this.code=C.gClef8vb),this.code===C.fClef&&(this.code=C.fClef8vb)),this.text=this.code,this.fontInfo.size=Math.floor(Wt.getPoint(this.size)),this}static getPoint(e){return e==="default"?W.get("fontSize"):W.get("fontSize")*2/3}setStave(e){return this.stave=e,this}draw(){const e=this.checkStave(),n=e.checkContext();this.setRendered(),n.openGroup("clef",this.getAttribute("id")),this.y=e.getYForLine(this.line),this.renderText(n,0,0),n.closeGroup()}}Wt.DEBUG=!1;class SS extends st{static get CATEGORY(){return"ClefNote"}constructor(e,n="default",i){super({duration:"b"}),this.setType(e,n,i),this.ignoreTicks=!0}setType(e,n,i){return this.clef=new Wt(e,n,i),this.setWidth(this.clef.getWidth()),this}getClef(){return this.clef}preFormat(){return this.preFormatted=!0,this}draw(){const e=this.checkStave(),n=this.checkContext();this.setRendered(),this.clef.setX(this.getAbsoluteX()),this.clef.setY(e.getYForLine(this.clef.line)),this.clef.renderText(n,0,0)}getBoundingBox(){return this.clef.getBoundingBox()}}class qo{static getNextContext(e){const n=e.tContexts,i=n.indexOf(e);if(i+1<n.length)return n[i+1]}constructor(e){var n;this.preFormatted=!1,this.postFormatted=!1,this.tickID=(n=e==null?void 0:e.tickID)!==null&&n!==void 0?n:0,this.currentTick=new ue(0,1),this.maxTicks=new ue(0,1),this.maxTickable=void 0,this.minTicks=void 0,this.minTickable=void 0,this.padding=1,this.x=0,this.xBase=0,this.xOffset=0,this.tickables=[],this.tickablesByVoice={},this.notePx=0,this.glyphPx=0,this.leftDisplacedHeadPx=0,this.rightDisplacedHeadPx=0,this.modLeftPx=0,this.modRightPx=0,this.totalLeftPx=0,this.totalRightPx=0,this.tContexts=[],this.width=0,this.formatterMetrics={freedom:{left:0,right:0}}}getTickID(){return this.tickID}getX(){return this.x}setX(e){return this.x=e,this.xBase=e,this.xOffset=0,this}getXBase(){return this.xBase}setXBase(e){this.xBase=e,this.x=e+this.xOffset}getXOffset(){return this.xOffset}setXOffset(e){this.xOffset=e,this.x=this.xBase+e}getWidth(){return this.width+this.padding*2}setPadding(e){return this.padding=e,this}getMaxTicks(){return this.maxTicks}getMinTicks(){return this.minTicks}getMaxTickable(){return this.maxTickable}getMinTickable(){return this.minTickable}getTickables(){return this.tickables}getTickableForVoice(e){return this.tickablesByVoice[e]}getTickablesByVoice(){return this.tickablesByVoice}getCenterAlignedTickables(){return this.tickables.filter(e=>e.isCenterAligned())}getMetrics(){const{width:e,glyphPx:n,notePx:i,leftDisplacedHeadPx:r,rightDisplacedHeadPx:s,modLeftPx:o,modRightPx:a,totalLeftPx:l,totalRightPx:d}=this;return{width:e,glyphPx:n,notePx:i,leftDisplacedHeadPx:r,rightDisplacedHeadPx:s,modLeftPx:o,modRightPx:a,totalLeftPx:l,totalRightPx:d}}getCurrentTick(){return this.currentTick}setCurrentTick(e){this.currentTick=e,this.preFormatted=!1}addTickable(e,n){if(!e)throw new P("BadArgument","Invalid tickable added.");if(!e.shouldIgnoreTicks()){const i=e.getTicks();i.greaterThan(this.maxTicks)&&(this.maxTicks=i.clone(),this.maxTickable=e),this.minTicks===void 0?(this.minTicks=i.clone(),this.minTickable=e):i.lessThan(this.minTicks)&&(this.minTicks=i.clone(),this.minTickable=e)}return e.setTickContext(this),this.tickables.push(e),this.tickablesByVoice[n??0]=e,this.preFormatted=!1,this}preFormat(){var e;if(this.preFormatted)return this;for(let n=0;n<this.tickables.length;++n){const i=this.tickables[n];i.preFormat();const r=i.getMetrics();this.leftDisplacedHeadPx=Math.max(this.leftDisplacedHeadPx,r.leftDisplacedHeadPx),this.rightDisplacedHeadPx=Math.max(this.rightDisplacedHeadPx,r.rightDisplacedHeadPx),this.notePx=Math.max(this.notePx,r.notePx),this.glyphPx=Math.max(this.glyphPx,(e=r.glyphWidth)!==null&&e!==void 0?e:0),this.modLeftPx=Math.max(this.modLeftPx,r.modLeftPx),this.modRightPx=Math.max(this.modRightPx,r.modRightPx),this.totalLeftPx=Math.max(this.totalLeftPx,r.modLeftPx+r.leftDisplacedHeadPx),this.totalRightPx=Math.max(this.totalRightPx,r.modRightPx+r.rightDisplacedHeadPx),this.width=this.notePx+this.totalLeftPx+this.totalRightPx}return this}postFormat(){return this.postFormatted?this:(this.postFormatted=!0,this)}getFormatterMetrics(){return this.formatterMetrics}move(e,n,i){this.setX(this.getX()+e),this.getFormatterMetrics().freedom.left+=e,this.getFormatterMetrics().freedom.right-=e,n&&(n.getFormatterMetrics().freedom.right+=e),i&&(i.getFormatterMetrics().freedom.left-=e)}getDeviationCost(){return wo(this.tickables.map(e=>e.getFormatterMetrics().space.deviation))}getAverageDeviationCost(){return this.tickables.length?this.getDeviationCost()/this.tickables.length:0}}function SB(...t){Nf.DEBUG&&Ge("VexFlow.Crescendo",t)}function AB(t,e){const n=e.beginX,i=e.endX,r=e.y,s=e.height/2;t.beginPath(),e.reverse?(t.moveTo(n,r-s),t.lineTo(i,r),t.lineTo(n,r+s)):(t.moveTo(i,r-s),t.lineTo(n,r),t.lineTo(i,r+s)),t.stroke(),t.closePath()}class Nf extends st{static get CATEGORY(){return"Crescendo"}constructor(e){var n;super(e),this.options={extendLeft:0,extendRight:0,yShift:0},this.decrescendo=!1,this.line=(n=e.line)!==null&&n!==void 0?n:0,this.height=15}setLine(e){return this.line=e,this}setHeight(e){return this.height=e,this}setDecrescendo(e){return this.decrescendo=e,this}preFormat(){return this.preFormatted=!0,this}draw(){const e=this.checkContext(),n=this.checkStave();this.setRendered();const i=this.getTickContext(),r=qo.getNextContext(i),s=this.getAbsoluteX(),o=r?r.getX():n.getX()+n.getWidth(),a=n.getYForLine(this.line+-3)+1;SB("Drawing ",this.decrescendo?"decrescendo ":"crescendo ",this.height,"x",s-o),AB(e,{beginX:s-this.options.extendLeft,endX:o+this.options.extendRight,y:a+this.options.yShift,height:this.height,reverse:this.decrescendo})}}Nf.DEBUG=!1;var On;(function(t){t[t.NEAR_HEAD=1]="NEAR_HEAD",t[t.NEAR_TOP=2]="NEAR_TOP"})(On||(On={}));class Ml extends Q{static get CATEGORY(){return"Curve"}static get Position(){return On}static get PositionString(){return{nearHead:On.NEAR_HEAD,nearTop:On.NEAR_TOP}}constructor(e,n,i){super(),this.renderOptions=Object.assign({thickness:2,xShift:0,yShift:10,position:On.NEAR_HEAD,positionEnd:On.NEAR_HEAD,invert:!1,cps:[{x:0,y:10},{x:0,y:10}],openingDirection:"auto"},i),this.setNotes(e,n)}setNotes(e,n){if(!e&&!n)throw new P("BadArguments","Curve needs to have either `from` or `to` set.");return this.from=e,this.to=n,this}isPartial(){return!this.from||!this.to}renderCurve(e){var n,i;const r=this.checkContext(),s=this.renderOptions.xShift,o=this.renderOptions.yShift*e.direction,a=e.firstX+s,l=e.firstY+o,d=e.lastX-s,f=e.lastY+o,u=this.renderOptions.thickness,c=this.renderOptions.cps,{x:h,y:g}=c[0],{x:E,y:p}=c[1],m=(d-a)/(c.length+2);r.beginPath(),r.moveTo(a,l),r.bezierCurveTo(a+m+h,l+g*e.direction,d-m+E,f+p*e.direction,d,f),!((n=this.style)===null||n===void 0)&&n.lineDash||r.bezierCurveTo(d-m+E,f+(p+u)*e.direction,a+m+h,l+(g+u)*e.direction,a,l),r.stroke(),r.closePath(),!((i=this.style)===null||i===void 0)&&i.lineDash||r.fill()}draw(){this.checkContext(),this.setRendered();const e=this.from,n=this.to;let i,r,s,o,a=0,l="baseY",d="baseY";function f(h){return typeof h=="string"?Ml.PositionString[h]:h}const u=f(this.renderOptions.position),c=f(this.renderOptions.positionEnd);return u===On.NEAR_TOP&&(l="topY",d="topY"),c===On.NEAR_HEAD?d="baseY":c===On.NEAR_TOP&&(d="topY"),e?(i=e.getTieRightX(),a=e.getStemDirection(),s=e.getStemExtents()[l]):(i=n.checkStave().getTieStartX(),s=n.getStemExtents()[l]),n?(r=n.getTieLeftX(),a=n.getStemDirection(),o=n.getStemExtents()[d]):(r=e.checkStave().getTieEndX(),o=e.getStemExtents()[d]),this.renderOptions.openingDirection==="up"&&(a=1),this.renderOptions.openingDirection==="down"&&(a=-1),this.renderCurve({firstX:i,lastX:r,firstY:s,lastY:o,direction:a*(this.renderOptions.invert===!0?-1:1)}),!0}}class Hi extends q{static get CATEGORY(){return"Dot"}static getDots(e){return e.getModifiersByType(Hi.CATEGORY)}static buildAndAttach(e,n){for(const i of e)if(n!=null&&n.all)for(let r=0;r<i.keys.length;r++){const s=new Hi;i.addModifier(s,r)}else if((n==null?void 0:n.index)!==void 0){const r=new Hi;i.addModifier(r,n==null?void 0:n.index)}else{const r=new Hi;i.addModifier(r,0)}}static format(e,n){const i=n.rightShift,r=1;if(!e||e.length===0)return!1;const s=[],o={};for(let h=0;h<e.length;++h){const g=e[h],E=g.getNote();let p,m;if(ai(E)){const A=g.checkIndex();p=E.getKeyProps()[A],m=E.getFirstDotPx()}else if(wn(E))p={line:.5},m=i;else throw new P("Internal","Unexpected instance.");const b=E.getAttribute("id");s.push({line:p.line,note:E,noteId:b,dot:g}),o[b]=Math.max(o[b]||m,m)}s.sort((h,g)=>g.line-h.line);let a=i,l=0,d=null,f=null,u=null,c=0;for(let h=0;h<s.length;++h){const{dot:g,note:E,noteId:p,line:m}=s[h];(m!==d||E!==f)&&(a=o[p]),!E.isRest()&&m!==d&&(Math.abs(m%1)===.5?c=0:(c=.5,(f!==null&&!f.isRest()&&d!==null&&d-m===.5||m+c===u)&&(c=-.5))),E.isRest()?g.dotShiftY+=-c:g.dotShiftY=-c,u=m+c,g.setXShift(a),a+=g.getWidth()+r,l=a>l?a:l,d=m,f=E}return n.rightShift+=l,!0}constructor(){super(),this.position=q.Position.RIGHT,this.setText(C.augmentationDot),this.dotShiftY=0}setNote(e){return this.note=e,this.font=e.font,this}setDotShiftY(e){return this.dotShiftY=e,this}draw(){const e=this.checkContext(),n=this.checkAttachedNote();this.setRendered();const r=n.checkStave().getSpacingBetweenLines(),s=n.getModifierStartXY(this.position,this.index,{forceFlagRight:!0});wn(n)&&(s.y=n.getStemExtents().baseY),this.x=s.x,this.y=s.y+this.dotShiftY*r,this.renderText(e,0,0)}}class Pl extends q{static get CATEGORY(){return"FretHandFinger"}static format(e,n){const{leftShift:i,rightShift:r}=n,s=1;if(!e||e.length===0)return!1;const o=[];let a=null,l=0,d=0;for(let p=0;p<e.length;++p){const m=e[p],b=m.getNote(),A=m.getPosition(),S=m.checkIndex(),w=b.getKeyProps()[S],D=W.get("FretHandFinger.fontSize");if(m.position===Fe.ABOVE&&(n.topTextLine+=D/k.STAVE_LINE_DISTANCE+.5),m.position===Fe.BELOW&&(n.textLine+=D/k.STAVE_LINE_DISTANCE+.5),b!==a){for(let x=0;x<b.keys.length;++x)i===0&&(l=Math.max(b.getLeftDisplacedHeadPx(),l)),r===0&&(d=Math.max(b.getRightDisplacedHeadPx(),d));a=b}o.push({note:b,num:m,pos:A,line:w.line,shiftL:l,shiftR:d})}o.sort((p,m)=>m.line-p.line);let f=0,u=0,c=0,h=0,g=null,E=null;for(let p=0;p<o.length;++p){let m=0;const{note:b,pos:A,num:S,line:w,shiftL:D,shiftR:x}=o[p];(w!==g||b!==E)&&(f=i+D,u=r+x);const F=S.getWidth()+s;A===q.Position.LEFT?(S.setXShift(i+f),m=i+F,c=m>c?m:c):A===q.Position.RIGHT&&(S.setXShift(u),m=d+F,h=m>h?m:h),g=w,E=b}return n.leftShift+=c,n.rightShift+=h,!0}static easyScoreHook({fingerings:e}={},n,i){e==null||e.split(",").map(r=>{const s=r.trim().split("."),o={number:s[0]};return s[1]&&(o.position=s[1]),i.getFactory().Fingering(o)}).map((r,s)=>n.addModifier(r,s))}constructor(e){super(),this.setFretHandFinger(e),this.position=q.Position.LEFT,this.xOffset=0,this.yOffset=0}setFretHandFinger(e){return this.text=e,this}getFretHandFinger(){return this.text}setOffsetX(e){return this.xOffset=e,this}setOffsetY(e){return this.yOffset=e,this}draw(){const e=this.checkContext(),n=this.checkAttachedNote();this.setRendered();const i=n.getModifierStartXY(this.position,this.index);let r=i.x+this.xOffset,s=i.y+this.yOffset+5;switch(this.position){case q.Position.ABOVE:r-=4,s-=12;break;case q.Position.BELOW:r-=2,s+=10;break;case q.Position.LEFT:r-=this.width;break;case q.Position.RIGHT:r+=1;break;default:throw new P("InvalidPosition",`The position ${this.position} does not exist`)}this.renderText(e,r,s)}}function rE(...t){kl.DEBUG&&Ge("VexFlow.Parser",t)}const Oa=-1;function iu(t){if("matchedString"in t)return t.matchedString;if("results"in t)return iu(t.results);const e=t;return e.length===1?iu(e[0]):e.length===0?null:e.map(iu)}class kl{constructor(e){this.grammar=e,this.line="",this.pos=0,this.errorPos=Oa}parse(e){this.line=e,this.pos=0,this.errorPos=Oa;const n=this.expect(this.grammar.begin());return n.errorPos=this.errorPos,n}matchFail(e){this.errorPos===Oa&&(this.errorPos=this.pos),this.pos=e}matchSuccess(){this.errorPos=Oa}matchToken(e,n=!1){const i=n?new RegExp("^(("+e+"))"):new RegExp("^(("+e+")\\s*)"),s=this.line.slice(this.pos).match(i);return s!==null?{success:!0,matchedString:s[2],incrementPos:s[1].length,pos:this.pos}:{success:!1,pos:this.pos}}expectOne(e,n=!1){const i=[],r=this.pos;let s=!0,o=!1;if(n=n===!0||e.maybe===!0,e.expect)for(const f of e.expect){const u=this.pos,c=this.expect(f);if(c.success){if(i.push(c),o=!0,e.or)break}else if(s=!1,!e.or){this.pos=u;break}}const a=e.or&&o||s,l=a||n===!0,d=a?1:0;return n&&!a&&(this.pos=r),l?this.matchSuccess():this.matchFail(r),{success:l,results:i,numMatches:d}}expectOneOrMore(e,n=!1){const i=[],r=this.pos;let s=0,o=!0;do{const l=this.expectOne(e);l.success&&l.results?(s++,i.push(l.results)):o=!1}while(o);const a=s>0||n===!0;return n&&!(s>0)&&(this.pos=r),a?this.matchSuccess():this.matchFail(r),{success:a,results:i,numMatches:s}}expectZeroOrMore(e){return this.expectOneOrMore(e,!0)}expect(e){if(rE("Evaluating rule function:",e),!e)throw new P("Invalid rule function");let n;const i=e.bind(this.grammar)();if(i.token)n=this.matchToken(i.token,i.noSpace===!0),n.success&&(this.pos+=n.incrementPos);else if(i.expect)i.oneOrMore?n=this.expectOneOrMore(i):i.zeroOrMore?n=this.expectZeroOrMore(i):n=this.expectOne(i);else throw rE(i),new P("Bad grammar! No `token` or `expect` property "+i);const r=[];return n.matches=r,n.results&&n.results.forEach(s=>r.push(iu(s))),i.run&&n.success&&i.run({matches:r}),n}}kl.DEBUG=!1;function Pn(...t){Ll.DEBUG&&Ge("VexFlow.EasyScore",t)}class vB{constructor(e){this.builder=e}begin(){return this.LINE}LINE(){return{expect:[this.PIECE,this.PIECES,this.EOL]}}PIECE(){return{expect:[this.CHORDORNOTE,this.PARAMS],run:()=>this.builder.commitPiece()}}PIECES(){return{expect:[this.COMMA,this.PIECE],zeroOrMore:!0}}PARAMS(){return{expect:[this.DURATION,this.TYPE,this.DOTS,this.OPTS]}}CHORDORNOTE(){return{expect:[this.CHORD,this.SINGLENOTE],or:!0}}CHORD(){return{expect:[this.LPAREN,this.NOTES,this.RPAREN],run:e=>this.builder.addChord(e.matches[1])}}NOTES(){return{expect:[this.NOTE],oneOrMore:!0}}NOTE(){return{expect:[this.NOTENAME,this.ACCIDENTAL,this.OCTAVE]}}SINGLENOTE(){return{expect:[this.NOTENAME,this.ACCIDENTAL,this.OCTAVE],run:e=>{const n=e;this.builder.addSingleNote(n.matches[0],n.matches[1],n.matches[2])}}}ACCIDENTAL(){return{expect:[this.MICROTONES,this.ACCIDENTALS],maybe:!0,or:!0}}DOTS(){return{expect:[this.DOT],zeroOrMore:!0,run:e=>this.builder.setNoteDots(e.matches)}}TYPE(){return{expect:[this.SLASH,this.MAYBESLASH,this.TYPES],maybe:!0,run:e=>this.builder.setNoteType(e.matches[2])}}DURATION(){return{expect:[this.SLASH,this.DURATIONS],maybe:!0,run:e=>this.builder.setNoteDuration(e.matches[1])}}OPTS(){return{expect:[this.LBRACKET,this.KEYVAL,this.KEYVALS,this.RBRACKET],maybe:!0}}KEYVALS(){return{expect:[this.COMMA,this.KEYVAL],zeroOrMore:!0}}KEYVAL(){const e=n=>n.slice(1,-1);return{expect:[this.KEY,this.EQUALS,this.VAL],run:n=>this.builder.addNoteOption(n.matches[0],e(n.matches[2]))}}VAL(){return{expect:[this.SVAL,this.DVAL],or:!0}}KEY(){return{token:"[a-zA-Z][a-zA-Z0-9]*"}}DVAL(){return{token:'["][^"]*["]'}}SVAL(){return{token:"['][^']*[']"}}NOTENAME(){return{token:"[a-gA-G]"}}OCTAVE(){return{token:"[0-9]+"}}ACCIDENTALS(){return{token:"bb|b|##|#|n"}}MICROTONES(){return{token:"bbs|bss|bs|db|d|\\+\\+-|\\+-|\\+\\+|\\+|k|o"}}DURATIONS(){return{token:"[0-9whq]+"}}TYPES(){return{token:"[rRsSmMhHgG]"}}LPAREN(){return{token:"[(]"}}RPAREN(){return{token:"[)]"}}COMMA(){return{token:"[,]"}}DOT(){return{token:"[.]"}}SLASH(){return{token:"[/]"}}MAYBESLASH(){return{token:"[/]?"}}EQUALS(){return{token:"[=]"}}LBRACKET(){return{token:"\\["}}RBRACKET(){return{token:"\\]"}}EOL(){return{token:"$"}}}class CB{constructor(e){this.chord=[],this.dots=0,this.options={},this.duration=e}}class wB{constructor(e){this.commitHooks=[],this.factory=e,this.reset()}reset(e){this.options=Object.assign({stem:"auto",clef:"treble"},e),this.elements={notes:[],accidentals:[]},this.rollingDuration="8",this.resetPiece()}getFactory(){return this.factory}getElements(){return this.elements}addCommitHook(e){this.commitHooks.push(e)}resetPiece(){Pn("resetPiece"),this.piece=new CB(this.rollingDuration)}setNoteDots(e){Pn("setNoteDots:",e),e&&(this.piece.dots=e.length)}setNoteDuration(e){Pn("setNoteDuration:",e),this.rollingDuration=this.piece.duration=e||this.rollingDuration}setNoteType(e){Pn("setNoteType:",e),e&&(this.piece.type=e)}addNoteOption(e,n){Pn("addNoteOption: key:",e,"value:",n),this.piece.options[e]=n}addNote(e,n,i){Pn("addNote:",e,n,i),this.piece.chord.push({key:e,accid:n,octave:i})}addSingleNote(e,n,i){Pn("addSingleNote:",e,n,i),this.addNote(e,n,i)}addChord(e){Pn("startChord"),typeof e[0]!="object"?this.addSingleNote(e[0]):e.forEach(n=>{n&&this.addNote(...n)}),Pn("endChord")}commitPiece(){Pn("commitPiece");const{factory:e}=this;if(!e)return;const n=Object.assign(Object.assign({},this.options),this.piece.options),i=Xe(n.stem,"BadArguments","options.stem is not defined").toLowerCase(),r=Xe(n.clef,"BadArguments","options.clef is not defined").toLowerCase(),{chord:s,duration:o,dots:a,type:l}=this.piece,d=De.accidentals,f=s.map(g=>{var E;return g.key+(d.includes((E=g.accid)!==null&&E!==void 0?E:"")?g.accid:"")+"/"+g.octave}),u=i==="auto",c=(l==null?void 0:l.toLowerCase())==="g"?e.GhostNote({duration:o,dots:a}):e.StaveNote({keys:f,duration:o,dots:a,type:l,clef:r,autoStem:u});u||c.setStemDirection(i==="up"?I.UP:I.DOWN);const h=[];s.forEach((g,E)=>{const p=g.accid;if(typeof p=="string"){const m=e.Accidental({type:p});c.addModifier(m,E),h.push(m)}else h.push(void 0)});for(let g=0;g<a;g++)Hi.buildAndAttach([c],{all:!0});this.commitHooks.forEach(g=>g(n,c,this)),this.elements.notes.push(c),this.elements.accidentals.push(h),this.resetPiece()}}function DB(t,e){t.id!==void 0&&e.setAttribute("id",t.id)}const xB=/\s*,\s*/;function BB(t,e){t.class!==void 0&&t.class.split(xB).forEach(n=>e.addClass(n))}class Ll{constructor(e={}){this.defaults={clef:"treble",time:"4/4",stem:"auto"},this.setOptions(e)}set(e){return this.defaults=Object.assign(Object.assign({},this.defaults),e),this}setOptions(e){var n,i;const r=e.factory,s=(n=e.builder)!==null&&n!==void 0?n:new wB(r);return this.options=Object.assign(Object.assign({commitHooks:[DB,BB,ui.easyScoreHook,Pl.easyScoreHook],throwOnError:!1},e),{factory:r,builder:s}),this.factory=r,this.builder=s,this.grammar=new vB(this.builder),this.parser=new kl(this.grammar),(i=this.options.commitHooks)===null||i===void 0||i.forEach(o=>this.addCommitHook(o)),this}setContext(e){return this.factory.setContext(e),this}parse(e,n={}){this.builder.reset(n);const i=this.parser.parse(e);if(!i.success&&this.options.throwOnError)throw Pn(i),new P("Error parsing line: "+e);return i}beam(e,n){return this.factory.Beam({notes:e,options:n}),e}tuplet(e,n){return this.factory.Tuplet({notes:e,options:n}),e}notes(e,n={}){return n=Object.assign({clef:this.defaults.clef,stem:this.defaults.stem},n),this.parse(e,n),this.builder.getElements().notes}voice(e,n={}){return n=Object.assign({time:this.defaults.time},n),this.factory.Voice(n).addTickables(e)}addCommitHook(e){this.builder.addCommitHook(e)}}Ll.DEBUG=!1;function TB(...t){Ol.DEBUG&&Ge("VexFlow.NoteHead",t)}class Ol extends st{static get CATEGORY(){return"NoteHead"}constructor(e){var n;super(e),this.customGlyph=!1,this.ledger={"":"","":""},this.index=e.index,this.x=e.x||0,this.y=e.y||0,e.noteType&&(this.noteType=e.noteType),this.displaced=e.displaced||!1,this.stemDirection=e.stemDirection||I.UP,this.line=e.line||0,this.glyphProps=st.getGlyphProps(this.duration,this.noteType),Xe(this.glyphProps,"BadArguments",`No glyph found for duration '${this.duration}' and type '${this.noteType}'`),(this.line>5||this.line<0)&&this.ledger[this.glyphProps.codeHead]&&(this.glyphProps.codeHead=this.ledger[this.glyphProps.codeHead]),this.text=this.glyphProps.codeHead,e.customGlyphCode&&(this.customGlyph=!0,this.text=e.customGlyphCode),this.setStyle((n=e.style)!==null&&n!==void 0?n:{}),this.slashed=e.slashed||!1,this.renderOptions=Object.assign({},this.renderOptions)}getWidth(){return this.width}isDisplaced(){return this.displaced===!0}getLine(){return this.line}setLine(e){return this.line=e,this}getAbsoluteX(){const e=this.preFormatted?super.getAbsoluteX():this.x,n=I.WIDTH/2;return e+(this.displaced?(this.width-n)*this.stemDirection:0)}setStave(e){const n=this.getLine();return this.stave=e,this.stave&&(this.setY(this.stave.getYForNote(n)),this.setContext(this.stave.getContext())),this}preFormat(){return this.preFormatted?this:(this.preFormatted=!0,this)}draw(){var e;const n=this.checkContext();this.setRendered(),n.openGroup("notehead",this.getAttribute("id")),TB("Drawing note head '",this.noteType,this.duration,"' at",this.x,this.y),this.x=this.getAbsoluteX(),this.renderText(n,0,0),(e=this.parent)===null||e===void 0||e.drawModifiers(this),n.closeGroup()}}Ol.DEBUG=!1;function NB(...t){Ff.DEBUG&&Ge("VexFlow.Flag",t)}class Ff extends Q{static get CATEGORY(){return"Flag"}draw(){const e=this.checkContext();this.setRendered(),e.openGroup("flag",this.getAttribute("id")),NB("Drawing flag '",this.text,"' at",this.x,this.y),this.renderText(e,0,0),e.closeGroup()}}Ff.DEBUG=!1;class Mf extends st{static get CATEGORY(){return"StemmableNote"}constructor(e){super(e),this.flag=new Ff}getStem(){return this.stem}checkStem(){if(!this.stem)throw new P("NoStem","No stem attached to instance");return this.stem}setStem(e){return this.stem=e,this.addChild(e),this}buildStem(){const e=new I;return this.setStem(e),this}buildFlag(){var e,n,i;const{glyphProps:r}=this;if(this.hasFlag()){const s=this.getStemDirection()===I.DOWN?String.fromCodePoint(((n=(e=r.codeFlagUp)===null||e===void 0?void 0:e.codePointAt(0))!==null&&n!==void 0?n:-1)+1):(i=r.codeFlagUp)!==null&&i!==void 0?i:C.null;this.flag.setText(s),this.flag.fontInfo=this.fontInfo}}getBaseCustomNoteHeadGlyphProps(){return this.getStemDirection()===I.DOWN?this.customGlyphs[this.customGlyphs.length-1]:this.customGlyphs[0]}getStemLength(){return I.HEIGHT+this.getStemExtension()}getBeamCount(){const e=this.getGlyphProps();return e?e.beamCount:0}getStemMinimumLength(){const e=k.durationToFraction(this.duration),n=this.beam===void 0;let i=e.value()<=1?0:20;switch(this.duration){case"8":case"16":i=n?35:25;break;case"32":i=n?45:35;break;case"64":i=n?50:40;break;case"128":i=n?55:45;break}return i}getStemDirection(){if(!this.stemDirection)throw new P("NoStem","No stem attached to this note.");return this.stemDirection}setStemDirection(e){if(e||(e=I.UP),e!==I.UP&&e!==I.DOWN)throw new P("BadArgument",`Invalid stem direction: ${e}`);return this.stemDirection=e,this.reset(),this.hasFlag()&&this.buildFlag(),this.beam=void 0,this.stem&&(this.stem.setDirection(e),this.stem.setExtension(this.getStemExtension())),this.preFormatted&&this.preFormat(),this}getStemX(){const e=this.getAbsoluteX()+this.xShift,n=this.getAbsoluteX()+this.xShift+this.getGlyphWidth();return this.stemDirection===I.DOWN?e:n}getCenterGlyphX(){return this.getAbsoluteX()+this.xShift+this.getGlyphWidth()/2}getStemExtension(){const e=this.getGlyphProps(),n=this.flag.getHeight(),i=this.getFontScale();return this.stemExtensionOverride!==void 0?this.stemExtensionOverride:this.beam?e.stemBeamExtension*i:n>I.HEIGHT*i?n-I.HEIGHT*i:0}setStemLength(e){return this.stemExtensionOverride=e-I.HEIGHT,this}getStemExtents(){if(!this.stem)throw new P("NoStem","No stem attached to this note.");return this.stem.getExtents()}getYForTopText(e){const n=this.checkStave();if(this.hasStem()){const i=this.getStemExtents();if(!i)throw new P("InvalidState","Stem does not have extents.");return Math.min(n.getYForTopText(e),i.topY-this.renderOptions.annotationSpacing*(e+1))}else return n.getYForTopText(e)}getYForBottomText(e){const n=this.checkStave();if(this.hasStem()){const i=this.getStemExtents();if(!i)throw new P("InvalidState","Stem does not have extents.");return Math.max(n.getYForTopText(e),i.baseY+this.renderOptions.annotationSpacing*e)}else return n.getYForBottomText(e)}hasFlag(){return this.glyphProps.codeFlagUp!==void 0&&!this.beam&&!this.isRest()}postFormat(){var e;return(e=this.beam)===null||e===void 0||e.postFormat(),this.postFormatted=!0,this}drawStem(e){var n;this.checkContext(),this.setRendered(),this.setStem(new I(e)),(n=this.stem)===null||n===void 0||n.setContext(this.getContext()).drawWithStyle()}}function FB(...t){Bn.DEBUG&&Ge("VexFlow.StaveNote",t)}const MB=(t,e)=>e===(t.getStemDirection()===I.UP?t.keyProps.length-1:0);function ya(t,e,n){const i=n;t.line+=i,t.maxLine+=i,t.minLine+=i,t.note.setKeyLine(0,t.note.getKeyLine(0)+i)}function PB(t,e,n){const i=t.line-wf(e.minLine,n.maxLine);t.note.setKeyLine(0,t.note.getKeyLine(0)-i),t.line-=i,t.maxLine-=i,t.minLine-=i}class Bn extends Mf{static get CATEGORY(){return"StaveNote"}static get LEDGER_LINE_OFFSET(){return 3}static get minNoteheadPadding(){return W.get("NoteHead.minPadding")}static format(e,n){if(!e||e.length<2)return!1;const i=[];for(let u=0;u<e.length;u++){const c=e[u].sortedKeyProps,h=c[0].keyProps.line;let g=c[c.length-1].keyProps.line;const E=e[u].getStemDirection(),p=e[u].getStemLength()/10,m=e[u].getStemMinimumLength()/10;let b;e[u].isRest()?(b=h+Math.ceil(e[u]._noteHeads[0].getTextMetrics().actualBoundingBoxAscent/k.STAVE_LINE_DISTANCE),g=h-Math.ceil(e[u]._noteHeads[0].getTextMetrics().actualBoundingBoxDescent/k.STAVE_LINE_DISTANCE)):(b=E===1?c[c.length-1].keyProps.line+p:c[c.length-1].keyProps.line,g=E===1?c[0].keyProps.line:c[0].keyProps.line-p),i.push({line:c[0].keyProps.line,maxLine:b,minLine:g,isrest:e[u].isRest(),stemDirection:E,stemMax:p,stemMin:m,voiceShift:e[u].getVoiceShiftWidth(),isDisplaced:e[u].isDisplaced(),note:e[u]})}let r=0,s,o,a;const l=[!1,!1,!1];for(let u=0;u<i.length;u++)l[u]=i[u].note.renderOptions.draw!==!1;if(l[0]&&l[1]&&l[2])r=3,s=i[0],o=i[1],a=i[2];else if(l[0]&&l[1])r=2,s=i[0],a=i[1];else if(l[0]&&l[2])r=2,s=i[0],a=i[2];else if(l[1]&&l[2])r=2,s=i[1],a=i[2];else return!0;r===2&&s.stemDirection===-1&&a.stemDirection===1&&(s=i[1],a=i[0]);const d=Math.max(s.voiceShift,a.voiceShift);let f=0;if(r===2){const u=s.note.hasStem()&&a.note.hasStem()&&s.stemDirection===a.stemDirection?0:.5;if(a.isrest&&s.isrest&&s.note.duration===a.note.duration)a.note.renderOptions.draw=!1;else if(s.minLine<=a.maxLine+u)if(s.isrest)ya(s,a,1);else if(a.isrest)ya(a,s,-1);else{const c=Math.abs(s.line-a.line);if(s.note.hasStem()&&a.note.hasStem()){const h=s.note.sortedKeyProps[0].keyProps.code,g=a.note.sortedKeyProps[a.note.sortedKeyProps.length-1].keyProps.code;!k.UNISON||h!==g||s.note.getModifiers().filter(E=>E.getCategory()==="Dot"&&E.getIndex()===0).length!==a.note.getModifiers().filter(E=>E.getCategory()==="Dot"&&E.getIndex()===0).length||c<1&&c>0||JSON.stringify(s.note.getStyle())!==JSON.stringify(a.note.getStyle())?(f=d+2,s.stemDirection===a.stemDirection?s.note.setXShift(f):a.note.setXShift(f)):s.note.voice!==a.note.voice&&s.stemDirection===a.stemDirection&&(s.line!==a.line?(f=d+2,s.note.setXShift(f)):a.stemDirection===1&&(a.stemDirection=-1,a.note.setStemDirection(-1)))}else c<1?(f=d+2,s.note.duration<a.note.duration?s.note.setXShift(f):a.note.setXShift(f)):s.note.hasStem()?(s.stemDirection=-s.note.getStemDirection(),s.note.setStemDirection(s.stemDirection)):a.note.hasStem()&&(a.stemDirection=-a.note.getStemDirection(),a.note.setStemDirection(a.stemDirection))}return n.rightShift+=f,!0}if(!o)throw new P("InvalidState","noteM not defined.");if(o.isrest&&!s.isrest&&!a.isrest&&(s.minLine<=o.maxLine||o.minLine<=a.maxLine)){const u=o.maxLine-o.minLine,c=s.minLine-a.maxLine;return u<c?PB(o,s,a):(f=d+2,o.note.setXShift(f),a.note.hasBeam()===!1&&(a.stemDirection=-1,a.note.setStemDirection(-1)),s.minLine<=a.maxLine&&s.note.hasBeam()===!1&&(s.stemDirection=1,s.note.setStemDirection(1))),n.rightShift+=f,!0}return s.isrest&&o.isrest&&a.isrest?(s.note.renderOptions.draw=!1,a.note.renderOptions.draw=!1,n.rightShift+=f,!0):(o.isrest&&s.isrest&&o.minLine<=a.maxLine&&(o.note.renderOptions.draw=!1),o.isrest&&a.isrest&&s.minLine<=o.maxLine&&(o.note.renderOptions.draw=!1),s.isrest&&s.minLine<=o.maxLine&&ya(s,o,1),a.isrest&&o.minLine<=a.maxLine&&ya(a,o,-1),(s.minLine<=o.maxLine+.5||o.minLine<=a.maxLine)&&(f=d+2,o.note.setXShift(f),a.note.hasBeam()===!1&&(a.stemDirection=-1,a.note.setStemDirection(-1)),s.minLine<=a.maxLine&&s.note.hasBeam()===!1&&(s.stemDirection=1,s.note.setStemDirection(1))),n.rightShift+=f,!0)}static postFormat(e){return e?(e.forEach(n=>n.postFormat()),!0):!1}constructor(e){var n,i,r;super(e),this.minLine=0,this.maxLine=0,this.sortedKeyProps=[],this.ledgerLineStyle={},this.clef=(n=e.clef)!==null&&n!==void 0?n:"treble",this.octaveShift=(i=e.octaveShift)!==null&&i!==void 0?i:0,this.glyphProps=st.getGlyphProps(this.duration,this.noteType),Xe(this.glyphProps,"BadArguments",`No glyph found for duration '${this.duration}' and type '${this.noteType}'`),this.displaced=!1,this.dotShiftY=0,this.useDefaultHeadX=!1,this._noteHeads=[],this.modifiers=[],this.renderOptions=Object.assign(Object.assign({},this.renderOptions),{strokePx:e.strokePx||Bn.LEDGER_LINE_OFFSET}),this.calculateKeyProps(),this.buildStem(),e.autoStem?this.autoStem():this.setStemDirection((r=e.stemDirection)!==null&&r!==void 0?r:I.UP),this.reset(),this.buildFlag()}reset(){super.reset();const e=this._noteHeads.map(i=>i.getStyle());this.buildNoteHeads(),this._noteHeads.forEach((i,r)=>{const s=e[r];s&&i.setStyle(s)});const n=this.stave;return n&&this.setStave(n),this.calcNoteDisplacements(),this}setBeam(e){return this.beam=e,this.calcNoteDisplacements(),this.stem&&this.stem.setExtension(this.getStemExtension()),this}buildStem(){return this.setStem(new I({hide:this.isRest()})),this}buildNoteHeads(){this._noteHeads=[];const e=this.getStemDirection(),n=this.getKeys();let i,r,s=!1,o,a,l;e===I.UP?(o=0,a=n.length,l=1):(o=n.length-1,a=-1,l=-1);for(let d=o;d!==a;d+=l){const f=this.sortedKeyProps[d].keyProps,u=f.line;i===void 0?i=u:(r=Math.abs(i-u),r===0||r===.5?s=!s:(s=!1,this.useDefaultHeadX=!0)),i=u;const c=new Ol({duration:this.duration,noteType:this.noteType,displaced:s,stemDirection:e,customGlyphCode:f.code,line:f.line});c.fontInfo=this.fontInfo,this.addChild(c),this._noteHeads[this.sortedKeyProps[d].index]=c}return this._noteHeads}autoStem(){this.setStemDirection(this.calculateOptimalStemDirection())}calculateOptimalStemDirection(){this.minLine=this.sortedKeyProps[0].keyProps.line,this.maxLine=this.sortedKeyProps[this.keyProps.length-1].keyProps.line;const e=3;return(this.minLine+this.maxLine)/2<e?I.UP:I.DOWN}calculateKeyProps(){var e;let n;for(let i=0;i<this.keys.length;++i){const r=this.keys[i],s={octaveShift:(e=this.octaveShift)!==null&&e!==void 0?e:0,duration:this.duration},o=k.keyProperties(r,this.clef,this.noteType,s);if(!o)throw new P("BadArguments",`Invalid key for note properties: ${r}`);o.key==="R"&&(this.duration==="1"||this.duration==="w"?o.line=4:o.line=3);const a=o.line;n===void 0?n=a:Math.abs(n-a)<1&&(this.displaced=!0,o.displaced=!0,this.keyProps.length>0&&(this.keyProps[i-1].displaced=!0)),n=a,this.keyProps.push(o)}this.keyProps.forEach((i,r)=>{this.sortedKeyProps.push({keyProps:i,index:r})}),this.sortedKeyProps.sort((i,r)=>i.keyProps.line-r.keyProps.line)}getBoundingBox(){const e=new oi(this.getAbsoluteX(),this.ys[0],0,0);this._noteHeads.forEach(r=>{e.mergeWith(r.getBoundingBox())});const{yTop:n,yBottom:i}=this.getNoteHeadBounds();if(!this.isRest()&&this.hasStem()){const r=this.stem.getHeight(),s=this.getStemDirection()===I.DOWN?n-r-this.flag.getTextMetrics().actualBoundingBoxDescent:i-r+this.flag.getTextMetrics().actualBoundingBoxAscent;e.mergeWith(new oi(this.getAbsoluteX(),s,0,0))}if(this.hasFlag()){const r=this.flag.getBoundingBox();e.mergeWith(r)}for(let r=0;r<this.modifiers.length;r++)e.mergeWith(this.modifiers[r].getBoundingBox());return e}getLineNumber(e){if(!this.keyProps.length)throw new P("NoKeyProps","Can't get bottom note line, because note is not initialized properly.");let n=this.keyProps[0].line;for(let i=0;i<this.keyProps.length;i++){const r=this.keyProps[i].line;e?r>n&&(n=r):r<n&&(n=r)}return n}isRest(){const e=this.glyphProps.codeHead;return e>=""&&e<=""}isChord(){return!this.isRest()&&this.keys.length>1}hasStem(){return this.glyphProps.stem}hasFlag(){return super.hasFlag()&&!this.isRest()}getStemX(){return this.noteType==="r"?this.getCenterGlyphX():super.getStemX()+(this.stemDirection?I.WIDTH/(2*-this.stemDirection):0)}getYForTopText(e){const n=this.getStemExtents();return Math.min(this.checkStave().getYForTopText(e),n.topY-this.renderOptions.annotationSpacing*(e+1))}getYForBottomText(e){const n=this.getStemExtents();return Math.max(this.checkStave().getYForTopText(e),n.baseY+this.renderOptions.annotationSpacing*e)}setStave(e){super.setStave(e);const n=this._noteHeads.map(i=>(i.setStave(e),i.getY()));if(this.setYs(n),this.stem){const{yTop:i,yBottom:r}=this.getNoteHeadBounds();this.stem.setYBounds(i,r)}return this}isDisplaced(){return this.displaced}setNoteDisplaced(e){return this.displaced=e,this}getTieRightX(){let e=this.getAbsoluteX();return e+=this.getGlyphWidth()+this.xShift+this.rightDisplacedHeadPx,this.modifierContext&&(e+=this.modifierContext.getRightShift()),e}getTieLeftX(){let e=this.getAbsoluteX();return e+=this.xShift-this.leftDisplacedHeadPx,e}getLineForRest(){let e=this.keyProps[0].line;if(this.keyProps.length>1){const n=this.keyProps[this.keyProps.length-1].line,i=Math.max(e,n),r=Math.min(e,n);e=wf(i,r)}return e}getModifierStartXY(e,n,i={}){if(!this.preFormatted)throw new P("UnformattedNote","Can't call GetModifierStartXY on an unformatted note");if(this.ys.length===0)throw new P("NoYValues","No Y-Values calculated for this note.");const{ABOVE:r,BELOW:s,LEFT:o,RIGHT:a}=q.Position;let l=0;e===o?l=-1*2:e===a?(l=this.getGlyphWidth()+this.xShift+2,this.stemDirection===I.UP&&this.hasFlag()&&(i.forceFlagRight||MB(this,n))&&(l+=this.flag.getWidth())):(e===s||e===r)&&(l=this.getGlyphWidth()/2);let d=0;switch(this._noteHeads[n].getText()){case C.restDoubleWhole:case C.restWhole:d+=.5;break;case C.restHalf:case C.restQuarter:case C.rest8th:case C.rest16th:d-=.5;break;case C.rest32nd:case C.rest64th:d-=1.5;break;case C.rest128th:d-=2.5;break}return{x:this.getAbsoluteX()+l,y:this.ys[n]+d*this.checkStave().getSpacingBetweenLines()}}setStyle(e){return super.setGroupStyle(e)}setStemStyle(e){const n=this.getStem();return n&&n.setStyle(e),this}getStemStyle(){var e;return(e=this.stem)===null||e===void 0?void 0:e.getStyle()}setLedgerLineStyle(e){this.ledgerLineStyle=e}getLedgerLineStyle(){return this.ledgerLineStyle}setFlagStyle(e){this.flag.setStyle(e)}getFlagStyle(){return this.flag.getStyle()}getGlyphWidth(){return this.noteHeads[0].getWidth()}setKeyStyle(e,n){return this._noteHeads[e].setStyle(n),this}setKeyLine(e,n){return this.keyProps[e].line=n,this.reset(),this}getKeyLine(e){return this.keyProps[e].line}getVoiceShiftWidth(){return this.getGlyphWidth()*(this.displaced?2:1)}calcNoteDisplacements(){this.setLeftDisplacedHeadPx(this.displaced&&this.stemDirection===I.DOWN?this.getGlyphWidth():0),this.setRightDisplacedHeadPx(!this.hasFlag()&&this.displaced&&this.stemDirection===I.UP?this.getGlyphWidth():0)}preFormat(){if(this.preFormatted)return;let e=0;this.modifierContext&&(this.modifierContext.preFormat(),this.modifierContext.getWidth()===0&&(e=Bn.minNoteheadPadding));let n=this.getGlyphWidth()+this.leftDisplacedHeadPx+this.rightDisplacedHeadPx+e;this.shouldDrawFlag()&&this.stemDirection===I.UP&&(n+=this.getGlyphWidth()),this.setWidth(n),this.preFormatted=!0}getNoteHeadBounds(){let e=1/0,n=-1/0,i,r,s=this.checkStave().getNumLines(),o=1,a,l,d=s,f=o;return this._noteHeads.forEach(u=>{const c=u.getLine(),h=u.getY();e=Math.min(h,e),n=Math.max(h,n),r===void 0&&u.isDisplaced()&&(r=u.getAbsoluteX()),i===void 0&&!u.isDisplaced()&&(i=u.getAbsoluteX()),s=Math.max(c,s),o=Math.min(c,o),u.isDisplaced()?(a=a===void 0?c:Math.max(c,a),l=l===void 0?c:Math.min(c,l)):(d=Math.max(c,d),f=Math.min(c,f))},this),{yTop:e,yBottom:n,displacedX:r,nonDisplacedX:i,highestLine:s,lowestLine:o,highestDisplacedLine:a,lowestDisplacedLine:l,highestNonDisplacedLine:d,lowestNonDisplacedLine:f}}getNoteHeadBeginX(){return this.getAbsoluteX()+this.xShift}getNoteHeadEndX(){return this.getNoteHeadBeginX()+this.getGlyphWidth()}get noteHeads(){return this._noteHeads.slice()}drawLedgerLines(){const e=this.checkStave(),{renderOptions:{strokePx:n}}=this,i=this.checkContext(),r=this.getGlyphWidth()+n*2,s=2*(this.getGlyphWidth()+n)-I.WIDTH/2;if(this.isRest())return;if(!i)throw new P("NoCanvasContext","Can't draw without a canvas context.");const{highestLine:o,lowestLine:a,highestDisplacedLine:l,highestNonDisplacedLine:d,lowestDisplacedLine:f,lowestNonDisplacedLine:u,displacedX:c,nonDisplacedX:h}=this.getNoteHeadBounds();if(o<6&&a>0)return;const g=Math.min(c??0,h??0),E=(m,b,A)=>{let S;A&&b?S=g-n:b?S=(h??0)-n:S=(c??0)-n;const w=b&&A?s:r;i.beginPath(),i.moveTo(S,m),i.lineTo(S+w,m),i.stroke()},p=Object.assign(Object.assign({},e.getDefaultLedgerLineStyle()),this.getLedgerLineStyle());i.save(),this.applyStyle(i,p);for(let m=6;m<=o;++m){const b=h!==void 0&&m<=d,A=l!==void 0&&m<=l;E(e.getYForNote(m),b,A)}for(let m=0;m>=a;--m){const b=h!==void 0&&m>=u,A=f!==void 0&&m>=f;E(e.getYForNote(m),b,A)}i.restore()}drawModifiers(e){const n=this.checkContext();for(let i=0;i<this.modifiers.length;i++){const r=this.modifiers[i],s=r.checkIndex();this._noteHeads[s]===e&&(r.setContext(n),r.drawWithStyle())}}shouldDrawFlag(){const e=this.stem!==void 0,n=this.glyphProps.codeFlagUp!==void 0,i=this.beam===void 0;return e&&n&&i&&!this.isRest()}drawFlag(){const e=this.checkContext();if(!e)throw new P("NoCanvasContext","Can't draw without a canvas context.");if(this.shouldDrawFlag()){const{yTop:n,yBottom:i}=this.getNoteHeadBounds(),r=this.stem.getHeight(),s=this.getStemX()-k.STEM_WIDTH/2,o=this.getStemDirection()===I.DOWN?n-r-this.flag.getTextMetrics().actualBoundingBoxDescent:i-r+this.flag.getTextMetrics().actualBoundingBoxAscent;this.flag.setContext(e).setX(s).setY(o).drawWithStyle()}}drawNoteHeads(){const e=this.checkContext();this._noteHeads.forEach(n=>{n.setContext(e).drawWithStyle()})}drawStem(e){const n=this.checkContext();e&&this.setStem(new I(e)),this.shouldDrawFlag()&&this.stem&&this.stem.adjustHeightForFlag(),this.stem&&this.stem.setContext(n).drawWithStyle()}getStemExtension(){const e=super.getStemExtension();if(!this.glyphProps.stem)return e;const n=this.getStemDirection();if(n!==this.calculateOptimalStemDirection())return e;let i;const r=3;n===I.UP?i=r-this.maxLine:i=this.minLine-r;const s=i-3.5;if(s<=0)return e;const o=this.getStave();let a=10;return o!==void 0&&(a=o.getSpacingBetweenLines()),e+s*a}draw(){if(this.renderOptions.draw===!1)return;if(this.ys.length===0)throw new P("NoYValues","Can't draw note without Y values.");const e=this.checkContext(),n=this.getNoteHeadBeginX(),i=this.hasStem()&&!this.beam;if(this._noteHeads.forEach(s=>s.setX(n)),this.stem){const s=this.getStemX();this.stem.setNoteHeadXBounds(s,s)}FB("Rendering ",this.isChord()?"chord :":"note :",this.keys),e.openGroup("stavenote",this.getAttribute("id")),this.drawLedgerLines(),i&&this.drawStem(),this.drawNoteHeads(),this.drawFlag();const r=this.getBoundingBox();e.pointerRect(r.getX(),r.getY(),r.getW(),r.getH()),e.closeGroup(),this.setRendered()}}Bn.DEBUG=!1;class yl extends Q{static get CATEGORY(){return"StaveTie"}constructor(e,n=""){super(),this.setNotes(e),this.text=n,this.renderOptions={cp1:8,cp2:12,shortTieCutoff:10,cp1Short:2,cp2Short:8,textShiftX:0,firstXShift:0,lastXShift:0,yShift:7,tieSpacing:0}}getDirection(){return this.direction!==void 0&&this.direction!==null?this.direction:this.notes.lastNote?this.notes.lastNote.getStemDirection():this.notes.firstNote?this.notes.firstNote.getStemDirection():0}setDirection(e){return this.direction=e,this}setNotes(e){if(!e.firstNote&&!e.lastNote)throw new P("BadArguments","Tie needs to have either firstNote or lastNote set.");if(e.firstIndexes||(e.firstIndexes=[0]),e.lastIndexes||(e.lastIndexes=[0]),e.firstIndexes.length!==e.lastIndexes.length)throw new P("BadArguments","Tied notes must have same number of indexes.");return this.notes=e,this}isPartial(){return!this.notes.firstNote||!this.notes.lastNote}renderTie(e){if(e.firstYs.length===0||e.lastYs.length===0)throw new P("BadArguments","No Y-values to render");const n=this.checkContext();let i=this.renderOptions.cp1,r=this.renderOptions.cp2;Math.abs(e.lastX-e.firstX)<this.renderOptions.shortTieCutoff&&(i=this.renderOptions.cp1Short,r=this.renderOptions.cp2Short);const s=this.renderOptions.firstXShift,o=this.renderOptions.lastXShift,a=this.renderOptions.yShift*e.direction,l=this.notes.firstIndexes,d=this.notes.lastIndexes;n.openGroup("stavetie",this.getAttribute("id"));for(let f=0;f<l.length;++f){const u=(e.lastX+o+(e.firstX+s))/2,c=e.firstYs[l[f]]+a,h=e.lastYs[d[f]]+a;if(isNaN(c)||isNaN(h))throw new P("BadArguments","Bad indexes for tie rendering.");const g=(c+h)/2+i*e.direction,E=(c+h)/2+r*e.direction;n.beginPath(),n.moveTo(e.firstX+s,c),n.quadraticCurveTo(u,g,e.lastX+o,h),n.quadraticCurveTo(u,E,e.firstX+s,c),n.closePath(),n.fill()}n.closeGroup()}renderTieText(e,n){var i,r,s;const o=this.checkContext();let a=(e+n)/2;a-=o.measureText(this.text).width/2;const l=(r=(i=this.notes.firstNote)===null||i===void 0?void 0:i.checkStave())!==null&&r!==void 0?r:(s=this.notes.lastNote)===null||s===void 0?void 0:s.checkStave();l&&(o.setFont(this.fontInfo),o.fillText(this.text,a+this.renderOptions.textShiftX,l.getYForTopText()-1))}getNotes(){return this.notes}getFirstX(){return this.notes.firstNote?this.notes.firstNote.getTieRightX()+this.renderOptions.tieSpacing:this.notes.lastNote?this.notes.lastNote.checkStave().getTieStartX():0}getLastX(){return this.notes.lastNote?this.notes.lastNote.getTieLeftX()+this.renderOptions.tieSpacing:this.notes.firstNote?this.notes.firstNote.checkStave().getTieEndX():0}getFirstYs(){return this.notes.firstNote?this.notes.firstNote.getYs():this.notes.lastNote?this.notes.lastNote.getYs():[0]}getLastYs(){return this.notes.lastNote?this.notes.lastNote.getYs():this.notes.firstNote?this.notes.firstNote.getYs():[0]}synchronizeIndexes(){if(!(this.notes.firstNote&&this.notes.lastNote)){if(!this.notes.firstNote&&!this.notes.lastNote)return;this.notes.firstNote?this.notes.lastIndexes=this.notes.firstIndexes:this.notes.firstIndexes=this.notes.lastIndexes}}draw(){this.checkContext(),this.setRendered(),this.synchronizeIndexes();const e=this.getFirstX(),n=this.getLastX();return this.renderTie({firstX:e,lastX:n,firstYs:this.getFirstYs(),lastYs:this.getLastYs(),direction:this.getDirection()}),this.renderTieText(e,n),!0}}class ws extends yl{static get CATEGORY(){return"TabTie"}static createHammeron(e){return new ws(e,"H")}static createPulloff(e){return new ws(e,"P")}constructor(e,n){super(e,n),this.renderOptions.cp1=9,this.renderOptions.cp2=11,this.renderOptions.yShift=3,this.direction=-1}}var yn;(function(t){t[t.STRICT=1]="STRICT",t[t.SOFT=2]="SOFT",t[t.FULL=3]="FULL"})(yn||(yn={}));class Un extends Q{static get CATEGORY(){return"Voice"}static get Mode(){return yn}constructor(e){super(),this.resolutionMultiplier=1,this.mode=yn.STRICT,this.preFormatted=!1,this.ticksUsed=new ue(0,1),this.largestTickWidth=0,this.tickables=[],this.options={softmaxFactor:k.SOFTMAX_FACTOR};let n;if(typeof e=="string"){const i=e.match(/(\d+)\/(\d+)/);i&&(n={numBeats:parseInt(i[1]),beatValue:parseInt(i[2])})}else n=e;this.time=Object.assign({numBeats:4,beatValue:4,resolution:k.RESOLUTION},n),this.totalTicks=new ue(this.time.numBeats*(this.time.resolution/this.time.beatValue),1),this.smallestTickCount=this.totalTicks.clone()}getTotalTicks(){return this.totalTicks}getTicksUsed(){return this.ticksUsed}getLargestTickWidth(){return this.largestTickWidth}getSmallestTickCount(){return this.smallestTickCount}getTickables(){return this.tickables}getMode(){return this.mode}setMode(e){return this.mode=e,this}getResolutionMultiplier(){return this.resolutionMultiplier}getActualResolution(){return this.resolutionMultiplier*this.time.resolution}setStave(e){return this.stave=e,this}getStave(){return this.stave}getBoundingBox(){const e=this.tickables[0].getBoundingBox();for(let n=1;n<this.tickables.length;++n){const i=this.tickables[n];!i.getStave()&&this.stave&&i.setStave(this.stave);const r=i.getBoundingBox();e.mergeWith(r)}return e}setStrict(e){return this.mode=e?yn.STRICT:yn.SOFT,this}isComplete(){return this.mode===yn.STRICT||this.mode===yn.FULL?this.ticksUsed.equals(this.totalTicks):!0}setSoftmaxFactor(e){return this.options.softmaxFactor=e,this.expTicksUsed=0,this}reCalculateExpTicksUsed(){const e=this.ticksUsed.value(),n=i=>Math.pow(this.options.softmaxFactor,i.getTicks().value()/e);return this.expTicksUsed=wo(this.tickables.map(n)),this.expTicksUsed}softmax(e){this.expTicksUsed||(this.expTicksUsed=this.reCalculateExpTicksUsed());const n=this.ticksUsed.value();return(s=>Math.pow(this.options.softmaxFactor,s/n))(e)/this.expTicksUsed}addTickable(e){if(!e.shouldIgnoreTicks()){const n=e.getTicks();if(this.ticksUsed.add(n),this.expTicksUsed=0,(this.mode===yn.STRICT||this.mode===yn.FULL)&&this.ticksUsed.greaterThan(this.totalTicks))throw this.ticksUsed.subtract(n),new P("BadArgument","Too many ticks.");n.lessThan(this.smallestTickCount)&&(this.smallestTickCount=n.clone()),this.resolutionMultiplier=this.ticksUsed.denominator,this.totalTicks.add(0,this.ticksUsed.denominator)}return this.tickables.push(e),e.setVoice(this),this}addTickables(e){for(let n=0;n<e.length;++n)this.addTickable(e[n]);return this}preFormat(){if(this.preFormatted)return this;const e=this.checkStave();return this.tickables.forEach(n=>{n.getStave()||n.setStave(e)}),this.preFormatted=!0,this}checkStave(){return Xe(this.stave,"NoStave","No stave attached to instance.")}draw(e=this.checkContext(),n){n=n??this.stave,this.setRendered();for(let i=0;i<this.tickables.length;++i){const r=this.tickables[i];n&&r.setStave(n),Xe(r.getStave(),"MissingStave","The voice cannot draw tickables without staves."),r.setContext(e),r.drawWithStyle()}}}function kB(...t){sa.DEBUG&&Ge("VexFlow.GraceNoteGroup",t)}class sa extends q{static get CATEGORY(){return"GraceNoteGroup"}static format(e,n){if(!e||e.length===0)return!1;const s=[];let o=null,a=0;for(let c=0;c<e.length;++c){const h=e[c],g=h.getNote(),E=ai(g),p=E?4:0;if(E&&g!==o){for(let m=0;m<g.keys.length;++m)a=Math.max(g.getLeftDisplacedHeadPx(),a);o=g}s.push({shift:a,gracenoteGroup:h,spacing:p})}let l=s[0].shift,d,f=!1,u=!1;for(let c=0;c<s.length;++c){const h=s[c].gracenoteGroup;h.position===q.Position.RIGHT?f=!0:u=!0,h.preFormat(),d=h.getWidth()+s[c].spacing,l=Math.max(d,l)}for(let c=0;c<s.length;++c){const h=s[c].gracenoteGroup;d=h.getWidth()+s[c].spacing,h.setSpacingFromNextModifier(l-Math.min(d,l)+Bn.minNoteheadPadding)}return f&&(n.rightShift+=l),u&&(n.leftShift+=l),!0}constructor(e,n){return super(),this.preFormatted=!1,this.position=q.Position.LEFT,this.graceNotes=e,this.width=0,this.showSlur=n,this.slur=void 0,this.voice=new Un({numBeats:4,beatValue:4,resolution:k.RESOLUTION}).setStrict(!1),this.renderOptions={slurYShift:0},this.beams=[],this.voice.addTickables(this.graceNotes),this}preFormat(){this.preFormatted||(this.formatter||(this.formatter=new Pt),this.formatter.joinVoices([this.voice]).format([this.voice],0,{}),this.setWidth(this.formatter.getMinTotalWidth()),this.preFormatted=!0)}beamNotes(e){if(e=e||this.graceNotes,e.length>1){const n=new er(e);n.renderOptions.beamWidth=3,n.renderOptions.partialBeamLength=4,this.beams.push(n)}return this}setWidth(e){return this.width=e,this}getWidth(){return this.width+Bn.minNoteheadPadding}getGraceNotes(){return this.graceNotes}draw(){const e=this.checkContext(),n=this.checkAttachedNote();if(this.setRendered(),kB("Drawing grace note group for:",n),this.alignSubNotesWithNote(this.getGraceNotes(),n,this.position),this.graceNotes.forEach(i=>i.setContext(e).drawWithStyle()),this.beams.forEach(i=>i.setContext(e).drawWithStyle()),this.showSlur){const i=ai(n),r=i?yl:ws;this.slur=new r({lastNote:this.graceNotes[0],firstNote:n,firstIndexes:[0],lastIndexes:[0]}),this.slur.renderOptions.cp2=12,this.slur.renderOptions.yShift=(i?7:5)+this.renderOptions.slurYShift,this.slur.setContext(e).drawWithStyle()}}}sa.DEBUG=!1;class Pf extends q{static get CATEGORY(){return"NoteSubGroup"}static format(e,n){if(!e||e.length===0)return!1;let i=0;for(let r=0;r<e.length;++r){const s=e[r];s.preFormat(),i+=s.getWidth()}return n.leftShift+=i,!0}constructor(e){super(),this.preFormatted=!1,this.position=q.Position.LEFT,this.subNotes=e,this.subNotes.forEach(n=>{n.setIgnoreTicks(!1)}),this.width=0,this.formatter=new Pt,this.voice=new Un({numBeats:4,beatValue:4,resolution:k.RESOLUTION}).setStrict(!1),this.voice.addTickables(this.subNotes)}preFormat(){this.preFormatted||(this.formatter.joinVoices([this.voice]).format([this.voice],0),this.setWidth(this.formatter.getMinTotalWidth()),this.preFormatted=!0)}setWidth(e){return this.width=e,this}getWidth(){return this.width}draw(){const e=this.checkContext(),n=this.checkAttachedNote();this.setRendered(),this.alignSubNotesWithNote(this.subNotes,n),this.subNotes.forEach(i=>i.setContext(e).drawWithStyle())}}function LB(...t){jt.DEBUG&&Ge("VexFlow.Ornament",t)}class jt extends q{static get CATEGORY(){return"Ornament"}static get minPadding(){return W.get("NoteHead.minPadding")}static format(e,n){var i,r;if(!e||e.length===0)return!1;let s=0,o=n.rightShift,a=n.leftShift;for(let l=0;l<e.length;++l){const d=e[l],f=2;if(d.position===Fe.RIGHT)d.xShift+=o+2,o+=d.width+jt.minPadding;else if(d.position===Fe.LEFT)d.xShift-=a+d.width+2,a+=d.width+jt.minPadding;else if(d.position===Fe.ABOVE){s=Math.max(d.getWidth(),s);const u=d.getNote();let c=u.getLineNumber(!0)+n.topTextLine;const h=u.getStem();h&&u.getStemDirection()===I.UP&&(c+=Math.abs(h.getHeight())/k.STAVE_LINE_DISTANCE);const g=(r=(i=u.getStave())===null||i===void 0?void 0:i.getNumLines())!==null&&r!==void 0?r:0;c<g&&(n.topTextLine+=g-c),d.setTextLine(n.topTextLine),n.topTextLine+=f}else s=Math.max(d.getWidth(),s),d.setTextLine(n.textLine),n.textLine+=f}return n.leftShift=a+s/2,n.rightShift=o+s/2,!0}static get ornamentNoteTransition(){return["flip","jazzTurn","smear"]}static get ornamentAttack(){return["scoop"]}static get ornamentAlignWithNoteHead(){return["doit","fall","fallLong","doitLong","scoop"]}static get ornamentRelease(){return["doit","fall","fallLong","doitLong","jazzTurn","smear","flip"]}static get ornamentLeft(){return["scoop"]}static get ornamentRight(){return["doit","fall","fallLong","doitLong"]}static get ornamentYShift(){return["fallLong"]}static get ornamentArticulation(){return["bend","plungerClosed","plungerOpen"]}constructor(e){super(),this.position=Fe.ABOVE,jt.ornamentRight.indexOf(e)>=0&&(this.position=Fe.RIGHT),jt.ornamentLeft.indexOf(e)>=0&&(this.position=Fe.LEFT),this.type=e,this.delayed=!1,this.renderOptions={accidentalLowerPadding:3,accidentalUpperPadding:3},this.adjustForStemDirection=!1,this.ornamentAlignWithNoteHead=jt.ornamentAlignWithNoteHead.indexOf(this.type)>=0,jt.ornamentNoteTransition.indexOf(this.type)>=0&&(this.delayed=!0),this.text=k.ornamentCodes(this.type)}setNote(e){return super.setNote(e),jt.ornamentArticulation.indexOf(this.type)>=0&&(e.getLineNumber()>=3?this.position=q.Position.ABOVE:this.position=q.Position.BELOW),this}setDelayed(e){return this.delayed=e,this}setUpperAccidental(e){return this.accidentalUpper=new Q,this.accidentalUpper.setText(k.accidentalCodes(e)),this}setLowerAccidental(e){return this.accidentalLower=new Q,this.accidentalLower.setText(k.accidentalCodes(e)),this}draw(){const e=this.checkContext(),n=this.checkAttachedNote();this.setRendered();const i=n.checkStave();e.openGroup("ornament",this.getAttribute("id"));const r=n.getModifierStartXY(this.position,this.index);let s=r.x;const o=i.getSpacingBetweenLines(),a=pS(n,this.position);let l=this.ornamentAlignWithNoteHead?r.y:0;if(this.position===Fe.ABOVE&&(l=ES(n,this.textLine)-(this.textLine+a)*o),this.position===Fe.BELOW&&(l=bS(n,this.textLine)+(this.textLine+a+1.5)*o),this.delayed){let d=0;const f=n.getTickContext().getX();if(this.delayXShift!==void 0)d=this.delayXShift;else{const u=n.getVoice().getTickables(),c=u.indexOf(n),h=c+1<u.length?u[c+1].checkTickContext():void 0;h?d+=(h.getX()-f)*.5:d+=(i.getX()+i.getWidth()-s)*.5,this.delayXShift=d}s+=d}LB("Rendering ornament: ",this.text.charCodeAt(0),s,l),this.accidentalLower&&(this.accidentalLower.renderText(e,s+this.xShift-this.accidentalLower.getWidth()*.5,l+this.yShift-this.accidentalLower.getTextMetrics().actualBoundingBoxDescent),l-=this.accidentalLower.getHeight()+this.renderOptions.accidentalLowerPadding),jt.ornamentYShift.indexOf(this.type)>=0&&(this.yShift+=this.getHeight()),this.x=s-(this.position===Fe.ABOVE||this.position===Fe.BELOW?this.width*.5:0),this.y=l,this.renderText(e,0,0),this.accidentalUpper&&(l-=this.getHeight()+this.renderOptions.accidentalUpperPadding,this.accidentalUpper.renderText(e,s+this.xShift-this.accidentalUpper.getWidth()*.5,l+this.yShift-this.accidentalUpper.getTextMetrics().actualBoundingBoxDescent)),e.closeGroup()}}jt.DEBUG=!1;class Jo extends q{static get CATEGORY(){return"Parenthesis"}static buildAndAttach(e){for(const n of e)for(let i=0;i<n.keys.length;i++)n.addModifier(new Jo(Fe.LEFT),i),n.addModifier(new Jo(Fe.RIGHT),i)}static format(e,n){if(!e||e.length===0)return!1;let i=0,r=0;for(let s=0;s<e.length;++s){const o=e[s],a=o.getNote(),l=o.getPosition(),d=o.checkIndex();let f=0;l===Fe.RIGHT&&(f=a.getRightParenthesisPx(d),r=r>f+o.width?r:f+o.width),l===Fe.LEFT&&(f=a.getLeftParenthesisPx(d)+o.width,i=i>f+o.width?i:f+o.width),o.setXShift(f)}return n.leftShift+=i,n.rightShift+=r,!0}constructor(e){super(),this.position=e??q.Position.LEFT,this.position===q.Position.RIGHT?this.text="":this.position===q.Position.LEFT&&(this.text="")}setNote(e){return this.note=e,this.setFont(e.getFont()),this}draw(){const e=this.checkContext(),n=this.checkAttachedNote();this.setRendered();const i=n.getModifierStartXY(this.position,this.index,{forceFlagRight:!0});this.renderText(e,i.x,i.y)}}const OB={path:{x:!0,y:!0,width:!0,height:!0,"font-family":!0,"font-weight":!0,"font-style":!0,"font-size":!0},rect:{"font-family":!0,"font-weight":!0,"font-style":!0,"font-size":!0},text:{width:!0,height:!0}},yB="http://www.w3.org/2000/svg",sE=2*Math.PI;class br extends Bf{constructor(e){super(),this.width=0,this.height=0,this.precision=1,this.backgroundFillStyle="white",this.fontCSSString="",this.element=e,this.precision=Math.pow(10,k.RENDER_PRECISION_PLACES);const n=this.create("svg");n.setAttribute("pointer-events","none"),this.element.appendChild(n),this.svg=n,this.parent=this.svg,this.groups=[this.svg],this.path="",this.pen={x:NaN,y:NaN};const i={"font-family":W.get("fontFamily"),"font-size":"10pt","font-weight":Er.NORMAL,"font-style":Ui.NORMAL};this.state=Object.assign({scaleX:1,scaleY:1},i),this.attributes=Object.assign({"stroke-width":1,"stroke-dasharray":"none",fill:"black",stroke:"black",shadowBlur:0,shadowColor:"black"},i),this.groupAttributes=[],this.applyAttributes(n,this.attributes),this.groupAttributes.push(Object.assign({},this.attributes)),this.stateStack=[]}round(e){return Math.round(e*this.precision)/this.precision}create(e){return document.createElementNS(yB,e)}openGroup(e,n){const i=this.create("g");return this.groups.push(i),this.parent.appendChild(i),this.parent=i,e&&i.setAttribute("class",Gd(e)),n&&i.setAttribute("id",Gd(n)),this.applyAttributes(i,this.attributes),this.groupAttributes.push(Object.assign(Object.assign({},this.groupAttributes[this.groupAttributes.length-1]),this.attributes)),i}closeGroup(){this.groups.pop(),this.groupAttributes.pop(),this.parent=this.groups[this.groups.length-1]}openRotation(e,n,i){this.openGroup().setAttribute("transform",`translate(${n},${i}) rotate(${e}) translate(-${n},-${i})`)}closeRotation(){this.closeGroup()}add(e){this.parent.appendChild(e)}setFillStyle(e){return this.attributes.fill=e,this}setBackgroundFillStyle(e){return this.backgroundFillStyle=e,this}setStrokeStyle(e){return this.attributes.stroke=e,this}setShadowColor(e){return this.attributes.shadowColor=e,this}setShadowBlur(e){return this.attributes.shadowBlur=e,this}setLineWidth(e){return this.attributes["stroke-width"]=e,this}setLineDash(e){if(Object.prototype.toString.call(e)==="[object Array]")return this.attributes["stroke-dasharray"]=e.join(","),this;throw new P("ArgumentError","lineDash must be an array of integers.")}setLineCap(e){return this.attributes["stroke-linecap"]=e,this}resize(e,n){this.width=e,this.height=n,this.element.style.width=e.toString(),this.svg.style.width=e.toString(),this.svg.style.height=n.toString();const i={width:e,height:n};return this.applyAttributes(this.svg,i),this.scale(this.state.scaleX,this.state.scaleY),this}scale(e,n){this.state.scaleX=this.state.scaleX?this.state.scaleX*e:e,this.state.scaleY=this.state.scaleY?this.state.scaleY*n:n;const i=this.width/this.state.scaleX,r=this.height/this.state.scaleY;return this.setViewBox(0,0,i,r),this}setViewBox(e,n,i,r){if(typeof e=="string")this.svg.setAttribute("viewBox",e);else{const s=e+" "+n+" "+i+" "+r;this.svg.setAttribute("viewBox",s)}}applyAttributes(e,n){const i=OB[e.nodeName];for(const r in n)i&&i[r]||n[r]&&(this.groupAttributes.length===0||n[r]!=this.groupAttributes[this.groupAttributes.length-1][r])&&e.setAttributeNS(null,r,n[r]);return e}clear(){for(;this.svg.lastChild;)this.svg.removeChild(this.svg.lastChild)}rect(e,n,i,r,s){r<0&&(n+=r,r*=-1);const o=this.create("rect");return s=s??{fill:"none","stroke-width":this.attributes["stroke-width"],stroke:"black"},e=this.round(e),n=this.round(n),i=this.round(i),r=this.round(r),this.applyAttributes(o,Object.assign({x:e,y:n,width:i,height:r},s)),this.add(o),this}fillRect(e,n,i,r){const s={fill:this.attributes.fill,stroke:"none"};return this.rect(e,n,i,r,s),this}pointerRect(e,n,i,r){const s={opacity:"0","pointer-events":"auto"};return this.rect(e,n,i,r,s),this}clearRect(e,n,i,r){return this.rect(e,n,i,r,{fill:this.backgroundFillStyle,stroke:"none"}),this}beginPath(){return this.path="",this.pen.x=NaN,this.pen.y=NaN,this}moveTo(e,n){return e=this.round(e),n=this.round(n),this.path+="M"+e+" "+n,this.pen.x=e,this.pen.y=n,this}lineTo(e,n){return e=this.round(e),n=this.round(n),this.path+="L"+e+" "+n,this.pen.x=e,this.pen.y=n,this}bezierCurveTo(e,n,i,r,s,o){return s=this.round(s),o=this.round(o),e=this.round(e),n=this.round(n),i=this.round(i),r=this.round(r),this.path+="C"+e+" "+n+","+i+" "+r+","+s+" "+o,this.pen.x=s,this.pen.y=o,this}quadraticCurveTo(e,n,i,r){return i=this.round(i),r=this.round(r),e=this.round(e),n=this.round(n),this.path+="Q"+e+" "+n+","+i+" "+r,this.pen.x=i,this.pen.y=r,this}arc(e,n,i,r,s,o){let a=e+i*Math.cos(r),l=n+i*Math.sin(r);a=this.round(a),l=this.round(l);const d=Gg(r),f=Gg(s);if(!o&&s-r>=sE||o&&r-s>=sE||d===f){let u=e+i*Math.cos(r+Math.PI),c=n+i*Math.sin(r+Math.PI);u=this.round(u),c=this.round(c),i=this.round(i),this.path+=`M${a} ${l} A${i} ${i} 0 0 0 ${u} ${c} `,this.path+=`A${i} ${i} 0 0 0 ${a} ${l}`,this.pen.x=a,this.pen.y=l}else{let u=e+i*Math.cos(s),c=n+i*Math.sin(s);r=d,s=f;let h;Math.abs(s-r)<Math.PI?h=o:h=!o,r>s&&(h=!h);const g=!o;u=this.round(u),c=this.round(c),i=this.round(i),this.path+=`M${a} ${l} A${i} ${i} 0 ${+h} ${+g} ${u} ${c}`,this.pen.x=u,this.pen.y=c}return this}closePath(){return this.path+="Z",this}getShadowStyle(){return`filter: drop-shadow(0 0 ${this.attributes.shadowBlur/1.5}px ${this.attributes.shadowColor})`}fill(e){const n=this.create("path");return typeof e>"u"&&(e=Object.assign(Object.assign({},this.attributes),{stroke:"none"})),e.d=this.path,this.attributes.shadowBlur>0&&(e.style=this.getShadowStyle()),this.applyAttributes(n,e),this.add(n),this}stroke(){const e=this.create("path"),n=Object.assign(Object.assign({},this.attributes),{fill:"none",d:this.path});return this.attributes.shadowBlur>0&&(n.style=this.getShadowStyle()),this.applyAttributes(e,n),this.add(e),this}measureText(e){br.measureTextElement.setText(e),br.measureTextElement.setFont(this.attributes["font-family"],this.attributes["font-size"],this.attributes["font-weight"],this.attributes["font-style"]);const n=br.measureTextElement.getBoundingBox();return{x:n.x,y:n.y,width:n.w,height:n.h}}fillText(e,n,i){if(!e||e.length<=0)return this;n=this.round(n),i=this.round(i);const r=Object.assign(Object.assign({},this.attributes),{stroke:"none",x:n,y:i}),s=this.create("text");return s.textContent=e,this.applyAttributes(s,r),this.add(s),this}save(){return this.stateStack.push({state:structuredClone(this.state),attributes:structuredClone(this.attributes)}),this}restore(){const e=this.stateStack.pop();if(e){const n=e;this.state=structuredClone(n.state),this.attributes=structuredClone(n.attributes)}return this}set fillStyle(e){this.setFillStyle(e)}get fillStyle(){return this.attributes.fill}set strokeStyle(e){this.setStrokeStyle(e)}get strokeStyle(){return this.attributes.stroke}setFont(e,n,i,r){const s=ne.validate(e,n,i,r);this.fontCSSString=ne.toCSSString(s);const o={"font-family":s.family,"font-size":s.size,"font-weight":s.weight,"font-style":s.style};return this.attributes=Object.assign(Object.assign({},this.attributes),o),this.state=Object.assign(Object.assign({},this.state),o),this}getFont(){return this.fontCSSString}}br.measureTextElement=new Q;var Ru;(function(t){t[t.CANVAS=1]="CANVAS",t[t.SVG=2]="SVG"})(Ru||(Ru={}));var Iu;(function(t){t[t.NONE=1]="NONE",t[t.UP=2]="UP",t[t.DOWN=3]="DOWN"})(Iu||(Iu={}));class ke{static buildContext(e,n,i,r,s="#FFF"){const o=new ke(e,n);i&&r&&o.resize(i,r);const a=o.getContext();return a.setBackgroundFillStyle(s),ke.lastContext=a,a}static getCanvasContext(e,n,i,r){return ke.buildContext(e,ke.Backends.CANVAS,n,i,r)}static getSVGContext(e,n,i,r){return ke.buildContext(e,ke.Backends.SVG,n,i,r)}static drawDashedLine(e,n,i,r,s,o){e.beginPath();const a=r-n,l=s-i,d=Math.atan2(l,a);let f=n,u=i;e.moveTo(n,i);let c=0,h=!0;for(;!((a<0?f<=r:f>=r)&&(l<0?u<=s:u>=s));){const g=o[c++%o.length],E=f+Math.cos(d)*g;f=a<0?Math.max(r,E):Math.min(r,E);const p=u+Math.sin(d)*g;u=l<0?Math.max(s,p):Math.min(s,p),h?e.lineTo(f,u):e.moveTo(f,u),h=!h}e.closePath(),e.stroke()}constructor(e,n){if(oB(e))this.ctx=e;else{if(n===void 0)throw new P("InvalidArgument","Missing backend argument");const i=n;let r;if(typeof e=="string"){const s=document.getElementById(e);if(!s)throw new P("BadElementId",`Can't find element with ID "${s}"`);r=s}else r=e;if(i===ke.Backends.CANVAS){if(!Tf(r))throw new P("BadElement","CANVAS context requires an HTMLCanvasElement.");const s=r.getContext("2d",{willReadFrequently:!0});if(!s)throw new P("BadElement","Can't get canvas context");this.ctx=new cs(s)}else if(i===ke.Backends.SVG){if(!EB(r))throw new P("BadElement","SVG context requires an HTMLDivElement.");this.ctx=new br(r)}else throw new P("InvalidBackend",`No support for backend: ${i}`)}}resize(e,n){return this.ctx.resize(e,n),this}getContext(){return this.ctx}}ke.Backends=Ru;ke.LineEndType=Iu;ke.lastContext=void 0;class kf extends q{static get CATEGORY(){return"StringNumber"}static format(e,n){const i=n.leftShift,r=n.rightShift,s=1;if(!e||e.length===0)return!1;const o=[];let a=null,l=0,d=0;for(let E=0;E<e.length;++E){const p=e[E],m=p.getNote(),b=p.getPosition();if(!ai(m))throw new P("NoStaveNote");const A=p.checkIndex(),S=m.getKeyProps()[A],w=m.getModifierContext(),D=p.radius*2/k.STAVE_LINE_DISTANCE+.5;if(w&&(b===Fe.ABOVE?(p.textLine=w.getState().topTextLine,n.topTextLine+=D):b===Fe.BELOW&&(p.textLine=w.getState().textLine,n.textLine+=D)),m!==a){for(let F=0;F<m.keys.length;++F)b===q.Position.LEFT&&(l=Math.max(m.getLeftDisplacedHeadPx(),l)),r===0&&(d=Math.max(m.getRightDisplacedHeadPx(),d));a=m}const x=S.line;o.push({pos:b,note:m,num:p,line:x,shiftL:l,shiftR:d})}o.sort((E,p)=>p.line-E.line);let f=0,u=0,c=0,h=null,g=null;for(let E=0;E<o.length;++E){const p=o[E].note,m=o[E].pos,b=o[E].num,A=o[E].line,S=o[E].shiftR;(A!==h||p!==g)&&(f=r+S);const w=b.getWidth()+s;let D=0;m===q.Position.LEFT?(b.setXShift(i+l),D=w,u=Math.max(D,u)):m===q.Position.RIGHT&&(b.setXShift(f),D+=w,c=D>c?D:c),h=A,g=p}return n.leftShift+=u,n.rightShift+=c,!0}constructor(e){super(),this.stringNumber=e,this.position=q.Position.ABOVE,this.xShift=0,this.yShift=0,this.textLine=0,this.stemOffset=0,this.xOffset=0,this.yOffset=0,this.dashed=!0,this.leg=ke.LineEndType.NONE,this.radius=8,this.drawCircle=!0,this.setWidth(this.radius*2+4)}setLineEndType(e){return e>=ke.LineEndType.NONE&&e<=ke.LineEndType.DOWN&&(this.leg=e),this}setStringNumber(e){return this.stringNumber=e,this}setOffsetX(e){return this.xOffset=e,this}setOffsetY(e){return this.yOffset=e,this}setLastNote(e){return this.lastNote=e,this}setDashed(e){return this.dashed=e,this}setDrawCircle(e){return this.drawCircle=e,this}draw(){const e=this.checkContext(),n=this.checkAttachedNote();this.setRendered();const i=n.getModifierStartXY(this.position,this.index),r=n.hasStem()?n.getStemDirection():I.UP;let s=i.x+this.xShift+this.xOffset,o={};n.hasStem()&&(o=n.checkStem().getExtents());let a=i.y+this.yShift+this.yOffset;switch(this.position){case q.Position.ABOVE:a=n.getYs().reduce((u,c)=>u<c?u:c),n.hasStem()&&r===I.UP&&(a=o.topY+W.get("StringNumber.stemPadding")),a-=this.radius+W.get("StringNumber.verticalPadding")+this.textLine*k.STAVE_LINE_DISTANCE;break;case q.Position.BELOW:a=n.getYs().reduce((u,c)=>u>c?u:c),n.hasStem()&&r===I.DOWN&&(a=o.topY-W.get("StringNumber.stemPadding")),a+=this.radius+W.get("StringNumber.verticalPadding")+this.textLine*k.STAVE_LINE_DISTANCE;break;case q.Position.LEFT:s-=this.radius/2+W.get("StringNumber.leftPadding");break;case q.Position.RIGHT:s+=this.radius/2+W.get("StringNumber.rightPadding");break;default:throw new P("InvalidPosition",`The position ${this.position} is invalid`)}this.drawCircle&&(e.beginPath(),e.arc(s,a,this.radius,0,Math.PI*2,!1),e.setLineWidth(1.5),e.stroke()),e.setFont(this.fontInfo);const l=s-e.measureText(this.stringNumber).width/2;e.fillText(""+this.stringNumber,l,a+4.5);const d=this.lastNote;if(Nl(d)){const f=d.getStemX()-n.getX()+5;e.setStrokeStyle("#000000"),e.setLineCap("round"),e.setLineWidth(.6),this.dashed?ke.drawDashedLine(e,s+10,a,s+f,a,[3,3]):ke.drawDashedLine(e,s+10,a,s+f,a,[3,0]);let u,c;switch(this.leg){case ke.LineEndType.UP:u=-10,c=this.dashed?[3,3]:[3,0],ke.drawDashedLine(e,s+f,a,s+f,a+u,c);break;case ke.LineEndType.DOWN:u=10,c=this.dashed?[3,3]:[3,0],ke.drawDashedLine(e,s+f,a,s+f,a+u,c);break}}}}class ot extends q{static get CATEGORY(){return"Stroke"}static format(e,n){const i=n.leftShift,r=5;if(!e||e.length===0)return!1;const s=e.map(l=>{const d=l.getNote(),f=l.checkIndex();if(ai(d)){const{line:u}=d.getKeyProps()[f],c=d.getLeftDisplacedHeadPx();return{line:u,shift:c,stroke:l}}else if(wn(d)){const{str:u}=d.getPositions()[f];return{line:u,shift:0,stroke:l}}else throw new P("Internal","Unexpected instance.")}),o=i,a=s.reduce((l,{stroke:d,shift:f})=>(d.setXShift(o+f),Math.max(d.getWidth()+r,l)),0);return n.leftShift+=a,!0}constructor(e,n){super(),this.options=Object.assign({allVoices:!0},n),this.allVoices=this.options.allVoices,this.type=e,this.position=q.Position.LEFT,this.renderOptions={fontScale:W.get("Stroke.fontSize")},this.setXShift(0),this.setWidth(10)}getPosition(){return this.position}addEndNote(e){return this.noteEnd=e,this}draw(){const e=this.checkContext(),n=this.checkAttachedNote();this.setRendered();const i=n.getModifierStartXY(this.position,this.index);let r=n.getYs(),s=i.y,o=i.y;const a=i.x-5,l=n.checkStave().getSpacingBetweenLines(),d=this.checkModifierContext().getMembers(n.getCategory());for(let h=0;h<d.length;h++){const g=d[h];if(fS(g)){r=g.getYs();for(let E=0;E<r.length;E++)(this.note===d[h]||this.allVoices)&&(s=Math.min(s,r[E]),o=Math.max(o,r[E]))}}let f="",u=0,c=0;switch(this.type){case ot.Type.BRUSH_DOWN:case ot.Type.ROLL_DOWN:case ot.Type.RASGUEADO_DOWN:f=C.arrowheadBlackUp,u=s,s-=l/2,o+=l/2;break;case ot.Type.BRUSH_UP:case ot.Type.ROLL_UP:case ot.Type.RASGUEADO_UP:f=C.arrowheadBlackDown,u=o+l,s-=l/2;break;case ot.Type.ARPEGGIO_DIRECTIONLESS:s-=l/2,o+=l/2;break;default:throw new P("InvalidType",`The stroke type ${this.type} does not exist`)}if(this.type===ot.Type.BRUSH_DOWN||this.type===ot.Type.BRUSH_UP)e.fillRect(a+this.xShift,s,1,o-s);else{const h=f===C.arrowheadBlackDown?C.wiggleArpeggiatoDown:C.wiggleArpeggiatoUp;let g="";const E=new Q;for(;E.getWidth()<o-s;)g+=h,E.setText(g);this.type===ot.Type.RASGUEADO_DOWN||this.type===ot.Type.ROLL_DOWN||this.type===ot.Type.ARPEGGIO_DIRECTIONLESS?(e.openRotation(90,a+this.xShift,s),E.renderText(e,a+this.xShift,s-E.getTextMetrics().actualBoundingBoxDescent+E.getHeight()/2),e.closeRotation(),c=s+E.getWidth()+5):(e.openRotation(-90,a+this.xShift,o),E.renderText(e,a+this.xShift,o-E.getTextMetrics().actualBoundingBoxDescent+E.getHeight()/2),e.closeRotation(),c=o-E.getWidth()-5)}if(u!==0){const h=new Q;h.setText(f),h.renderText(e,a+this.xShift-h.getWidth()/2,u)}if(this.type===ot.Type.RASGUEADO_DOWN||this.type===ot.Type.RASGUEADO_UP){const h=new Q("Stroke.text");h.setText("R"),h.renderText(e,a+this.xShift-h.getWidth()/2,c+(this.type===ot.Type.RASGUEADO_DOWN?h.getHeight():0))}}}ot.Type={BRUSH_DOWN:1,BRUSH_UP:2,ROLL_DOWN:3,ROLL_UP:4,RASGUEADO_DOWN:5,RASGUEADO_UP:6,ARPEGGIO_DIRECTIONLESS:7};class Lf extends q{static get CATEGORY(){return"Vibrato"}static format(e,n,i){if(!e||e.length===0)return!1;let r=n.topTextLine,s=0,o=n.rightShift-7;const a=i.getMembers(fn.CATEGORY);if(a&&a.length>0){const l=a.map(d=>d.getTextHeight()).reduce((d,f)=>d>f?d:f)/k.STAVE_LINE_DISTANCE;r=r-(l+1)}else n.topTextLine+=1;for(let l=0;l<e.length;++l){const d=e[l];d.setXShift(o),d.setTextLine(r),s+=d.getWidth(),o+=s}return n.rightShift+=s,!0}constructor(){super(),this.position=q.Position.RIGHT,this.renderOptions={code:60080,width:20},this.setVibratoWidth(this.renderOptions.width)}setVibratoWidth(e){this.renderOptions.width=e,this.text=String.fromCodePoint(this.renderOptions.code);const n=this.getWidth();if(!n)throw new P("Cannot set vibrato width if width is 0");const i=Math.round(this.renderOptions.width/n);for(let r=1;r<i;r++)this.text+=String.fromCodePoint(this.renderOptions.code);return this}setVibratoCode(e){return this.renderOptions.code=e,this.setVibratoWidth(this.renderOptions.width)}draw(){const e=this.checkContext(),n=this.checkAttachedNote();this.setRendered();const r=n.getModifierStartXY(q.Position.RIGHT,this.index).x,s=n.getYForTopText(this.textLine)+5;this.renderText(e,r,s)}}function Ra(...t){Ds.DEBUG&&Ge("VexFlow.ModifierContext",t)}class Ds{constructor(){this.state={leftShift:0,rightShift:0,textLine:0,topTextLine:0},this.members={},this.preFormatted=!1,this.postFormatted=!1,this.formatted=!1,this.width=0,this.spacing=0}addModifier(e){return Ra("addModifier is deprecated, use addMember instead."),this.addMember(e)}addMember(e){const n=e.getCategory();return this.members[n]||(this.members[n]=[]),this.members[n].push(e),e.setModifierContext(this),this.preFormatted=!1,this}getModifiers(e){return Ra("getModifiers is deprecated, use getMembers instead."),this.getMembers(e)}getMembers(e){var n;return(n=this.members[e])!==null&&n!==void 0?n:[]}getWidth(){return this.width}getLeftShift(){return this.state.leftShift}getRightShift(){return this.state.rightShift}getState(){return this.state}getMetrics(){if(!this.formatted)throw new P("UnformattedMember","Unformatted member has no metrics.");return{width:this.state.leftShift+this.state.rightShift+this.spacing,spacing:this.spacing}}preFormat(){if(this.preFormatted)return;Ra("Preformatting ModifierContext");const e=this.state,n=this.members;Bn.format(n.StaveNote,e),Jo.format(n.Parenthesis,e),Hi.format(n.Dot,e),Pl.format(n.FretHandFinger,e),Or.format(n.Accidental,e),ot.format(n.Stroke,e),sa.format(n.GraceNoteGroup,e),Pf.format(n.NoteSubGroup,e),kf.format(n.StringNumber,e),ui.format(n.Articulation,e),jt.format(n.Ornament,e),Yt.format(n.Annotation,e),je.format(n.ChordSymbol,e),fn.format(n.Bend,e),Lf.format(n.Vibrato,e,this),this.width=e.leftShift+e.rightShift,this.preFormatted=!0}postFormat(){this.postFormatted||(Ra("Postformatting ModifierContext"),Bn.postFormat(this.getMembers("StaveNote")))}}Ds.DEBUG=!1;class xs extends di{static get CATEGORY(){return"KeySignature"}constructor(e,n,i){super(),this.accList=[],this.setKeySig(e,n,i),this.setPosition(oe.BEGIN),this.children=[],this.paddingForced=!1}convertToGlyph(e,n,i){const r=k.accidentalCodes(e.type),s=new Q("KeySignature");s.setText(r);let o=1;if(s.setYShift(i.getYForLine(e.line)),this.children.length>0){const a=this.children[this.children.length-1],l=f=>f.getText()===C.accidentalNatural,d=(f,u)=>Math.abs(u.getYShift()-f.getYShift());(l(a)||l(s))&&d(a,s)<10&&(o=2),s.setXShift(a.getXShift()+a.getWidth()+o)}this.children.push(s),this.width+=s.getWidth()+o}cancelKey(e){return this.formatted=!1,this.cancelKeySpec=e,this}convertToCancelAccList(e){const n=k.keySignature(e),i=this.accList.length>0&&n.length>0&&n[0].type!==this.accList[0].type,r=i?n.length:n.length-this.accList.length;if(r<1)return;const s=[];for(let o=0;o<r;o++){let a=o;i||(a=n.length-r+o);const l=n[a];s.push({type:"n",line:l.line})}return this.accList=s.concat(this.accList),{accList:s,type:n[0].type}}addToStave(e){return this.paddingForced=!0,e.addModifier(this),this}setStave(e){return this.formatted=!1,super.setStave(e)}getBoundingBox(){return this.formatted||this.format(),super.getBoundingBox()}calculateDimensions(){let e;this.children.length>0?e=this.children[0].getBoundingBox():e=new oi(this.x+this.xShift,this.y+this.yShift,0,0),this.children.forEach(n=>{e.mergeWith(n.getBoundingBox())}),this.width=e.getW(),this.height=e.getH(),this.y=e.getY()}convertAccLines(e,n,i=this.accList){let r=0,s;switch(e){case"soprano":n==="#"?s=[2.5,.5,2,0,1.5,-.5,1]:r=-1;break;case"mezzo-soprano":n==="b"?s=[0,2,.5,2.5,1,3,1.5]:r=1.5;break;case"alto":r=.5;break;case"tenor":n==="#"?s=[3,1,2.5,.5,2,0,1.5]:r=-.5;break;case"baritone-f":case"baritone-c":n==="b"?s=[.5,2.5,1,3,1.5,3.5,2]:r=2;break;case"bass":case"french":r=1;break}let o;if(typeof s<"u")for(o=0;o<i.length;++o)i[o].line=s[o];else if(r!==0)for(o=0;o<i.length;++o)i[o].line+=r}getPadding(e){return this.formatted||this.format(),this.children.length===0||!this.paddingForced&&e<2?0:this.padding}getWidth(){return this.formatted||this.format(),this.width}setKeySig(e,n,i){return this.formatted=!1,this.keySpec=e,this.cancelKeySpec=n,this.alterKeySpec=i,this}alterKey(e){return this.formatted=!1,this.alterKeySpec=e,this}convertToAlterAccList(e){const n=Math.min(e.length,this.accList.length);for(let i=0;i<n;++i)e[i]&&(this.accList[i].type=e[i])}format(){let e=this.getStave();e||(e=new Ki(0,0,100),this.setStave(e)),this.width=0,this.children=[],this.accList=k.keySignature(Xe(this.keySpec));const n=this.accList,i=n.length>0?n[0].type:void 0;let r;if(this.cancelKeySpec&&(r=this.convertToCancelAccList(this.cancelKeySpec)),this.alterKeySpec&&this.convertToAlterAccList(this.alterKeySpec),this.accList.length>0){const s=(this.position===oe.END?e.getEndClef():e.getClef())||e.getClef();r&&this.convertAccLines(s,r.type,r.accList),this.convertAccLines(s,i,n);for(let o=0;o<this.accList.length;++o)this.convertToGlyph(this.accList[o],this.accList[o+1],e)}this.calculateDimensions(),this.formatted=!0}draw(){const n=this.checkStave().checkContext();this.formatted||this.format(),this.setRendered(),n.openGroup("keysignature",this.getAttribute("id"));for(let i=0;i<this.children.length;i++)this.children[i].renderText(n,this.x,0);n.closeGroup()}}class Je extends di{static get CATEGORY(){return"Repetition"}constructor(e,n,i){super(),this.symbolType=e,this.x=n,this.xShift=0,this.yShift=i}setShiftX(e){return this.xShift=e,this}setShiftY(e){return this.yShift=e,this}draw(){const e=this.checkStave(),n=e.getModifierXShift(this.getPosition());switch(this.setRendered(),this.symbolType){case Je.type.CODA_RIGHT:this.drawCodaFixed(e,n+e.getWidth());break;case Je.type.CODA_LEFT:this.drawSymbolText(e,n,"Coda",!0);break;case Je.type.SEGNO_LEFT:this.drawSegnoFixed(e,n);break;case Je.type.SEGNO_RIGHT:this.drawSegnoFixed(e,n+e.getWidth());break;case Je.type.DC:this.drawSymbolText(e,n,"D.C.",!1);break;case Je.type.DC_AL_CODA:this.drawSymbolText(e,n,"D.C. al",!0);break;case Je.type.DC_AL_FINE:this.drawSymbolText(e,n,"D.C. al Fine",!1);break;case Je.type.DS:this.drawSymbolText(e,n,"D.S.",!1);break;case Je.type.DS_AL_CODA:this.drawSymbolText(e,n,"D.S. al",!0);break;case Je.type.DS_AL_FINE:this.drawSymbolText(e,n,"D.S. al Fine",!1);break;case Je.type.FINE:this.drawSymbolText(e,n,"Fine",!1);break;case Je.type.TO_CODA:this.drawSymbolText(e,n,"To",!0);break}}drawCodaFixed(e,n){const i=e.getYForTopText(e.getNumLines());return this.text=C.coda,this.renderText(e.checkContext(),n,i+W.get("Repetition.coda.offsetY")),this}drawSegnoFixed(e,n){const i=e.getYForTopText(e.getNumLines());return this.text=C.segno,this.renderText(e.checkContext(),n,i+W.get("Repetition.segno.offsetY")),this}drawSymbolText(e,n,i,r){const s=e.checkContext();let o=0;switch(this.text=i,r&&(this.text+=" "),this.setFont(W.getFontInfo("Repetition.text")),this.symbolType){case Je.type.CODA_LEFT:o=e.getVerticalBarWidth();break;case Je.type.DC:case Je.type.DC_AL_FINE:case Je.type.DS:case Je.type.DS_AL_FINE:case Je.type.FINE:default:o=n-(e.getNoteStartX()-this.x)+e.getWidth()-this.width-W.get("Repetition.text.offsetX")}const a=e.getYForTopText(e.getNumLines())+W.get("Repetition.text.offsetY");return this.renderText(s,o,a),this}}Je.type={NONE:1,CODA_LEFT:2,CODA_RIGHT:3,SEGNO_LEFT:4,SEGNO_RIGHT:5,DC:6,DC_AL_CODA:7,DC_AL_FINE:8,DS:9,DS_AL_CODA:10,DS_AL_FINE:11,FINE:12,TO_CODA:13};class RB extends di{static get CATEGORY(){return"StaveSection"}constructor(e,n=0,i=0,r=!0){super(),this.setText(e),this.x=n,this.yShift=i,this.drawRect=r,this.padding=W.get("StaveSection.padding")}setDrawRect(e){return this.drawRect=e,this}draw(){const e=this.checkStave(),n=e.checkContext();this.setRendered(),this.x=e.getX()+e.getModifierXShift(this.getPosition());const i=-1*this.textMetrics.actualBoundingBoxDescent,r=this.width+2*this.padding,s=this.height+2*this.padding,o=e.getYForTopText(1.5)+this.yShift,a=this.x+this.xShift;this.drawRect&&(n.beginPath(),n.rect(a,o-s+i,r,s),n.stroke()),this.renderText(n,this.xShift+this.padding,o-this.padding)}}class AS extends di{static get CATEGORY(){return"StaveTempo"}constructor(e,n,i){super(),this.durationToCode={"1/4":C.metNoteDoubleWholeSquare,long:C.metNoteDoubleWholeSquare,"1/2":C.metNoteDoubleWhole,breve:C.metNoteDoubleWhole,1:C.metNoteWhole,whole:C.metNoteWhole,w:C.metNoteWhole,2:C.metNoteHalfUp,half:C.metNoteHalfUp,h:C.metNoteHalfUp,4:C.metNoteQuarterUp,quarter:C.metNoteQuarterUp,q:C.metNoteQuarterUp,8:C.metNote8thUp,eighth:C.metNote8thUp,16:C.metNote16thUp,"16th":C.metNote16thUp,32:C.metNote32ndUp,"32nd":C.metNote32ndUp,64:C.metNote64thUp,"64th":C.metNote64thUp,128:C.metNote128thUp,"128th":C.metNote128thUp,256:C.metNote256thUp,"256th":C.metNote256thUp,512:C.metNote512thUp,"512th":C.metNote512thUp,1024:C.metNote1024thUp,"1024th":C.metNote1024thUp},this.tempo=e,this.position=oe.ABOVE,this.x=n,this.setXShift(10),this.setYShift(i)}setTempo(e){return this.tempo=e,this}draw(){const e=this.checkStave(),n=e.getModifierXShift(this.getPosition()),i=e.checkContext();this.setRendered();const{name:r,duration:s,dots:o,bpm:a,duration2:l,dots2:d,parenthesis:f}=this.tempo;let u=this.x+n;const c=e.getYForTopText(1),h=new Q("StaveTempo.glyph"),g=new Q("StaveTempo");if(r&&(this.text=r,this.fontInfo=W.getFontInfo("StaveTempo.name"),this.renderText(i,n,c),u+=this.getWidth()+3),(r&&s||f)&&(g.setText("("),g.renderText(i,u+this.xShift,c+this.yShift),u+=g.getWidth()+3),s){if(h.setText(this.durationToCode[s]),h.renderText(i,u+this.xShift,c+this.yShift),u+=h.getWidth()+3,o){h.setText(C.metAugmentationDot);for(let E=0;E<o;E++)h.renderText(i,u+this.xShift,c+2+this.yShift),u+=h.getWidth()+3}if(g.setText("="),g.renderText(i,u+this.xShift,c+this.yShift),u+=g.getWidth()+3,l){if(h.setText(this.durationToCode[l]),h.renderText(i,u+this.xShift,c+this.yShift),u+=h.getWidth()+3,d){h.setText(C.metAugmentationDot);for(let E=0;E<d;E++)h.renderText(i,u+this.xShift,c+2+this.yShift),u+=h.getWidth()+3}}else a&&(g.setText(""+a),g.renderText(i,u+this.xShift,c+this.yShift),u+=g.getWidth()+3);(r||f)&&(g.setText(")"),g.renderText(i,u+this.xShift,c+this.yShift))}}}var Sn;(function(t){t[t.LEFT=1]="LEFT",t[t.CENTER=2]="CENTER",t[t.RIGHT=3]="RIGHT"})(Sn||(Sn={}));class ks extends st{static get CATEGORY(){return"TextNote"}static get GLYPHS(){return{segno:C.segno,tr:C.ornamentTrill,mordent:C.ornamentMordent,mordentUpper:C.ornamentShortTrill,mordentLower:C.ornamentMordent,f:C.dynamicForte,p:C.dynamicPiano,m:C.dynamicMezzo,s:C.dynamicSforzando,z:C.dynamicZ,coda:C.coda,pedalOpen:C.keyboardPedalPed,pedalClose:C.keyboardPedalUp,caesuraStraight:C.caesura,caesuraCurved:C.caesuraCurved,breath:C.breathMarkComma,tick:C.breathMarkTick,turn:C.ornamentTurn,turnInverted:C.ornamentTurnSlash}}constructor(e){var n,i;super(e),this.text=(n=e.text)!==null&&n!==void 0?n:"",e.glyph&&(this.text+=ks.GLYPHS[e.glyph]||e.glyph),e.font?this.setFont(e.font):e.glyph===void 0&&this.setFont(W.getFontInfo("TextNote.text.fontSize"));const r=ne.convertSizeToPointValue(this.fontInfo.size)*.769231;e.superscript&&(this.superscript=new Q("TexNote.subSuper"),this.superscript.setText(e.superscript),this.superscript.setFontSize(r)),e.subscript&&(this.subscript=new Q("TexNote.subSuper"),this.subscript.setText(e.subscript),this.subscript.setFontSize(r)),this.line=(i=e.line)!==null&&i!==void 0?i:0,this.smooth=e.smooth||!1,this.ignoreTicks=e.ignoreTicks||!1,this.justification=Sn.LEFT}setJustification(e){return this.justification=e,this}setLine(e){return this.line=e,this}getLine(){return this.line}preFormat(){if(this.preFormatted)return;const e=this.checkTickContext("Can't preformat without a TickContext.");this.justification===Sn.CENTER?this.leftDisplacedHeadPx=this.width/2:this.justification===Sn.RIGHT&&(this.leftDisplacedHeadPx=this.width),this.rightDisplacedHeadPx=e.getMetrics().glyphPx/2,this.preFormatted=!0}draw(){const e=this.checkContext(),n=this.checkStave(),i=this.checkTickContext("Can't draw without a TickContext.");this.setRendered();let r=this.getAbsoluteX()+i.getMetrics().glyphPx/2;const s=this.getWidth();this.justification===Sn.CENTER?r-=s/2:this.justification===Sn.RIGHT&&(r-=s);const o=n.getYForLine(this.line+-3);this.renderText(e,r,o);const a=this.getHeight();this.superscript&&this.superscript.renderText(e,r+this.width+2,o-a/2.2),this.subscript&&this.subscript.renderText(e,r+this.width+2,o+a/2.2-1)}}ks.Justification=Sn;class vS extends di{static get CATEGORY(){return"StaveText"}constructor(e,n,i={}){var r,s,o;super(),this.setText(e),this.setXShift((r=i.shiftX)!==null&&r!==void 0?r:0),this.setYShift((s=i.shiftY)!==null&&s!==void 0?s:0),this.position=n,this.justification=(o=i.justification)!==null&&o!==void 0?o:ks.Justification.CENTER}draw(){const e=this.checkStave(),n=e.checkContext();this.setRendered();let i,r;switch(this.position){case oe.LEFT:case oe.RIGHT:r=(e.getYForLine(0)+e.getBottomLineY())/2,this.position===oe.LEFT?i=e.getX()-this.width-24:i=e.getX()+e.getWidth()+24;break;case oe.ABOVE:case oe.BELOW:i=e.getX(),this.justification===Sn.CENTER?i+=e.getWidth()/2-this.width/2:this.justification===Sn.RIGHT&&(i+=e.getWidth()-this.width),this.position===oe.ABOVE?r=e.getYForTopText(2):r=e.getYForBottomText(2);break;default:throw new P("InvalidPosition","Value Must be in Modifier.Position.")}this.renderText(n,i,r+4)}}var mi;(function(t){t[t.NONE=1]="NONE",t[t.BEGIN=2]="BEGIN",t[t.MID=3]="MID",t[t.END=4]="END",t[t.BEGIN_END=5]="BEGIN_END"})(mi||(mi={}));class CS extends di{static get CATEGORY(){return"Volta"}static get type(){return mi}constructor(e,n,i,r){super(),this.type=e,this.x=i,this.yShift=r,this.text=n}draw(){const e=this.checkStave(),n=e.getModifierXShift(this.getPosition()),i=e.checkContext();this.setRendered();let r=e.getWidth()-n;const s=e.getYForTopText(e.getNumLines())+this.yShift,o=1.5*e.getSpacingBetweenLines();switch(this.type){case mi.BEGIN:i.fillRect(this.x+n,s,1,o);break;case mi.END:r-=5,i.fillRect(this.x+n+r,s,1,o);break;case mi.BEGIN_END:r-=3,i.fillRect(this.x+n,s,1,o),i.fillRect(this.x+n+r,s,1,o);break}(this.type===mi.BEGIN||this.type===mi.BEGIN_END)&&this.renderText(i,n+5,s-this.yShift+15),i.fillRect(this.x+n,s,r,1)}}const IB=t=>{t.split("/").forEach(n=>{if(/^[0-9+\-()]+$/.test(n)===!1)throw new P("BadTimeSignature",`Invalid time spec: ${t}. Must contain valid signatures.`)})};class ri extends di{static get CATEGORY(){return"TimeSignature"}constructor(e="4/4",n=15,i=!0){super(),this.timeSpec="4/4",this.line=0,this.isNumeric=!0,this.topStartX=0,this.botStartX=0,this.lineShift=0,this.topText=new Q,this.botText=new Q,this.validateArgs=i;const r=n;this.topLine=1,this.bottomLine=3,this.setPosition(oe.BEGIN),this.setTimeSig(e),this.setPadding(r)}static getTimeSigCode(e,n=!1){let i=C.null;switch(e){case"C":i=C.timeSigCommon;break;case"C|":i=C.timeSigCutCommon;break;case"+":i=n?C.timeSigPlusSmall:C.timeSigPlus;break;case"-":i=C.timeSigMinus;break;case"(":i=n?C.timeSigParensLeftSmall:C.timeSigParensLeft;break;case")":i=n?C.timeSigParensRightSmall:C.timeSigParensRight;break;default:i=String.fromCodePoint(57472+Number(e[0]));break}return i}makeTimeSignatureGlyph(e,n){let i="",r=0,s=0;for(let a=0;a<e.length;++a){const l=ri.getTimeSigCode(e[a],n.length>0);i+=l}this.topText.setText(i),r=this.topText.getWidth(),s=this.topText.getHeight();let o=0;i="";for(let a=0;a<n.length;++a){const l=ri.getTimeSigCode(n[a],!0);i+=l}this.botText.setText(i),o=this.botText.getWidth(),s=Math.max(s,this.botText.getHeight()),this.lineShift=s>30?.5:0,this.width=Math.max(r,o),this.topStartX=(this.width-r)/2,this.botStartX=(this.width-o)/2}setTimeSig(e){var n,i;if(this.timeSpec=e,e==="C"||e==="C|"){const r=ri.getTimeSigCode(e);this.line=2,this.text=r,this.isNumeric=!1}else{this.validateArgs&&IB(e);const r=e.split("/");this.line=0,this.isNumeric=!0,this.makeTimeSignatureGlyph((n=r[0])!==null&&n!==void 0?n:"",(i=r[1])!==null&&i!==void 0?i:"")}return this}getTimeSpec(){return this.timeSpec}getLine(){return this.line}setLine(e){this.line=e}getIsNumeric(){return this.isNumeric}setIsNumeric(e){this.isNumeric=e}draw(){const e=this.checkStave(),n=e.checkContext();this.setRendered(),n.openGroup("timesignature",this.getAttribute("id")),this.drawAt(n,e,this.x),n.closeGroup()}drawAt(e,n,i){if(this.setRendered(),this.isNumeric){let r=i+this.topStartX,s=0;this.botText.getText().length>0?s=n.getYForLine(this.topLine-this.lineShift):s=(n.getYForLine(this.topLine)+n.getYForLine(this.bottomLine))/2,this.topText.renderText(e,r,s),r=i+this.botStartX,s=n.getYForLine(this.bottomLine+this.lineShift),this.botText.renderText(e,r,s)}else this.renderText(e,i-this.x,n.getYForLine(this.line))}}const jB={[Xn.CATEGORY]:0,[Wt.CATEGORY]:1,[xs.CATEGORY]:2,[ri.CATEGORY]:3},UB={[ri.CATEGORY]:0,[xs.CATEGORY]:1,[Xn.CATEGORY]:2,[Wt.CATEGORY]:3};class Ki extends Q{static get CATEGORY(){return"Stave"}static get defaultPadding(){return W.get("Stave.padding")+W.get("Stave.endPaddingMax")}static get rightPadding(){return W.get("Stave.endPaddingMax")}constructor(e,n,i,r){super(),this.x=e,this.y=n,this.width=i,this.formatted=!1,this.startX=e+5,this.endX=e+i,this.modifiers=[],this.measure=0,this.clef="treble",this.endClef=void 0,this.options=Object.assign({verticalBarWidth:10,numLines:5,leftBar:!0,rightBar:!0,spacingBetweenLinesPx:k.STAVE_LINE_DISTANCE,spaceAboveStaffLn:4,spaceBelowStaffLn:4,topTextPosition:1,bottomTextPosition:4,lineConfig:[]},r),this.bounds={x:this.x,y:this.y,w:this.width,h:0},this.defaultLedgerLineStyle={strokeStyle:"#444",lineWidth:2},this.resetLines(),this.addModifier(new Xn(this.options.leftBar?ve.SINGLE:ve.NONE)),this.addEndModifier(new Xn(this.options.rightBar?ve.SINGLE:ve.NONE))}setDefaultLedgerLineStyle(e){this.defaultLedgerLineStyle=e}getDefaultLedgerLineStyle(){return Object.assign(Object.assign({},this.getStyle()),this.defaultLedgerLineStyle)}space(e){return this.options.spacingBetweenLinesPx*e}resetLines(){this.options.lineConfig=[];for(let e=0;e<this.options.numLines;e++)this.options.lineConfig.push({visible:!0});this.height=(this.options.numLines+this.options.spaceAboveStaffLn)*this.options.spacingBetweenLinesPx,this.options.bottomTextPosition=this.options.numLines}setNoteStartX(e){return this.formatted||this.format(),this.startX=e,this}getNoteStartX(){return this.formatted||this.format(),this.startX}getNoteEndX(){return this.formatted||this.format(),this.endX}getTieStartX(){return this.startX}getTieEndX(){return this.endX}getNumLines(){return this.options.numLines}setNumLines(e){return this.options.numLines=e,this.resetLines(),this}getTopLineTopY(){return this.getYForLine(0)}getBottomLineBottomY(){var e;return this.getYForLine(this.getNumLines()-1)+((e=this.getStyle().lineWidth)!==null&&e!==void 0?e:1)}setX(e){const n=e-this.x;this.formatted=!1,this.x=e,this.startX+=n,this.endX+=n;for(let i=0;i<this.modifiers.length;i++){const r=this.modifiers[i];r.setX(r.getX()+n)}return this}setWidth(e){return this.formatted=!1,this.width=e,this.endX=this.x+e,this}setMeasure(e){return this.measure=e,this}getMeasure(){return this.measure}getModifierXShift(e=0){if(typeof e!="number")throw new P("InvalidIndex","Must be of number type");if(this.formatted||this.format(),this.getModifiers(oe.BEGIN).length===1||this.modifiers[e].getPosition()===oe.RIGHT)return 0;let n=this.startX-this.x;const i=this.modifiers[0];return i.getType()===ve.REPEAT_BEGIN&&n>i.getWidth()&&(n-=i.getWidth()),n}setRepetitionType(e,n=0){return this.modifiers.push(new Je(e,this.x,n)),this}setVoltaType(e,n,i){return this.modifiers.push(new CS(e,n,this.x,i)),this}setSection(e,n,i=0,r,s=!0){const o=new RB(e).setYShift(n).setXShift(i).setDrawRect(s);return r&&o.setFontSize(r),this.addModifier(o),this}setTempo(e,n){return this.modifiers.push(new AS(e,this.x,n)),this}setStaveText(e,n,i={}){return this.modifiers.push(new vS(e,n,i)),this}getSpacingBetweenLines(){return this.options.spacingBetweenLinesPx}getBoundingBox(){return new oi(this.x,this.y,this.width,this.getBottomY()-this.y)}getBottomY(){const e=this.options,n=e.spacingBetweenLinesPx;return this.getYForLine(e.numLines)+e.spaceBelowStaffLn*n}getBottomLineY(){return this.getYForLine(this.options.numLines)}getYForLine(e){const n=this.options,i=n.spacingBetweenLinesPx,r=n.spaceAboveStaffLn;return this.y+e*i+r*i}getLineForY(e){const n=this.options,i=n.spacingBetweenLinesPx,r=n.spaceAboveStaffLn;return(e-this.y)/i-r}getYForTopText(e=0){return this.getYForLine(-e-this.options.topTextPosition)}getYForBottomText(e=0){return this.getYForLine(this.options.bottomTextPosition+e)}getYForNote(e){const n=this.options,i=n.spacingBetweenLinesPx,r=n.spaceAboveStaffLn;return this.y+r*i+5*i-e*i}getYForGlyphs(){return this.getYForLine(3)}addModifier(e,n){return n!==void 0&&e.setPosition(n),e.setStave(this),this.formatted=!1,this.modifiers.push(e),this}addEndModifier(e){return this.addModifier(e,oe.END),this}setBegBarType(e){const{SINGLE:n,REPEAT_BEGIN:i,NONE:r}=ve;return(e===n||e===i||e===r)&&(this.modifiers[0].setType(e),this.formatted=!1),this}setEndBarType(e){return e!==ve.REPEAT_BEGIN&&(this.modifiers[1].setType(e),this.formatted=!1),this}setClef(e,n,i,r){r===void 0&&(r=oe.BEGIN),r===oe.END?this.endClef=e:this.clef=e;const s=this.getModifiers(r,Wt.CATEGORY);return s.length===0?this.addClef(e,n,i,r):s[0].setType(e,n,i),this}getClef(){return this.clef}setEndClef(e,n,i){return this.setClef(e,n,i,oe.END),this}getEndClef(){return this.endClef}setKeySignature(e,n,i){i===void 0&&(i=oe.BEGIN);const r=this.getModifiers(i,xs.CATEGORY);return r.length===0?this.addKeySignature(e,n,i):r[0].setKeySig(e,n),this}setEndKeySignature(e,n){return this.setKeySignature(e,n,oe.END),this}setTimeSignature(e,n,i){i===void 0&&(i=oe.BEGIN);const r=this.getModifiers(i,ri.CATEGORY);return r.length===0?this.addTimeSignature(e,n,i):r[0].setTimeSig(e),this}setEndTimeSignature(e,n){return this.setTimeSignature(e,n,oe.END),this}addKeySignature(e,n,i){return i===void 0&&(i=oe.BEGIN),this.addModifier(new xs(e,n).setPosition(i),i),this}addClef(e,n,i,r){return r===void 0||r===oe.BEGIN?this.clef=e:r===oe.END&&(this.endClef=e),this.addModifier(new Wt(e,n,i),r),this}addEndClef(e,n,i){return this.addClef(e,n,i,oe.END),this}addTimeSignature(e,n,i){return this.addModifier(new ri(e,n),i),this}addEndTimeSignature(e,n){return this.addTimeSignature(e,n,oe.END),this}addTrebleGlyph(){return this.addClef("treble"),this}getModifiers(e,n){const i=e===void 0,r=n===void 0;return i&&r?this.modifiers:i?this.modifiers.filter(s=>n===s.getCategory()):r?this.modifiers.filter(s=>e===s.getPosition()):this.modifiers.filter(s=>e===s.getPosition()&&n===s.getCategory())}sortByCategory(e,n){for(let i=e.length-1;i>=0;i--)for(let r=0;r<i;r++)if(n[e[r].getCategory()]>n[e[r+1].getCategory()]){const s=e[r];e[r]=e[r+1],e[r+1]=s}}format(){var e,n,i,r;const s=this.modifiers[0],o=this.modifiers[1],a=this.getModifiers(oe.BEGIN),l=this.getModifiers(oe.END);this.sortByCategory(a,jB),this.sortByCategory(l,UB),a.length>1&&s.getType()===ve.REPEAT_BEGIN&&(a.push(a.splice(0,1)[0]),a.splice(0,0,new Xn(ve.SINGLE))),l.indexOf(o)>0&&l.splice(0,0,new Xn(ve.NONE));let d,f,u,c=0,h=this.x;for(let p=0;p<a.length;p++)u=a[p],f=u.getPadding(p+c),d=u.getWidth(),h+=f,u.setX(h),h+=d,f+d===0&&c--;this.startX=h,h=this.x+this.width;const g={left:0,right:0,paddingRight:0,paddingLeft:0};let E=0;for(let p=0;p<l.length;p++){u=l[p],E=dS(u)?p:E,g.right=0,g.left=0,g.paddingRight=0,g.paddingLeft=0;const m=u.getLayoutMetrics();m?(p!==0&&(g.right=(e=m.xMax)!==null&&e!==void 0?e:0,g.paddingRight=(n=m.paddingRight)!==null&&n!==void 0?n:0),g.left=-((i=m.xMin)!==null&&i!==void 0?i:0),g.paddingLeft=(r=m.paddingLeft)!==null&&r!==void 0?r:0,p===l.length-1&&(g.paddingLeft=0)):(g.paddingRight=u.getPadding(p-E),p!==0&&(g.right=u.getWidth()),p===0&&(g.left=u.getWidth())),h-=g.paddingRight,h-=g.right,u.setX(h),h-=g.left,h-=g.paddingLeft}this.endX=l.length===1?this.x+this.width:h,this.formatted=!0}draw(){var e;const n=this.checkContext();this.setRendered(),n.openGroup("stave",this.getAttribute("id")),this.formatted||this.format();const i=this.options.numLines,r=this.width,s=this.x;let o;const l=((e=this.getStyle().lineWidth)!==null&&e!==void 0?e:1)%2===0?0:.5;for(let d=0;d<i;d++)o=this.getYForLine(d),this.options.lineConfig[d].visible&&(n.beginPath(),n.moveTo(s,o+l),n.lineTo(s+r,o+l),n.stroke());n.closeGroup();for(let d=0;d<this.modifiers.length;d++){const f=this.modifiers[d];f.setContext(n),f.setStave(this),f.drawWithStyle()}if(this.measure>0){n.setFont(this.fontInfo);const d=n.measureText(""+this.measure).width;o=this.getYForTopText(0)+3,n.fillText(""+this.measure,this.x-d/2,o)}}getVerticalBarWidth(){return this.options.verticalBarWidth}getConfigForLines(){return this.options.lineConfig}setConfigForLine(e,n){if(e>=this.options.numLines||e<0)throw new P("StaveConfigError","The line number must be within the range of the number of lines in the Stave.");if(n.visible===void 0)throw new P("StaveConfigError","The line configuration object is missing the 'visible' property.");if(typeof n.visible!="boolean")throw new P("StaveConfigError","The line configuration objects 'visible' property must be true or false.");return this.options.lineConfig[e]=n,this}setConfigForLines(e){if(e.length!==this.options.numLines)throw new P("StaveConfigError","The length of the lines configuration array must match the number of lines in the Stave");for(const n in e)e[n].visible===void 0&&(e[n]=this.options.lineConfig[n]),this.options.lineConfig[n]=Object.assign(Object.assign({},this.options.lineConfig[n]),e[n]);return this.options.lineConfig=e,this}static formatBegModifiers(e){const n=r=>{let s=0;e.forEach(a=>{const l=a.getModifiers(oe.BEGIN,r);l.length>0&&l[0].getX()>s&&(s=l[0].getX())});let o=0;e.forEach(a=>{o=0,a.getModifiers(oe.BEGIN,r).forEach(u=>{s-u.getX()>o&&(o=s-u.getX())});const d=a.getModifiers(oe.BEGIN);let f=!1;d.forEach(u=>{u.getCategory()===r&&(f=!0),f&&o>0&&u.setX(u.getX()+o)}),a.setNoteStartX(a.getNoteStartX()+o)})};e.forEach(r=>{r.formatted||r.format()}),n("Clef"),n("KeySignature"),n("TimeSignature");let i=0;e.forEach(r=>{r.getNoteStartX()>i&&(i=r.getNoteStartX())}),e.forEach(r=>{r.setNoteStartX(i)}),i=0,e.forEach(r=>{r.getModifiers(oe.BEGIN,"Barline").forEach(o=>{o.getType()===ve.REPEAT_BEGIN&&o.getX()>i&&(i=o.getX())})}),e.forEach(r=>{r.getModifiers(oe.BEGIN,"Barline").forEach(o=>{o.getType()===ve.REPEAT_BEGIN&&o.setX(i)})})}}function oE(t,e,n,i,r){if(e!==ae.type.BOLD_DOUBLE_LEFT&&e!==ae.type.BOLD_DOUBLE_RIGHT)throw new P("InvalidConnector","A REPEAT_BEGIN or REPEAT_END type must be provided.");let s=3,o=3.5;const a=2;e===ae.type.BOLD_DOUBLE_RIGHT&&(s=-5,o=3),t.fillRect(n+s,i,1,r-i),t.fillRect(n-a,i,o,r-i)}class ae extends Q{static get CATEGORY(){return"StaveConnector"}constructor(e,n){super(),this.thickness=k.STAVE_LINE_THICKNESS,this.topStave=e,this.bottomStave=n,this.type=ae.type.DOUBLE,this.xShift=0,this.texts=[]}setType(e){const n=typeof e=="string"?ae.typeString[e]:e;return Object.values(ae.type).includes(n)&&(this.type=n),this}getType(){return this.type}setText(e,n={}){var i,r;const s=new Q("StaveConnector.text");return s.setText(e),s.setXShift((i=n.shiftX)!==null&&i!==void 0?i:0),s.setYShift((r=n.shiftY)!==null&&r!==void 0?r:0),this.texts.push(s),this}draw(){const e=this.checkContext();this.setRendered();let n=this.topStave.getYForLine(0),i=this.bottomStave.getYForLine(this.bottomStave.getNumLines()-1)+this.thickness,r=3,s=this.topStave.getX();(this.type===ae.type.SINGLE_RIGHT||this.type===ae.type.BOLD_DOUBLE_RIGHT||this.type===ae.type.THIN_DOUBLE)&&(s=this.topStave.getX()+this.topStave.getWidth());let a=i-n;const l=new Q;switch(this.type){case ae.type.SINGLE:r=1;break;case ae.type.SINGLE_LEFT:r=1;break;case ae.type.SINGLE_RIGHT:r=1;break;case ae.type.DOUBLE:s-=5,n-=this.thickness,a+=.5;break;case ae.type.BRACE:{r=12;const d=this.topStave.getX()-2+this.xShift,f=n,u=d,c=i,h=d-r,g=f+a/2,E=h-.9*r,p=f+.2*a,m=d+1.1*r,b=g-.135*a,A=m,S=g+.135*a,w=E,D=c-.2*a,x=h-r,F=D,y=d+.4*r,X=g+.135*a,G=y,Ee=g-.135*a,re=x,be=p;e.beginPath(),e.moveTo(d,f),e.bezierCurveTo(E,p,m,b,h,g),e.bezierCurveTo(A,S,w,D,u,c),e.bezierCurveTo(x,F,y,X,h,g),e.bezierCurveTo(G,Ee,re,be,d,f),e.fill(),e.stroke();break}case ae.type.BRACKET:n-=6,i+=6,a=i-n,l.setText(C.bracketTop),l.renderText(e,s-5,n),l.setText(C.bracketBottom),l.renderText(e,s-5,i),s-=5;break;case ae.type.BOLD_DOUBLE_LEFT:oE(e,this.type,s+this.xShift,n,i-this.thickness);break;case ae.type.BOLD_DOUBLE_RIGHT:oE(e,this.type,s,n,i-this.thickness);break;case ae.type.THIN_DOUBLE:r=1,a-=this.thickness;break;case ae.type.NONE:break;default:throw new P("InvalidType",`The provided StaveConnector.type (${this.type}) is invalid.`)}this.type!==ae.type.BRACE&&this.type!==ae.type.BOLD_DOUBLE_LEFT&&this.type!==ae.type.BOLD_DOUBLE_RIGHT&&this.type!==ae.type.NONE&&e.fillRect(s,n,r,a),this.type===ae.type.THIN_DOUBLE&&e.fillRect(s-3,n,r,a);for(let d=0;d<this.texts.length;d++){const f=this.texts[d],u=this.topStave.getX()-f.getWidth()-24,c=(this.topStave.getYForLine(0)+this.bottomStave.getBottomLineY())/2;f.renderText(e,u,c+4)}}}ae.type={SINGLE_RIGHT:0,SINGLE_LEFT:1,SINGLE:1,DOUBLE:2,BRACE:3,BRACKET:4,BOLD_DOUBLE_LEFT:5,BOLD_DOUBLE_RIGHT:6,THIN_DOUBLE:7,NONE:8};ae.typeString={singleRight:ae.type.SINGLE_RIGHT,singleLeft:ae.type.SINGLE_LEFT,single:ae.type.SINGLE,double:ae.type.DOUBLE,brace:ae.type.BRACE,bracket:ae.type.BRACKET,boldDoubleLeft:ae.type.BOLD_DOUBLE_LEFT,boldDoubleRight:ae.type.BOLD_DOUBLE_RIGHT,thinDouble:ae.type.THIN_DOUBLE,none:ae.type.NONE};function HB(t,e,n){if(t.length===0)return{map:{},array:[],list:[],resolutionMultiplier:0};const i={},r=[],s=[],o=Pt.getResolutionMultiplier(t);return t.forEach((a,l)=>{const d=new ue(0,o);a.getTickables().forEach(f=>{const u=d.numerator;if(!i[u]){const c=e({tickID:u});s.push(c),i[u]=c,r.push(u)}n(f,i[u],l),d.add(f.getTicks())})}),{map:i,array:s,list:r.sort((a,l)=>a-l),resolutionMultiplier:o}}function WB(...t){Pt.DEBUG&&Ge("VexFlow.Formatter",t)}function aE(t,e,n,i){let r=e;for(let s=n+1;s<t.length;s++){const o=t[s];if(fS(o)&&!o.isRest()&&!o.shouldIgnoreTicks()){r=o.getLineForRest();break}}if(i&&e!==r){const s=Math.max(e,r),o=Math.min(e,r);r=wf(s,o)}return r}class Pt{static SimpleFormat(e,n=0,{paddingBetween:i=10}={}){e.reduce((r,s)=>{s.addToModifierContext(new Ds);const o=new qo().addTickable(s).preFormat(),a=o.getMetrics();return o.setX(r+a.totalLeftPx),r+o.getWidth()+a.totalRightPx+i},n)}static plotDebugging(e,n,i,r,s,o){var a,l;o=Object.assign({stavePadding:W.get("Stave.padding")},o);const d=i+o.stavePadding,f=n.contextGaps;function u(c,h,g){e.beginPath(),e.setStrokeStyle(g),e.setFillStyle(g),e.setLineWidth(1),e.fillRect(c,r,Math.max(h-c,0),s-r)}e.save(),e.setFont(W.get("fontFamily"),8),f.gaps.forEach(c=>{u(d+c.x1,d+c.x2,"rgba(100,200,100,0.4)"),e.setFillStyle("green"),e.fillText(Math.round(c.x2-c.x1).toString(),d+c.x1,s+12)}),e.setFillStyle("red"),e.fillText(`Loss: ${((a=n.totalCost)!==null&&a!==void 0?a:0).toFixed(2)} Shift: ${((l=n.totalShift)!==null&&l!==void 0?l:0).toFixed(2)} Gap: ${f.total.toFixed(2)}`,d-20,s+27),e.restore()}static FormatAndDraw(e,n,i,r){let s={autoBeam:!1,alignRests:!1};typeof r=="object"?s=Object.assign(Object.assign({},s),r):typeof r=="boolean"&&(s.autoBeam=r);const o=new Un(k.TIME4_4).setMode(Un.Mode.SOFT).addTickables(i),a=s.autoBeam?er.applyAndGetBeams(o):[];return new Pt().joinVoices([o]).formatToStave([o],n,{alignRests:s.alignRests,stave:n}),o.setContext(e).setStave(n).drawWithStyle(),a.forEach(l=>l.setContext(e).drawWithStyle()),o.getBoundingBox()}static FormatAndDrawTab(e,n,i,r,s,o,a){let l={autoBeam:o,alignRests:!1};typeof a=="object"?l=Object.assign(Object.assign({},l),a):typeof a=="boolean"&&(l.autoBeam=a);const d=new Un(k.TIME4_4).setMode(Un.Mode.SOFT).addTickables(s),f=new Un(k.TIME4_4).setMode(Un.Mode.SOFT).addTickables(r),u=l.autoBeam?er.applyAndGetBeams(d):[];new Pt().joinVoices([d]).joinVoices([f]).formatToStave([d,f],i,{alignRests:l.alignRests}),d.draw(e,i),f.draw(e,n),u.forEach(c=>c.setContext(e).drawWithStyle()),new ae(i,n).setContext(e).drawWithStyle()}static AlignRestsToNotes(e,n,i){e.forEach((r,s)=>{if(ai(r)&&r.isRest()){if(r.getTuplet()&&!i||r.getLineForRest()!==3)return;if(n||r.getBeam()){const a=r.getKeyProps()[0];if(s===0)a.line=aE(e,a.line,s,!1);else if(s>0&&s<e.length){const l=e[s-1];if(ai(l))if(l.isRest())a.line=l.getKeyProps()[0].line;else{const d=l.getLineForRest();a.line=aE(e,d,s,!0)}}r.setKeyLine(0,a.line)}}})}constructor(e){this.formatterOptions=Object.assign({globalSoftmax:!1,softmaxFactor:k.SOFTMAX_FACTOR,maxIterations:5},e),this.justifyWidth=0,this.totalCost=0,this.totalShift=0,this.durationStats={},this.minTotalWidth=0,this.hasMinTotalWidth=!1,this.tickContexts={map:{},array:[],list:[],resolutionMultiplier:0},this.modifierContexts=[],this.contextGaps={total:0,gaps:[]},this.voices=[],this.lossHistory=[]}alignRests(e,n){if(!e||!e.length)throw new P("BadArgument","No voices to format rests");e.forEach(i=>Pt.AlignRestsToNotes(i.getTickables(),n))}preCalculateMinTotalWidth(e){const n=W.get("Stave.unalignedNotePadding");let i=0,r=0,s=0;const o=[],a=[];if(this.hasMinTotalWidth)return this.minTotalWidth;if(!e)throw new P("BadArgument","'voices' required to run preCalculateMinTotalWidth");this.createTickContexts(e);const{list:l,map:d}=this.tickContexts;this.minTotalWidth=0,l.forEach(b=>{const A=d[b];A.preFormat(),A.getTickables().length<e.length&&(i+=1),A.getTickables().forEach(w=>{r+=w.getMetrics().width,s+=w.getTicks().value(),o.push(w.getMetrics().width),a.push(w.getTicks().value())});const S=A.getWidth();this.minTotalWidth+=S}),this.hasMinTotalWidth=!0;const f=r>0?r/o.length:1/o.length,u=wo(o.map(b=>Math.pow(b-f,2))),c=Math.pow(u/o.length,.5)/f,h=s/a.length,g=wo(a.map(b=>Math.pow(b-h,2))),E=Math.pow(g/a.length,.5)/h,p=Math.max(E,c)*l.length*n,m=n*i;return this.minTotalWidth+Math.max(m,p)}getMinTotalWidth(){if(!this.hasMinTotalWidth)throw new P("NoMinTotalWidth","Call 'preCalculateMinTotalWidth' or 'preFormat' before calling 'getMinTotalWidth'");return this.minTotalWidth}static getResolutionMultiplier(e){if(!e||!e.length)throw new P("BadArgument","No voices to format");const n=e[0].getTotalTicks();return e.reduce((r,s)=>{if(!s.getTotalTicks().equals(n))throw new P("TickMismatch","Voices should have same total note duration in ticks.");if(s.getMode()===Un.Mode.STRICT&&!s.isComplete())throw new P("IncompleteVoice","Voice does not have enough notes.");return Math.max(r,ue.LCM(r,s.getResolutionMultiplier()))},1)}createModifierContexts(e){if(e.length===0)return;const n=Pt.getResolutionMultiplier(e),i=new Map,r=[];e.forEach(s=>{const o=new ue(0,n);s.getTickables().forEach(a=>{const l=o.numerator;let d=i.get(a.getStave());if(d||(i.set(a.getStave(),{}),d=i.get(a.getStave())),!(d&&d[l])){const f=new Ds;r.push(f),d[l]=f}a.addToModifierContext(d[l]),o.add(a.getTicks())})}),this.modifierContexts.push({map:i,array:r,resolutionMultiplier:n})}createTickContexts(e){const i=HB(e,s=>new qo(s),(s,o,a)=>o.addTickable(s,a));this.tickContexts=i;const r=this.tickContexts.array;return r.forEach(s=>{s.tContexts=r}),i}getTickContexts(){return this.tickContexts}preFormat(e=0,n,i,r){const s=this.tickContexts;if(!s)throw new P("NoTickContexts","preFormat requires TickContexts");const{list:o,map:a}=s;this.lossHistory=[],i&&r&&i.forEach(j=>j.setStave(r).preFormat());let l=0,d=0;this.minTotalWidth=0;let f=0;o.forEach(j=>{const Y=a[j];Y.preFormat();const J=Y.getWidth();this.minTotalWidth+=J;const ie=Y.getMaxTicks().value();f+=ie;const ce=Y.getMetrics();l=l+d+ce.totalLeftPx,Y.setX(l),d=J-ce.totalLeftPx});const{globalSoftmax:u,softmaxFactor:c,maxIterations:h}=this.formatterOptions,g=j=>Math.pow(c,a[j].getMaxTicks().value()/f),E=wo(o.map(g));if(this.minTotalWidth=l+d,this.hasMinTotalWidth=!0,e<=0)return this.evaluate();const p=a[o[0]],m=a[o[o.length-1]];function b(j){return o.map((J,ie)=>{const ce=a[J],tt=ce.getTickablesByVoice();let Re;if(ie>0){const Qt=a[o[ie-1]];for(let lt=ie-1;lt>=0;lt--){const rr=a[o[lt]].getTickablesByVoice(),gt=[];if(Object.keys(tt).forEach(Gt=>{rr[Gt]&&gt.push(Gt)}),gt.length>0){let Gt=0,Ti=1/0,ys=0;return gt.forEach(It=>{const ua=rr[It].getTicks().value();ua>Gt&&(Re=rr[It],Gt=ua);const Rs=tt[It],Wl=Rs.getX()-(Rs.getMetrics().modLeftPx+Rs.getMetrics().leftDisplacedHeadPx),Is=rr[It].getMetrics(),Xl=rr[It].getX()+Is.notePx+Is.modRightPx+Is.rightDisplacedHeadPx;Ti=Math.min(Ti,Wl-Xl)}),Ti=Math.min(Ti,ce.getX()-(Qt.getX()+j*.05)),u?ys=Math.pow(c,Gt/f)/E*j:typeof Re<"u"&&(ys=Re.getVoice().softmax(Gt)*j),{expectedDistance:ys,maxNegativeShiftPx:Ti,fromTickable:Re}}}}return{expectedDistance:0,fromTickablePx:0,maxNegativeShiftPx:0}})}function A(j){const Y=S/2;let J=0;return o.forEach((ie,ce)=>{const tt=a[ie];if(ce>0){const Re=tt.getX(),Qt=j[ce],lt=Xe(Qt.fromTickable).getX()+Qt.expectedDistance-(Re+J);let Qn=0;lt>0?J+=lt:lt<0&&(Qn=Math.min(Qt.maxNegativeShiftPx,Math.abs(lt)),J+=-Qn),tt.setX(Re+J)}tt.getCenterAlignedTickables().forEach(Re=>{Re.setCenterXShift(Y-tt.getX())})}),m.getX()-p.getX()}const S=e-m.getMetrics().notePx-m.getMetrics().totalRightPx-p.getMetrics().totalLeftPx,w=W.get("Stave.endPaddingMin"),D=W.get("Stave.endPaddingMax"),x=W.get("Stave.padding");let F=S;const y=b(F);let X=A(y);if(o.length===1)return 0;const Ee=((j,Y)=>{let J=j/2;if(Y.length>1)for(let ie=1;ie<Y.length;++ie)J=Math.min(Y[ie].expectedDistance/2,J);return J})(F,y),re=j=>{let Y=0;const J=m&&m.getMaxTickable();if(J){const ie=J.getVoice();if(ie.getTicksUsed().value()>ie.getTotalTicks().value())return D*2<Ee?Ee:D;const ce=J.getWidth();Y=ie.softmax(m.getMaxTicks().value())*j-(ce+x)}return D*2<Y?Y:D};let be=re(F),de=be-(D-w);const xt=S-de;let mt=h;for(;X>xt&&mt>0||X+be<xt&&mt>1;)F-=X-xt,be=re(F),de=be-(D-w),X=A(b(F)),mt--;return this.justifyWidth=e,this.evaluate()}evaluate(){const e=this.tickContexts,n=this.justifyWidth;this.contextGaps={total:0,gaps:[]},e.list.forEach((o,a)=>{if(a===0)return;const l=e.list[a-1],d=e.map[l],f=e.map[o],u=d.getMetrics(),c=f.getMetrics(),h=d.getX()+u.notePx+u.totalRightPx,g=f.getX()-c.totalLeftPx,E=g-h;this.contextGaps.total+=E,this.contextGaps.gaps.push({x1:h,x2:g}),f.getFormatterMetrics().freedom.left=E,d.getFormatterMetrics().freedom.right=E}),this.durationStats={};const i=this.durationStats;function r(o,a){const l=i[o];l===void 0?i[o]={mean:a,count:1,total:a}:(l.count+=1,l.total+=a,l.mean=l.total/l.count)}this.voices.forEach(o=>{o.getTickables().forEach((a,l,d)=>{const f=a.getTicks().clone().simplify().toString(),u=a.getMetrics(),c=a.getFormatterMetrics(),h=a.getX()+u.notePx+u.modRightPx+u.rightDisplacedHeadPx;let g=0;if(l<d.length-1){const E=d[l+1],p=E.getMetrics();g=E.getX()-p.modLeftPx-p.leftDisplacedHeadPx-h,c.space.used=E.getX()-a.getX(),E.getFormatterMetrics().freedom.left=g}else g=n-h,c.space.used=n-a.getX();c.freedom.right=g,r(f,c.space.used)})});let s=0;return this.voices.forEach(o=>{o.getTickables().forEach(a=>{const l=a.getTicks().clone().simplify().toString(),d=a.getFormatterMetrics();d.space.mean=i[l].mean,d.duration=l,d.iterations+=1,d.space.deviation=d.space.used-d.space.mean,s+=Math.pow(d.space.deviation,2)})}),this.totalCost=Math.sqrt(s),this.lossHistory.push(this.totalCost),this.totalCost}tune(e){var n;const i=this.tickContexts;if(!i)return 0;const r=(n=e==null?void 0:e.alpha)!==null&&n!==void 0?n:.5;let s=0;return this.totalShift=0,i.list.forEach((o,a,l)=>{const d=i.map[o],f=a>0?i.map[l[a-1]]:void 0,u=a<l.length-1?i.map[l[a+1]]:void 0;d.move(s,f,u);const c=-d.getDeviationCost();c>0?s=-Math.min(d.getFormatterMetrics().freedom.right,Math.abs(c)):c<0&&(u?s=Math.min(u.getFormatterMetrics().freedom.right,Math.abs(c)):s=0),s*=r,this.totalShift+=s}),this.evaluate()}postFormat(){return this.modifierContexts.forEach(e=>{e.array.forEach(n=>n.postFormat())}),this.tickContexts.list.forEach(e=>{this.tickContexts.map[e].postFormat()}),this}joinVoices(e){return this.createModifierContexts(e),this.hasMinTotalWidth=!1,this}format(e,n,i){const r=Object.assign({alignRests:!1},i);this.voices=e;const s=this.formatterOptions.softmaxFactor;return s&&this.voices.forEach(o=>o.setSoftmaxFactor(s)),this.alignRests(e,r.alignRests),this.createTickContexts(e),this.preFormat(n,r.context,e,r.stave),r.stave&&this.postFormat(),this}formatToStave(e,n,i){const r=Object.assign({context:n.getContext()},i),s=n.getNoteEndX()-n.getNoteStartX()-Ki.defaultPadding;return WB("Formatting voices to width: ",s),this.format(e,s,r)}getTickContext(e){var n;return(n=this.tickContexts)===null||n===void 0?void 0:n.map[e]}}Pt.DEBUG=!1;const uE="Ghost note must have valid initialization data to identify duration.";class wS extends Mf{static get CATEGORY(){return"GhostNote"}constructor(e){if(!e)throw new P("BadArguments",uE);let n;if(typeof e=="string")n={duration:e};else if(typeof e=="object")n=e;else throw new P("BadArguments",uE);super(n),this.setWidth(0)}isRest(){return!0}setStave(e){return super.setStave(e),this}addToModifierContext(e){return this}preFormat(){return this.preFormatted=!0,this}draw(){this.setRendered();for(let e=0;e<this.modifiers.length;++e){const n=this.modifiers[e];iB(n)&&(n.setContext(this.getContext()),n.drawWithStyle())}}}class Of extends st{static get CATEGORY(){return"GlyphNote"}constructor(e,n,i){super(n),this.options=Object.assign({ignoreTicks:!1,line:2},i),this.ignoreTicks=this.options.ignoreTicks,this.setGlyph(e)}setGlyph(e){return this.text=e,this}preFormat(){return!this.preFormatted&&this.modifierContext&&this.modifierContext.preFormat(),this.preFormatted=!0,this}drawModifiers(){const e=this.checkContext();for(let n=0;n<this.modifiers.length;n++){const i=this.modifiers[n];i.setContext(e),i.drawWithStyle()}}draw(){const e=this.checkStave(),n=e.checkContext();this.setRendered(),n.openGroup("glyphNote",this.getAttribute("id")),this.x=this.isCenterAligned()?this.getAbsoluteX()-this.getWidth()/2:this.getAbsoluteX(),this.y=e.getYForLine(this.options.line),this.renderText(n,0,0),this.drawModifiers(),n.closeGroup()}}class Rl extends Bn{static get CATEGORY(){return"GraceNote"}static get LEDGER_LINE_OFFSET(){return 2}constructor(e){super(Object.assign({strokePx:Rl.LEDGER_LINE_OFFSET},e)),this.slash=e.slash||!1,this.slur=!0,this.buildNoteHeads(),this.width=3}getStemExtension(){if(this.stemExtensionOverride)return this.stemExtensionOverride;let e=super.getStemExtension();return e=I.HEIGHT*this.getFontScale()-I.HEIGHT+e,e}draw(){super.draw(),this.setRendered();const e=this.stem;if(this.slash&&e){const n=this.getFontScale();let i;const r=this.beam;if(r)r.postFormatted||r.postFormat(),i=this.calcBeamedNotesSlashBBox(8*n,8*n,{stem:6*n,beam:5*n});else{const o=this.getStemDirection(),a=this.getNoteHeadBounds(),l=this.noteHeads[0].getWidth(),d=o===I.DOWN?this.getAbsoluteX():this.getAbsoluteX()+l,f=k.STEM_HEIGHT*n/2,u=o===I.DOWN?a.yBottom+f:a.yTop-f;o===I.DOWN?i={x1:d-l,y1:u-l,x2:d+l,y2:u+l}:i={x1:d-l,y1:u+l,x2:d+l,y2:u-l}}const s=this.checkContext();s.setLineWidth(1*n),s.beginPath(),s.moveTo(i.x1,i.y1),s.lineTo(i.x2,i.y2),s.closePath(),s.stroke()}}calcBeamedNotesSlashBBox(e,n,i){const r=this.beam;if(!r)throw new P("NoBeam","Can't calculate without a beam.");const s=r.slope,a=r.notes[r.notes.length-1]===this?-1:1,l=Math.atan(s*a),d={dx:Math.cos(l)*n,dy:Math.sin(l)*n};e*=this.getStemDirection();const f=Math.atan((d.dy-e)/d.dx),u=Math.cos(f)*i.stem*a,c=Math.sin(f)*i.stem,h=Math.cos(f)*i.beam*a,g=Math.sin(f)*i.beam,E=this.getStemX(),p=r.notes[0].getStemX(),m=r.getBeamYToDraw()+(E-p)*s;return{x1:E-u,y1:m+e-c,x2:E+d.dx*a+h,y2:m+d.dy+g}}}class DS extends st{static get CATEGORY(){return"KeySigNote"}constructor(e,n,i){super({duration:"b"}),this.keySignature=new xs(e,n,i),this.ignoreTicks=!0}addToModifierContext(e){return this}preFormat(){return this.preFormatted=!0,this.keySignature.setStave(this.checkStave()),this.setWidth(this.keySignature.getWidth()),this}draw(){const e=this.checkStave().checkContext();this.setRendered(),this.keySignature.setX(this.getAbsoluteX()),this.keySignature.setContext(e),this.keySignature.drawWithStyle()}}class xS extends Q{static get CATEGORY(){return"MultiMeasureRest"}constructor(e,n){var i;super(),this.xs={left:NaN,right:NaN},this.hasPaddingLeft=!1,this.hasPaddingRight=!1,this.hasLineThickness=!1,this.hasSymbolSpacing=!1;const r=(i=n.numberGlyphPoint)!==null&&i!==void 0?i:W.get("MultiMeasureRest.fontSize");this.fontInfo.size=r,this.numberOfMeasures=e,this.text="";const s=`${this.numberOfMeasures}`;for(const o of s)this.text+=String.fromCodePoint(57472+Number(o));this.hasPaddingLeft=typeof n.paddingLeft=="number",this.hasPaddingRight=typeof n.paddingRight=="number",this.hasLineThickness=typeof n.lineThickness=="number",this.hasSymbolSpacing=typeof n.symbolSpacing=="number",this.renderOptions=Object.assign({useSymbols:!1,showNumber:!0,numberLine:-.5,numberGlyphPoint:r,line:2,spacingBetweenLinesPx:k.STAVE_LINE_DISTANCE,serifThickness:2,semibreveRestGlyphScale:W.get("fontSize"),paddingLeft:0,paddingRight:0,lineThickness:5,symbolSpacing:0},n)}getXs(){return this.xs}setStave(e){return this.stave=e,this}getStave(){return this.stave}checkStave(){return Xe(this.stave,"NoStave","No stave attached to instance.")}drawLine(e,n,i,r){const s=this.renderOptions,o=e.getYForLine(s.line),a=(r-i)*.1;i+=a,r-=a;let l="";const d=new Q;d.setText(l);const f=d.getWidth();if(!f)throw new P("Cannot drawLine if width is 0");for(let u=1;(u+2)*f+i<=r;u++)l+="";l+="",d.setText(l),d.renderText(n,i+(r-i)*.5-d.getWidth()*.5,o)}drawSymbols(e,n,i,r){const s=Math.floor(this.numberOfMeasures/4),o=this.numberOfMeasures%4,a=Math.floor(o/2),l=o%2,d=this.renderOptions,f=new Q;let u="";for(let b=0;b<s;++b)u+=C.restLonga+" ";for(let b=0;b<a;++b)u+=C.restDoubleWhole+" ";f.setText(u);const c=new Q;u="";for(let b=0;b<l;++b)u+=C.restWhole+" ";c.setText(u);const h=f.getWidth()+c.getWidth();let g=i+(r-i)*.5-h*.5;const E=d.line,p=e.getYForLine(E-1),m=e.getYForLine(E);f.renderText(n,g,m),g+=f.getWidth(),c.renderText(n,g,p),g+=c.getWidth()}draw(){const e=this.checkContext();this.setRendered();const n=this.checkStave();let i=n.getNoteStartX(),r=n.getNoteEndX();const s=n.getModifiers(oe.BEGIN);s.length===1&&dS(s[0])&&(i-=s[0].getWidth());const o=this.renderOptions;this.hasPaddingLeft&&(i=n.getX()+o.paddingLeft),this.hasPaddingRight&&(r=n.getX()+n.getWidth()-o.paddingRight),this.xs.left=i,this.xs.right=r,o.useSymbols?this.drawSymbols(n,e,i,r):this.drawLine(n,e,i,r),o.showNumber&&this.renderText(e,i+(r-i)*.5-this.width*.5,n.getYForLine(o.numberLine)-this.height*.5)}}function XB(...t){Pe.DEBUG&&Ge("VexFlow.PedalMarking",t)}class Pe extends Q{static get CATEGORY(){return"PedalMarking"}static createSustain(e){return new Pe(e)}static createSostenuto(e){const n=new Pe(e);return n.setType(Pe.type.MIXED),n.setCustomText("Sost. Ped."),n}static createUnaCorda(e){const n=new Pe(e);return n.setType(Pe.type.TEXT),n.setCustomText("una corda","tre corda"),n}constructor(e){super(),this.notes=e,this.type=Pe.type.TEXT,this.line=0,this.depressText=Pe.GLYPHS.pedalDepress,this.releaseText=Pe.GLYPHS.pedalRelease,this.renderOptions={bracketHeight:10,textMarginRight:6,bracketLineWidth:1,color:"black"}}setType(e){return e=typeof e=="string"?Pe.typeString[e]:e,e>=Pe.type.TEXT&&e<=Pe.type.MIXED&&(this.type=e),this}setCustomText(e,n){return this.depressText=e||"",this.releaseText=n||"",this.setFont(W.getFontInfo("PedalMarking.text")),this}setLine(e){return this.line=e,this}drawBracketed(){const e=this.checkContext();let n=!1,i,r,s=0;this.notes.forEach((o,a,l)=>{var d,f,u,c;n=!n;const h=o.getAbsoluteX(),g=o.checkStave().getYForBottomText(this.line+3);if(h<i)throw new P("InvalidConfiguration","The notes provided must be in order of ascending x positions");const E=l[a+1]===o,p=l[a-1]===o;let m=0;if(n)m=p?5:0,this.type===Pe.type.MIXED&&!p?(s=e.measureText(this.depressText).width,e.fillText(this.depressText,h,g),m=s+this.renderOptions.textMarginRight):(e.beginPath(),e.moveTo(h,g-this.renderOptions.bracketHeight),e.lineTo(h+m,g),e.stroke(),e.closePath());else{const b=o.getVoice().getTickables().indexOf(o),A=o.getVoice().getTickables().length,S=b+1<A?o.getVoice().getTickables()[b+1].getAbsoluteX():((f=(d=o.getStave())===null||d===void 0?void 0:d.getX())!==null&&f!==void 0?f:0)+((c=(u=o.getStave())===null||u===void 0?void 0:u.getWidth())!==null&&c!==void 0?c:0);e.beginPath(),e.moveTo(i,r),e.lineTo(E?h-5:S-5,g),e.lineTo(E?h:S-5,g-this.renderOptions.bracketHeight),e.stroke(),e.closePath()}i=h+m,r=g})}drawText(){const e=this.checkContext();let n=!1,i=0;this.notes.forEach(r=>{var s,o,a,l;n=!n;const d=r.checkStave(),f=r.getAbsoluteX(),u=d.getYForBottomText(this.line+3);if(n)i=e.measureText(this.depressText).width,e.fillText(this.depressText,f,u);else{const c=r.getVoice().getTickables().indexOf(r),h=r.getVoice().getTickables().length,g=c+1<h?r.getVoice().getTickables()[c+1].getAbsoluteX():((o=(s=r.getStave())===null||s===void 0?void 0:s.getX())!==null&&o!==void 0?o:0)+((l=(a=r.getStave())===null||a===void 0?void 0:a.getWidth())!==null&&l!==void 0?l:0);i=e.measureText(this.releaseText).width,e.fillText(this.releaseText,g-i,u)}})}draw(){const e=this.checkContext();this.setRendered(),e.setStrokeStyle(this.renderOptions.color),e.setFillStyle(this.renderOptions.color),e.setFont(this.font),XB("Rendering Pedal Marking"),this.type===Pe.type.BRACKET||this.type===Pe.type.MIXED?(e.setLineWidth(this.renderOptions.bracketLineWidth),this.drawBracketed()):this.type===Pe.type.TEXT&&this.drawText()}}Pe.DEBUG=!1;Pe.GLYPHS={pedalDepress:C.keyboardPedalPed,pedalRelease:C.keyboardPedalUp};Pe.type={TEXT:1,BRACKET:2,MIXED:3};Pe.typeString={text:Pe.type.TEXT,bracket:Pe.type.BRACKET,mixed:Pe.type.MIXED};const zB={1:C.repeat1Bar,2:C.repeat2Bars,4:C.repeat4Bars,slash:C.repeatBarSlash};class BS extends Of{static get CATEGORY(){return"RepeatNote"}constructor(e,n,i){const r=zB[e]||"";super(r,Object.assign({duration:"q",alignCenter:e!=="slash"},n),i)}}function lE(t,e,n,i,r,s,o){t.beginPath(),t.moveTo(e,n),t.lineTo(i,r),t.lineTo(s,o),t.lineTo(e,n),t.closePath(),t.fill()}class mn extends Q{static get CATEGORY(){return"StaveLine"}constructor(e){super(),this.setNotes(e),this.text="",this.renderOptions={paddingLeft:4,paddingRight:3,lineWidth:1,lineDash:void 0,roundedEnd:!0,color:void 0,drawStartArrow:!1,drawEndArrow:!1,arrowheadLength:10,arrowheadAngle:Math.PI/8,textPositionVertical:mn.TextVerticalPosition.TOP,textJustification:mn.TextJustification.CENTER}}setText(e){return this.text=e,this}setNotes(e){if(!e.firstNote&&!e.lastNote)throw new P("BadArguments","Notes needs to have either firstNote or lastNote set.");if(e.firstIndexes||(e.firstIndexes=[0]),e.lastIndexes||(e.lastIndexes=[0]),e.firstIndexes.length!==e.lastIndexes.length)throw new P("BadArguments","Connected notes must have same number of indexes.");return this.notes=e,this.firstNote=e.firstNote,this.firstIndexes=e.firstIndexes,this.lastNote=e.lastNote,this.lastIndexes=e.lastIndexes,this}applyLineStyle(){const e=this.checkContext(),n=this.renderOptions;n.lineDash&&e.setLineDash(n.lineDash),n.lineWidth&&e.setLineWidth(n.lineWidth),n.roundedEnd?e.setLineCap("round"):e.setLineCap("square")}drawArrowLine(e,n,i){const r=this.renderOptions.drawStartArrow&&this.renderOptions.drawEndArrow,s=n.x,o=n.y,a=i.x,l=i.y,d=Math.sqrt((a-s)*(a-s)+(l-o)*(l-o)),f=(d-this.renderOptions.arrowheadLength/3)/d;let u,c,h,g;this.renderOptions.drawEndArrow||r?(u=Math.round(s+(a-s)*f),c=Math.round(o+(l-o)*f)):(u=a,c=l),this.renderOptions.drawStartArrow||r?(h=s+(a-s)*(1-f),g=o+(l-o)*(1-f)):(h=s,g=o),this.renderOptions.color&&(e.setStrokeStyle(this.renderOptions.color),e.setFillStyle(this.renderOptions.color)),e.beginPath(),e.moveTo(h,g),e.lineTo(u,c),e.stroke(),e.closePath();const E=Math.atan2(l-o,a-s),p=Math.abs(this.renderOptions.arrowheadLength/Math.cos(this.renderOptions.arrowheadAngle));let m,b,A,S,w,D;(this.renderOptions.drawEndArrow||r)&&(m=E+Math.PI+this.renderOptions.arrowheadAngle,A=a+Math.cos(m)*p,S=l+Math.sin(m)*p,b=E+Math.PI-this.renderOptions.arrowheadAngle,w=a+Math.cos(b)*p,D=l+Math.sin(b)*p,lE(e,A,S,a,l,w,D)),(this.renderOptions.drawStartArrow||r)&&(m=E+this.renderOptions.arrowheadAngle,A=s+Math.cos(m)*p,S=o+Math.sin(m)*p,b=E-this.renderOptions.arrowheadAngle,w=s+Math.cos(b)*p,D=o+Math.sin(b)*p,lE(e,A,S,s,o,w,D))}draw(){const e=this.checkContext();this.setRendered();const n=this.firstNote,i=this.lastNote,r=this.renderOptions;this.applyLineStyle();let s={x:0,y:0},o={x:0,y:0};this.firstIndexes.forEach((h,g)=>{const E=this.lastIndexes[g];s=n.getModifierStartXY(2,h),o=i.getModifierStartXY(1,E);const p=s.y>o.y;s.x+=n.getMetrics().modRightPx+r.paddingLeft,o.x-=i.getMetrics().modLeftPx+r.paddingRight;const m=n.getGlyphWidth();n.getKeyProps()[h].displaced&&n.getStemDirection()===1&&(s.x+=m+r.paddingLeft),i.getKeyProps()[E].displaced&&i.getStemDirection()===-1&&(o.x-=m+r.paddingRight),s.y+=p?-3:1,o.y+=p?2:0,this.drawArrowLine(e,s,o)});const a=this.width,l=r.textJustification;let d=0;l===mn.TextJustification.LEFT?d=s.x:l===mn.TextJustification.CENTER?d=(o.x-s.x)/2+s.x-a/2:l===mn.TextJustification.RIGHT&&(d=o.x-a);let f=0;const u=r.textPositionVertical;u===mn.TextVerticalPosition.TOP?f=n.checkStave().getYForTopText():u===mn.TextVerticalPosition.BOTTOM&&(f=n.checkStave().getYForBottomText(k.TEXT_HEIGHT_OFFSET_HACK));const c=r.color;this.applyStyle(e,{fillStyle:c,strokeStyle:c}),this.renderText(e,d,f)}}mn.TextVerticalPosition={TOP:1,BOTTOM:2};mn.TextJustification=Sn;class TS extends Q{static get CATEGORY(){return"System"}constructor(e={}){super(),this.setOptions(e),this.partStaves=[],this.partStaveInfos=[],this.partVoices=[]}setOptions(e={}){if(!e.factory)throw new P("NoFactory","System.setOptions(options) requires a factory.");this.factory=e.factory,this.options=Object.assign(Object.assign({factory:this.factory,x:10,y:10,width:500,spaceBetweenStaves:12,autoWidth:!1,noJustification:!1,debugFormatter:!1,formatIterations:0,noPadding:!1},e),{details:Object.assign({alpha:.5},e.details),formatOptions:Object.assign({},e.formatOptions)}),this.options.noJustification===!1&&typeof e.width>"u"&&(this.options.autoWidth=!0)}getX(){return this.options.x}setX(e){return this.options.x=e,this.partStaves.forEach(n=>{n.setX(e)}),this}getY(){return this.options.y}setY(e){return this.options.y=e,this.partStaves.forEach(n=>{n.setY(e)}),this}getStaves(){return this.partStaves}getVoices(){return this.partVoices}setContext(e){return super.setContext(e),this.factory.setContext(e),this}addConnector(e="double"){return this.connector=this.factory.StaveConnector({topStave:this.partStaves[0],bottomStave:this.partStaves[this.partStaves.length-1],type:e}),this.connector}addStave(e){var n;const i=Object.assign({leftBar:!1},e.options),r=(n=e.stave)!==null&&n!==void 0?n:this.factory.Stave({x:this.options.x,y:this.options.y,width:this.options.width,options:i}),s=Object.assign(Object.assign({spaceAbove:0,spaceBelow:0,debugNoteMetrics:!1,noJustification:!1},e),{options:i}),o=this.getContext();return s.voices.forEach(a=>{a.setContext(o).setStave(r).getTickables().forEach(l=>l.setStave(r)),this.partVoices.push(a)}),this.partStaves.push(r),this.partStaveInfos.push(s),r}addVoices(e){const n=this.getContext();e.forEach(i=>{i.setContext(n),this.partVoices.push(i)})}format(){const e=this.options.details;let n=0;const i=new Pt(e);this.formatter=i;let r=this.options.y,s=0;const o=[];this.partStaves.forEach((a,l)=>{r=r+a.space(this.partStaveInfos[l].spaceAbove),a.setY(r),r=r+a.space(this.partStaveInfos[l].spaceBelow),r=r+a.space(this.options.spaceBetweenStaves),this.partStaveInfos[l].debugNoteMetrics&&(o.push({y:r,stave:a}),r+=15),s=Math.max(s,a.getNoteStartX())}),this.partVoices.forEach(a=>{a.getTickables().forEach(l=>{const d=l.getStave();d&&l.setStave(d)})}),i.joinVoices(this.partVoices),this.partStaves.forEach(a=>a.setNoteStartX(s)),this.options.autoWidth&&this.partVoices.length>0?(n=i.preCalculateMinTotalWidth(this.partVoices),this.options.width=n+Ki.rightPadding+(s-this.options.x),this.partStaves.forEach(a=>{a.setWidth(this.options.width)})):n=this.options.noPadding?this.options.width-(s-this.options.x):this.options.width-(s-this.options.x)-Ki.defaultPadding,this.partVoices.length>0&&i.format(this.partVoices,this.options.noJustification?0:n,this.options.formatOptions),i.postFormat();for(let a=0;a<this.options.formatIterations;a++)i.tune(e);this.startX=s,this.debugNoteMetricsYs=o,this.lastY=r,Ki.formatBegModifiers(this.partStaves)}getBoundingBox(){var e;return new oi(this.options.x,this.options.y,this.options.width,((e=this.lastY)!==null&&e!==void 0?e:0)-this.options.y)}draw(){const e=this.checkContext();if(!this.formatter||!this.startX||!this.lastY||!this.debugNoteMetricsYs)throw new P("NoFormatter","format() must be called before draw()");this.setRendered(),this.options.debugFormatter&&Pt.plotDebugging(e,this.formatter,this.startX,this.options.y,this.lastY),this.debugNoteMetricsYs.forEach(n=>{this.partVoices.forEach(i=>{i.getTickables().forEach(r=>{r.getStave()===n.stave&&st.plotMetrics(e,r,n.y)})})})}}function YB(t,e){const n=[];let i=[];for(let r=1;r<=t;r++)e.indexOf(r)>-1?(n.push(i),i=[]):i.push(r);return i.length>0&&n.push(i),n}function VB(t,e,n,i){const r=i!==1,s=i!==-1,o=n.getSpacingBetweenLines(),a=n.getNumLines(),l=[];return e.forEach(d=>{const f=d.indexOf(a)>-1,u=d.indexOf(1)>-1;if(r&&u||s&&f)return;d.length===1&&d.push(d[0]);const c=[];d.forEach((h,g,E)=>{const p=h===1,m=h===a;let b=n.getYForLine(h-1);g===0&&!p?b-=o/2-1:g===E.length-1&&!m&&(b+=o/2-1),c.push(b),i===1&&p?c.push(t-2):i===-1&&m&&c.push(t+2)}),l.push(c.sort((h,g)=>h-g))}),l}class oa extends Mf{static get CATEGORY(){return"TabNote"}constructor(e,n=!1){super(e),this.fretElement=[],this.greatestString=()=>this.positions.map(i=>i.str).reduce((i,r)=>i>r?i:r),this.leastString=()=>this.positions.map(i=>i.str).reduce((i,r)=>i<r?i:r),this.ghost=!1,this.positions=e.positions||[],this.renderOptions=Object.assign(Object.assign({},this.renderOptions),{drawStem:n,drawDots:n,drawStemThroughStave:!1,yShift:0}),this.glyphProps=st.getGlyphProps(this.duration,this.noteType),Xe(this.glyphProps,"BadArguments",`No glyph found for duration '${this.duration}' and type '${this.noteType}'`),this.buildStem(),e.stemDirection?this.setStemDirection(e.stemDirection):this.setStemDirection(I.UP),this.ghost=!1,this.updateWidth()}reset(){return super.reset(),this.stave&&this.setStave(this.stave),this}setGhost(e){return this.ghost=e,this.updateWidth(),this}hasStem(){return!!this.renderOptions.drawStem}getStemExtension(){return this.stemExtensionOverride!==void 0?this.stemExtensionOverride:this.flag.getHeight()>I.HEIGHT?this.flag.getHeight()-I.HEIGHT:0}static tabToElement(e){let n;return e.toUpperCase()==="X"?(n=new Q("TabNote"),n.setText(C.accidentalDoubleSharp)):(n=new Q("TabNote.text"),n.setText(e),n.setYShift(n.getHeight()/2)),n}updateWidth(){this.fretElement=[],this.width=0;for(let e=0;e<this.positions.length;++e){let n=this.positions[e].fret;this.ghost&&(n="("+n+")");const i=oa.tabToElement(n.toString());this.fretElement.push(i),this.width=Math.max(i.getWidth(),this.width)}}setStave(e){super.setStave(e);const n=e.getContext();this.setContext(n);const i=this.positions.map(({str:r})=>e.getYForLine(Number(r)-1));return this.setYs(i),this.stem&&this.stem.setYBounds(this.getStemY(),this.getStemY()),this}getPositions(){return this.positions}getModifierStartXY(e,n){if(!this.preFormatted)throw new P("UnformattedNote","Can't call GetModifierStartXY on an unformatted note");if(this.ys.length===0)throw new P("NoYValues","No Y-Values calculated for this note.");let i=0;return e===q.Position.LEFT?i=-1*2:e===q.Position.RIGHT?i=this.width+2:(e===q.Position.BELOW||e===q.Position.ABOVE)&&(i=this.width/2),{x:this.getAbsoluteX()+i,y:this.ys[n]}}getLineForRest(){return Number(this.positions[0].str)}preFormat(){this.preFormatted||(this.modifierContext&&this.modifierContext.preFormat(),this.preFormatted=!0)}getStemX(){return this.getCenterGlyphX()}getStemY(){const e=this.checkStave().getNumLines(),n=-.5,i=e-.5,r=I.UP===this.stemDirection?n:i;return this.checkStave().getYForLine(r)}getStemExtents(){return this.checkStem().getExtents()}drawFlag(){const{beam:e,glyphProps:n,renderOptions:{drawStem:i}}=this,r=this.checkContext(),s=e===void 0&&i;if(n.codeFlagUp&&s){const o=this.getStemX(),a=this.getStemDirection()===I.DOWN?this.getStemY()-this.checkStem().getHeight()-this.getStemExtension():this.getStemY()-this.checkStem().getHeight()+this.getStemExtension();this.flag.setContext(r).setX(o).setY(a).drawWithStyle()}}drawModifiers(){this.modifiers.forEach(e=>{rB(e)&&!this.renderOptions.drawDots||(e.setContext(this.getContext()),e.drawWithStyle())})}drawStemThrough(){const e=this.getStemX(),n=this.getStemY(),i=this.checkContext(),r=this.renderOptions.drawStem,s=this.renderOptions.drawStemThroughStave;if(r&&s){const o=this.checkStave().getNumLines(),a=this.positions.map(f=>Number(f.str)),l=YB(o,a),d=VB(n,l,this.checkStave(),this.getStemDirection());i.setLineWidth(I.WIDTH),d.forEach(f=>{f.length!==0&&(i.beginPath(),i.moveTo(e,f[0]),i.lineTo(e,f[f.length-1]),i.stroke(),i.closePath())})}}drawPositions(){const e=this.checkContext(),n=this.getAbsoluteX(),i=this.ys;for(let r=0;r<this.positions.length;++r){const s=i[r]+this.renderOptions.yShift,o=this.fretElement[r],a=n-o.getWidth()/2;e.clearRect(a-2,s-3,o.getWidth()+4,6),o.renderText(e,a,s)}}draw(){const e=this.checkContext();if(this.ys.length===0)throw new P("NoYValues","Can't draw note without Y values.");this.setRendered();const n=this.beam===void 0&&this.renderOptions.drawStem;if(e.openGroup("tabnote",this.getAttribute("id")),this.drawPositions(),this.drawStemThrough(),this.stem&&n){const i=this.getStemX();this.stem.setNoteHeadXBounds(i,i),this.stem.setContext(e).drawWithStyle()}this.drawFlag(),this.drawModifiers(),e.closeGroup()}}class NS extends Ki{static get CATEGORY(){return"TabStave"}constructor(e,n,i,r){const s=Object.assign({spacingBetweenLinesPx:13,numLines:6,topTextPosition:1},r);super(e,n,i,s)}getYForGlyphs(){return this.getYForLine(2.5)}addTabGlyph(){return this.addClef("tab"),this}}function qB(...t){Ls.DEBUG&&Ge("VexFlow.TextBracket",t)}var Rn;(function(t){t[t.TOP=1]="TOP",t[t.BOTTOM=-1]="BOTTOM"})(Rn||(Rn={}));class Ls extends Q{static get CATEGORY(){return"TextBracket"}static get Position(){return Rn}static get PositionString(){return{top:Rn.TOP,bottom:Rn.BOTTOM}}constructor({start:e,stop:n,text:i="",superscript:r="",position:s=Rn.TOP}){super(),this.start=e,this.stop=n,this.textElement=new Q("TextBracket"),this.textElement.setText(i),this.superscriptElement=new Q("TextBracket"),this.superscriptElement.setText(r);const o=ne.scaleSize(this.fontInfo.size,.714286);this.superscriptElement.setFontSize(o),this.position=typeof s=="string"?Ls.PositionString[s]:s,this.line=1,this.renderOptions={dashed:!0,dash:[5],color:"black",lineWidth:1,showBracket:!0,bracketHeight:8,underlineSuperscript:!0}}applyStyle(e){this.textElement.setFont(this.fontInfo);const{family:n,size:i,weight:r,style:s}=this.fontInfo,o=ne.scaleSize(i,.714286);this.superscriptElement.setFont(n,o,r,s);const a=this.renderOptions;return e.setStrokeStyle(a.color),e.setFillStyle(a.color),e.setLineWidth(a.lineWidth),this}setDashed(e,n){return this.renderOptions.dashed=e,n&&(this.renderOptions.dash=n),this}setLine(e){return this.line=e,this}draw(){const e=this.checkContext();this.setRendered();let n=0;switch(this.position){case Rn.TOP:n=this.start.checkStave().getYForTopText(this.line);break;case Rn.BOTTOM:n=this.start.checkStave().getYForBottomText(this.line+k.TEXT_HEIGHT_OFFSET_HACK);break;default:throw new P("InvalidPosition",`The position ${this.position} is invalid.`)}const i={x:this.start.getAbsoluteX(),y:n},r={x:this.stop.getAbsoluteX(),y:n};qB("Rendering TextBracket: start:",i,"stop:",r,"y:",n);const s=this.renderOptions.bracketHeight*this.position;this.textElement.renderText(e,i.x,i.y);const o=this.textElement.getWidth(),a=this.textElement.getHeight(),l=i.y-a/2.5;this.superscriptElement.renderText(e,i.x+o+1,l);const d=this.superscriptElement.getWidth(),f=this.superscriptElement.getHeight();let u=i.x,c=l;const h=r.x+this.stop.getGlyphWidth();this.position===Rn.TOP?(u+=o+d+5,c-=f/2.7):this.position===Rn.BOTTOM&&(c+=f/2.7,u+=o+2,this.renderOptions.underlineSuperscript||(u+=d)),this.renderOptions.dashed?(ke.drawDashedLine(e,u,c,h,c,this.renderOptions.dash),this.renderOptions.showBracket&&ke.drawDashedLine(e,h,c+1*this.position,h,c+s,this.renderOptions.dash)):(e.beginPath(),e.moveTo(u,c),e.lineTo(h,c),this.renderOptions.showBracket&&e.lineTo(h,c+s),e.stroke(),e.closePath())}}Ls.DEBUG=!1;function cE(...t){Os.DEBUG&&Ge("VexFlow.TextDynamics",t)}class Os extends st{static get CATEGORY(){return"TextDynamics"}static get GLYPHS(){return{f:C.dynamicForte,p:C.dynamicPiano,m:C.dynamicMezzo,s:C.dynamicSforzando,z:C.dynamicZ,r:C.dynamicRinforzando}}constructor(e){var n,i;super(e),this.sequence=((n=e.text)!==null&&n!==void 0?n:"").toLowerCase(),this.line=(i=e.line)!==null&&i!==void 0?i:0,this.text="",cE("New Dynamics Text: ",this.sequence)}setLine(e){return this.line=e,this}preFormat(){return this.text="",this.sequence.split("").forEach(e=>{const n=Os.GLYPHS[e];if(!n)throw new P("Invalid dynamics character: "+e);this.text+=n}),this.preFormatted=!0,this}draw(){this.setRendered();const e=this.getAbsoluteX(),n=this.checkStave().getYForLine(this.line+-3);cE("Rendering Dynamics: ",this.sequence),this.renderText(this.checkContext(),e,n)}}Os.DEBUG=!1;class FS extends st{static get CATEGORY(){return"TimeSigNote"}constructor(e,n){super({duration:"b"}),this.timeSig=new ri(e,n),this.setWidth(this.timeSig.getWidth()),this.ignoreTicks=!0}addToModifierContext(e){return this}preFormat(){return this.preFormatted=!0,this}draw(){const e=this.checkStave(),n=this.checkContext();this.setRendered(),n.openGroup("timesignote",this.getAttribute("id")),this.timeSig.drawAt(n,e,this.getAbsoluteX()),n.closeGroup()}}class $t extends Q{static get CATEGORY(){return"Tuplet"}static get LOCATION_TOP(){return 1}static get LOCATION_BOTTOM(){return-1}static get NESTING_OFFSET(){return 15}constructor(e,n={}){if(super(),!e||!e.length)throw new P("BadArguments","No notes provided for tuplet.");this.notes=e;const i=n.numNotes!==void 0?n.numNotes:e.length,r=n.notesOccupied||2,s=n.bracketed!==void 0?n.bracketed:e.some(f=>!f.hasBeam()),o=n.ratioed!==void 0?n.ratioed:Math.abs(r-i)>1,a=n.location||$t.LOCATION_TOP,l=n.yOffset||W.get("Tuplet.yOffset"),d=n.textYOffset||W.get("Tuplet.textYOffset");this.options={bracketed:s,location:a,notesOccupied:r,numNotes:i,ratioed:o,yOffset:l,textYOffset:d},this.textElement=new Q("Tuplet"),this.setTupletLocation(a||$t.LOCATION_TOP),Pt.AlignRestsToNotes(e,!0,!0),this.resolveGlyphs(),this.attach()}attach(){for(let e=0;e<this.notes.length;e++)this.notes[e].setTuplet(this)}detach(){for(let e=0;e<this.notes.length;e++)this.notes[e].resetTuplet(this)}setBracketed(e){return this.options.bracketed=e,this}setRatioed(e){return this.options.ratioed=e,this}setTupletLocation(e){return e!==$t.LOCATION_TOP&&e!==$t.LOCATION_BOTTOM&&(console.warn(`Invalid tuplet location [${e}]. Using Tuplet.LOCATION_TOP.`),e=$t.LOCATION_TOP),this.options.location=e,this}getNotes(){return this.notes}getNoteCount(){return this.options.numNotes}getNotesOccupied(){return this.options.notesOccupied}setNotesOccupied(e){this.detach(),this.options.notesOccupied=e,this.resolveGlyphs(),this.attach()}resolveGlyphs(){let e="",n="",i=this.options.numNotes;for(;i>=1;)e=String.fromCharCode(59520+i%10)+e,i=Math.floor(i/10);if(this.options.ratioed){for(i=this.options.notesOccupied;i>=1;)n=String.fromCharCode(59520+i%10)+n,i=Math.floor(i/10);n=C.tupletColon+n}this.textElement.setText(e+n)}getNestedTupletCount(){const{location:e}=this.options,n=this.notes[0];let i=s(n,e),r=s(n,e);function s(o,a){return o.getTupletStack().filter(l=>l.options.location===a).length}return this.notes.forEach(o=>{const a=s(o,e);i=a>i?a:i,r=a<r?a:r}),i-r}getYPosition(){var e;const n=this.getNestedTupletCount()*$t.NESTING_OFFSET*-this.options.location,i=(e=this.options.yOffset)!==null&&e!==void 0?e:0,r=this.notes[0];let s;if(this.options.location===$t.LOCATION_TOP){s=r.checkStave().getYForLine(0)-1.5*k.STAVE_LINE_DISTANCE;for(let o=0;o<this.notes.length;++o){const a=this.notes[o];let l=0;const d=a.getModifierContext();d&&(l=Math.max(l,d.getState().topTextLine));const f=a.getYForTopText(l)-2*k.STAVE_LINE_DISTANCE;if(a.hasStem()||a.isRest()){const u=a.getStemDirection()===I.UP?a.getStemExtents().topY-k.STAVE_LINE_DISTANCE:a.getStemExtents().baseY-2*k.STAVE_LINE_DISTANCE;s=Math.min(u,s),l>0&&(s=Math.min(f,s))}}}else{let o=4;this.notes.forEach(a=>{const l=a.getModifierContext();l&&(o=Math.max(o,l.getState().textLine+1))}),s=r.checkStave().getYForLine(o)+2*k.STAVE_LINE_DISTANCE;for(let a=0;a<this.notes.length;++a)if(this.notes[a].hasStem()||this.notes[a].isRest()){const l=this.notes[a].getStemDirection()===I.UP?this.notes[a].getStemExtents().baseY+2*k.STAVE_LINE_DISTANCE:this.notes[a].getStemExtents().topY+k.STAVE_LINE_DISTANCE;l>s&&(s=l)}}return s+n+i}draw(){const{location:e,bracketed:n,textYOffset:i}=this.options,r=this.checkContext();let s=0,o=0;const a=this.notes[0],l=this.notes[this.notes.length-1];n?(s=a.getTieLeftX()-5,this.width=l.getTieRightX()-s+5):(s=a.getStemX(),this.width=l.getStemX()-s),o=this.getYPosition();const f=s+this.width/2-this.textElement.getWidth()/2;if(r.openGroup("tuplet",this.getAttribute("id")),n){const c=this.width/2-this.textElement.getWidth()/2-5;c>0&&(r.fillRect(s,o,c,1),r.fillRect(s+this.width/2+this.textElement.getWidth()/2+5,o,c,1),r.fillRect(s,o+(e===$t.LOCATION_BOTTOM?1:0),1,e*10),r.fillRect(s+this.width,o+(e===$t.LOCATION_BOTTOM?1:0),1,e*10))}this.textElement.renderText(r,f,o+this.textElement.getHeight()/2+(e===$t.LOCATION_TOP?-1:1)*i);const u=this.getBoundingBox();r.pointerRect(u.getX(),u.getY(),u.getW(),u.getH()),r.closeGroup(),this.setRendered()}}function JB(...t){Il.DEBUG&&Ge("VexFlow.VibratoBracket",t)}class Il extends Q{static get CATEGORY(){return"VibratoBracket"}constructor(e){super(),this.vibrato=new Lf,e.start&&(this.start=e.start),e.stop&&(this.stop=e.stop),this.line=1}setLine(e){return this.line=e,this}setVibratoCode(e){return this.vibrato.setVibratoCode(e),this}draw(){const e=this.checkContext();this.setRendered();const n=this.start&&this.start.checkStave().getYForTopText(this.line)||this.stop&&this.stop.checkStave().getYForTopText(this.line)||0,i=this.start&&this.start.getAbsoluteX()||this.stop&&this.stop.checkStave().getTieStartX()||0,r=this.stop&&this.stop.getAbsoluteX()-this.stop.getWidth()-5||this.start&&this.start.checkStave().getTieEndX()-10||0;this.vibrato.setVibratoWidth(r-i),JB("Rendering VibratoBracket: startX:",i,"stopX:",r,"y:",n),this.vibrato.renderText(e,i,n)}}Il.DEBUG=!1;function dE(...t){aa.DEBUG&&Ge("VexFlow.Factory",t)}class aa{static newFromElementId(e,n=500,i=200){return new aa({renderer:{elementId:e,width:n,height:i}})}constructor(e={}){dE("New factory: ",e),this.options={stave:{space:10},renderer:{elementId:"",width:500,height:200,background:"#FFF"}},this.setOptions(e)}reset(){this.renderQ=[],this.systems=[],this.staves=[],this.voices=[],this.stave=void 0}setOptions(e){this.options=Object.assign(Object.assign({},this.options),e),this.initRenderer(),this.reset()}initRenderer(){const{elementId:e,width:n,height:i,background:r}=this.options.renderer;if(e===null)return;if(e==="")throw dE(this),new P("renderer.elementId not set in FactoryOptions");let s=this.options.renderer.backend;if(s===void 0){const o=document.getElementById(e);Tf(o)?s=ke.Backends.CANVAS:s=ke.Backends.SVG}this.context=ke.buildContext(e,s,n,i,r)}getContext(){return this.context}setContext(e){return this.context=e,this}getStave(){return this.stave}getVoices(){return this.voices}Stave(e){const n=this.options.stave.space,i=Object.assign({x:0,y:0,width:this.options.renderer.width-n*1,options:{spacingBetweenLinesPx:n*1}},e),r=new Ki(i.x,i.y,i.width,i.options);return this.staves.push(r),r.setContext(this.context),this.stave=r,r}TabStave(e){const n=this.options.stave.space,i=Object.assign({x:0,y:0,width:this.options.renderer.width-n*1,options:{spacingBetweenLinesPx:n*1.3}},e),r=new NS(i.x,i.y,i.width,i.options);return this.staves.push(r),r.setContext(this.context),this.stave=r,r}StaveNote(e){const n=new Bn(e);return this.stave&&n.setStave(this.stave),n.setContext(this.context),this.renderQ.push(n),n}GlyphNote(e,n,i){const r=new Of(e,n,i);return this.stave&&r.setStave(this.stave),r.setContext(this.context),this.renderQ.push(r),r}RepeatNote(e,n,i){const r=new BS(e,n,i);return this.stave&&r.setStave(this.stave),r.setContext(this.context),this.renderQ.push(r),r}GhostNote(e){const n=new wS(e);return this.stave&&n.setStave(this.stave),n.setContext(this.context),this.renderQ.push(n),n}TextNote(e){const n=new ks(e);return this.stave&&n.setStave(this.stave),n.setContext(this.context),this.renderQ.push(n),n}BarNote(e={}){const n=new Fl(e.type);return this.stave&&n.setStave(this.stave),n.setContext(this.context),this.renderQ.push(n),n}ClefNote(e){const n=Object.assign({type:"treble",options:{size:"default",annotation:void 0}},e),i=new SS(n.type,n.options.size,n.options.annotation);return this.stave&&i.setStave(this.stave),i.setContext(this.context),this.renderQ.push(i),i}TimeSigNote(e){const n=Object.assign({time:"4/4"},e),i=new FS(n.time);return this.stave&&i.setStave(this.stave),i.setContext(this.context),this.renderQ.push(i),i}KeySigNote(e){const n=new DS(e.key,e.cancelKey,e.alterKey);return this.stave&&n.setStave(this.stave),n.setContext(this.context),this.renderQ.push(n),n}TabNote(e){const n=new oa(e);return this.stave&&n.setStave(this.stave),n.setContext(this.context),this.renderQ.push(n),n}GraceNote(e){const n=new Rl(e);return this.stave&&n.setStave(this.stave),n.setContext(this.context),n}GraceNoteGroup(e){const n=new sa(e.notes,e.slur);return n.setContext(this.context),n}Accidental(e){const n=new Or(e.type);return n.setContext(this.context),n}Annotation(e){const n=Object.assign({text:"p",hJustify:Ft.CENTER,vJustify:Mt.BOTTOM},e),i=new Yt(n.text);return i.setJustification(n.hJustify),i.setVerticalJustification(n.vJustify),i.setFont(n.font),i.setContext(this.context),i}ChordSymbol(e){const n=Object.assign({vJustify:"top",hJustify:"center"},e),i=new je;return i.setHorizontal(n.hJustify),i.setVertical(n.vJustify),typeof n.fontFamily=="string"&&typeof n.fontSize=="number"?typeof n.fontWeight=="string"?i.setFont(n.fontFamily,n.fontSize,n.fontWeight):i.setFont(n.fontFamily,n.fontSize,""):typeof n.fontSize=="number"&&i.setFontSize(n.fontSize),i.setContext(this.context),i}Articulation(e){var n;const i=new ui((n=e==null?void 0:e.type)!==null&&n!==void 0?n:"a.");return(e==null?void 0:e.position)!==void 0&&i.setPosition(e.position),(e==null?void 0:e.betweenLines)!==void 0&&i.setBetweenLines(e.betweenLines),i.setContext(this.context),i}Ornament(e,n){const i=Object.assign({type:e,accidental:""},n),r=new jt(e);return(n==null?void 0:n.position)!==void 0&&r.setPosition(n.position),i.upperAccidental&&r.setUpperAccidental(i.upperAccidental),i.lowerAccidental&&r.setLowerAccidental(i.lowerAccidental),typeof i.delayed<"u"&&r.setDelayed(i.delayed),r.setContext(this.context),r}TextDynamics(e){const n=Object.assign({text:"p",duration:"q",dots:0,line:0},e),i=new Os({text:n.text,line:n.line,duration:n.duration,dots:n.dots});return this.stave&&i.setStave(this.stave),i.setContext(this.context),this.renderQ.push(i),i}Fingering(e){const n=Object.assign({number:"0",position:"left"},e),i=new Pl(n.number);return i.setPosition(n.position),i.setContext(this.context),i}StringNumber(e,n=!0){const i=new kf(e.number);return i.setPosition(e.position),i.setContext(this.context),i.setDrawCircle(n),i}TickContext(){return new qo}ModifierContext(){return new Ds}MultiMeasureRest(e){const n=Xe(e.numberOfMeasures,"NoNumberOfMeasures"),i=new xS(n,e);return i.setContext(this.context),this.renderQ.push(i),i}Voice(e){const n=Object.assign({time:"4/4"},e),i=new Un(n.time);return this.voices.push(i),i}StaveConnector(e){const n=new ae(e.topStave,e.bottomStave);return n.setType(e.type).setContext(this.context),this.renderQ.push(n),n}Formatter(e){return new Pt(e)}Tuplet(e){const n=Object.assign({notes:[],options:{}},e),i=new $t(n.notes,n.options).setContext(this.context);return this.renderQ.push(i),i}Beam(e){var n,i,r,s,o;const a=new er(e.notes,(n=e.options)===null||n===void 0?void 0:n.autoStem).setContext(this.context);return a.breakSecondaryAt((r=(i=e.options)===null||i===void 0?void 0:i.secondaryBeamBreaks)!==null&&r!==void 0?r:[]),!((s=e.options)===null||s===void 0)&&s.partialBeamDirections&&Object.entries((o=e.options)===null||o===void 0?void 0:o.partialBeamDirections).forEach(([l,d])=>{a.setPartialBeamSideAt(Number(l),d)}),this.renderQ.push(a),a}Curve(e){const n=new Ml(e.from,e.to,e.options).setContext(this.context);return this.renderQ.push(n),n}StaveTie(e){var n;const i=new yl({firstNote:e.from,lastNote:e.to,firstIndexes:e.firstIndexes,lastIndexes:e.lastIndexes},e.text);return!((n=e.options)===null||n===void 0)&&n.direction&&i.setDirection(e.options.direction),i.setContext(this.context),this.renderQ.push(i),i}StaveLine(e){var n,i;const r=new mn({firstNote:e.from,lastNote:e.to,firstIndexes:e.firstIndexes,lastIndexes:e.lastIndexes});return!((n=e.options)===null||n===void 0)&&n.text&&r.setText(e.options.text),!((i=e.options)===null||i===void 0)&&i.font&&r.setFont(e.options.font),r.setContext(this.context),this.renderQ.push(r),r}VibratoBracket(e){const n=new Il({start:e.from,stop:e.to});return e.options.line&&n.setLine(e.options.line),e.options.code&&n.setVibratoCode(e.options.code),n.setContext(this.context),this.renderQ.push(n),n}TextBracket(e){const n=new Ls({start:e.from,stop:e.to,text:e.text,superscript:e.options.superscript,position:e.options.position});return e.options.line&&n.setLine(e.options.line),e.options.font&&n.setFont(e.options.font),n.setContext(this.context),this.renderQ.push(n),n}System(e={}){e.factory=this;const n=new TS(e).setContext(this.context);return this.systems.push(n),n}EasyScore(e={}){return e.factory=this,new Ll(e)}PedalMarking(e){const n=Object.assign({notes:[],options:{style:"mixed"}},e),i=new Pe(n.notes);return i.setType(Pe.typeString[n.options.style]),i.setContext(this.context),this.renderQ.push(i),i}NoteSubGroup(e){const n=Object.assign({notes:[]},e),i=new Pf(n.notes);return i.setContext(this.context),i}draw(){const e=this.context;this.systems.forEach(n=>n.setContext(e).format()),this.staves.forEach(n=>n.setContext(e).drawWithStyle()),this.voices.forEach(n=>n.setContext(e).drawWithStyle()),this.renderQ.forEach(n=>{n.isRendered()||n.setContext(e).drawWithStyle()}),this.systems.forEach(n=>n.setContext(e).drawWithStyle()),this.reset()}}aa.DEBUG=!1;class ZB extends oa{static get CATEGORY(){return"GraceTabNote"}constructor(e){super(e,!1),this.renderOptions=Object.assign(Object.assign({},this.renderOptions),{yShift:.3}),this.updateWidth()}}class KB{constructor(e){this.music=new De,this.setKey(e)}setKey(e){return this.key=e,this.reset(),this}getKey(){return this.key}reset(){if(this.keyParts=this.music.getKeyParts(this.key),this.keyString=this.keyParts.root,this.keyParts.accidental&&(this.keyString+=this.keyParts.accidental),!De.scaleTypes[this.keyParts.type])throw new P("BadArguments",`Unsupported key type: ${this.key}`);this.scale=this.music.getScaleTones(this.music.getNoteValue(this.keyString),De.scaleTypes[this.keyParts.type]),this.scaleMap={},this.scaleMapByValue={},this.originalScaleMapByValue={};const n=De.rootIndexes[this.keyParts.root];for(let i=0;i<De.roots.length;++i){const r=(n+i)%De.roots.length,s=De.roots[r],o=this.music.getRelativeNoteName(s,this.scale[i]);this.scaleMap[s]=o,this.scaleMapByValue[this.scale[i]]=o,this.originalScaleMapByValue[this.scale[i]]=o}return this}getAccidental(e){const n=this.music.getKeyParts(e).root,i=this.music.getNoteParts(this.scaleMap[n]);return{note:this.scaleMap[n],accidental:i.accidental}}selectNote(e){e=e.toLowerCase();const n=this.music.getNoteParts(e),i=this.scaleMap[n.root],r=this.music.getNoteParts(i);if(i===e)return{note:i,accidental:n.accidental,change:!1};const s=this.scaleMapByValue[this.music.getNoteValue(e)];if(s!==void 0)return{note:s,accidental:this.music.getNoteParts(s).accidental,change:!1};const o=this.originalScaleMapByValue[this.music.getNoteValue(e)];return o!==void 0?(this.scaleMap[r.root]=o,delete this.scaleMapByValue[this.music.getNoteValue(i)],this.scaleMapByValue[this.music.getNoteValue(e)]=o,{note:o,accidental:this.music.getNoteParts(o).accidental,change:!0}):r.root===e?(delete this.scaleMapByValue[this.music.getNoteValue(this.scaleMap[n.root])],this.scaleMapByValue[this.music.getNoteValue(r.root)]=r.root,this.scaleMap[r.root]=r.root,{note:r.root,accidental:void 0,change:!0}):(delete this.scaleMapByValue[this.music.getNoteValue(this.scaleMap[n.root])],this.scaleMapByValue[this.music.getNoteValue(e)]=e,delete this.scaleMap[r.root],this.scaleMap[r.root]=e,{note:e,accidental:n.accidental,change:!0})}}class ds extends Q{static get CATEGORY(){return"StaveHairpin"}static FormatByTicksAndDraw(e,n,i,r,s,o){var a,l;const d=n.pixelsPerTick;if(d===null)throw new P("BadArguments","A valid Formatter must be provide to draw offsets by ticks.");const f=d*((a=o.leftShiftTicks)!==null&&a!==void 0?a:0),u=d*((l=o.rightShiftTicks)!==null&&l!==void 0?l:0),c={height:o.height,yShift:o.yShift,leftShiftPx:f,rightShiftPx:u,rightShiftTicks:0,leftShiftTicks:0};new ds({firstNote:i.firstNote,lastNote:i.lastNote},r).setContext(e).setRenderOptions(c).setPosition(s).drawWithStyle()}constructor(e,n){super(),this.setNotes(e),this.hairpin=n,this.position=q.Position.BELOW,this.renderOptions={height:10,yShift:0,leftShiftPx:0,rightShiftPx:0,rightShiftTicks:0,leftShiftTicks:0}}setPosition(e){return(e===q.Position.ABOVE||e===q.Position.BELOW)&&(this.position=e),this}setRenderOptions(e){return this.renderOptions=e,this}setNotes(e){if(!e.firstNote&&!e.lastNote)throw new P("BadArguments","Hairpin needs to have either firstNote or lastNote set.");return this.notes=e,this.firstNote=e.firstNote,this.lastNote=e.lastNote,this}renderHairpin(e){const n=this.checkContext();let i=this.renderOptions.yShift+20,r=e.firstY;this.position===q.Position.ABOVE&&(i=-i+30,r=e.firstY-e.staffHeight);const s=this.renderOptions.leftShiftPx,o=this.renderOptions.rightShiftPx;switch(n.beginPath(),this.hairpin){case ds.type.CRESC:n.moveTo(e.lastX+o,r+i),n.lineTo(e.firstX+s,r+this.renderOptions.height/2+i),n.lineTo(e.lastX+o,r+this.renderOptions.height+i);break;case ds.type.DECRESC:n.moveTo(e.firstX+s,r+i),n.lineTo(e.lastX+o,r+this.renderOptions.height/2+i),n.lineTo(e.firstX+s,r+this.renderOptions.height+i);break}n.stroke(),n.closePath()}draw(){this.checkContext(),this.setRendered();const e=this.firstNote,n=this.lastNote;if(!e||!n)throw new P("NoNote","Notes required to draw");const i=e.getModifierStartXY(this.position,0),r=n.getModifierStartXY(this.position,0);this.renderHairpin({firstX:i.x,lastX:r.x,firstY:e.checkStave().getY()+e.checkStave().getHeight(),lastY:n.checkStave().getY()+n.checkStave().getHeight(),staffHeight:e.checkStave().getHeight()})}}ds.type={CRESC:1,DECRESC:2};class kn extends ws{static get CATEGORY(){return"TabSlide"}static get SLIDE_UP(){return 1}static get SLIDE_DOWN(){return-1}static createSlideUp(e){return new kn(e,kn.SLIDE_UP)}static createSlideDown(e){return new kn(e,kn.SLIDE_DOWN)}constructor(e,n){if(super(e,"sl."),!n){let i=e.firstNote.getPositions()[0].fret;typeof i=="string"&&(i=parseInt(i,10));let r=e.lastNote.getPositions()[0].fret;typeof r=="string"&&(r=parseInt(r,10)),isNaN(i)||isNaN(r)?n=kn.SLIDE_UP:n=i>r?kn.SLIDE_DOWN:kn.SLIDE_UP}this.direction=n,this.renderOptions.cp1=11,this.renderOptions.cp2=14,this.renderOptions.yShift=.5}renderTie(e){if(e.firstYs.length===0||e.lastYs.length===0)throw new P("BadArguments","No Y-values to render");const n=this.checkContext(),i=e.firstX,r=e.firstYs,s=e.lastX,o=e.direction;if(o!==kn.SLIDE_UP&&o!==kn.SLIDE_DOWN)throw new P("BadSlide","Invalid slide direction");const a=this.notes.firstIndexes;for(let l=0;l<a.length;++l){const d=r[a[l]]+this.renderOptions.yShift;if(isNaN(d))throw new P("BadArguments","Bad indexes for slide rendering.");n.beginPath(),n.moveTo(i,d+3*o),n.lineTo(s,d-3*o),n.closePath(),n.stroke()}this.setRendered()}}class QB extends q{static get CATEGORY(){return"Tremolo"}constructor(e){super(),this.num=e,this.position=q.Position.CENTER,this.text=C.tremolo1}draw(){const e=this.checkContext(),n=this.checkAttachedNote();this.setRendered();const i=n.getStemDirection(),r=n.getFontScale(),s=W.get("Tremolo.spacing")*i*r,o=n.getAbsoluteX()+(i===I.UP?n.getGlyphWidth()-I.WIDTH/2:I.WIDTH/2);let a=n.getStemExtents().topY+(this.num<=3?s:0);this.fontInfo.size=W.get("Tremolo.fontSize")*r;for(let l=0;l<this.num;++l)this.renderText(e,o,a),a+=s}}class ju{static get names(){return{standard:"E/5,B/4,G/4,D/4,A/3,E/3",dagdad:"D/5,A/4,G/4,D/4,A/3,D/3",dropd:"E/5,B/4,G/4,D/4,A/3,D/3",eb:"Eb/5,Bb/4,Gb/4,Db/4,Ab/3,Db/3",standardBanjo:"D/5,B/4,G/4,D/4,G/5"}}constructor(e="E/5,B/4,G/4,D/4,A/3,E/3,B/2,E/2"){this.tuningValues=[],this.setTuning(e)}noteToInteger(e){var n;return(n=k.keyProperties(e).intValue)!==null&&n!==void 0?n:-1}setTuning(e){ju.names[e]&&(e=ju.names[e]),this.tuningValues=[];const n=e.split(/\s*,\s*/);if(n.length===0)throw new P("BadArguments",`Invalid tuning string: ${e}`);for(let i=0;i<n.length;++i)this.tuningValues[i]=this.noteToInteger(n[i])}getValueForString(e){const n=Number(e);if(n<1||n>this.tuningValues.length)throw new P("BadArguments",`String number must be between 1 and ${this.tuningValues.length}:${e}`);return this.tuningValues[n-1]}getValueForFret(e,n){const i=this.getValueForString(n),r=Number(e);if(r<0)throw new P("BadArguments",`Fret number must be 0 or higher: ${e}`);return i+r}getNoteForFret(e,n){const i=this.getValueForFret(e,n),r=Math.floor(i/12),s=i%12;return`${k.integerToNote(s)}/${r}`}}const GB="5.0.0",_B="0ca6f889545c33cce851b420c24945f6eb685aeb",$B="2025-03-05T17:05:43.991Z";var eT=globalThis&&globalThis.__awaiter||function(t,e,n,i){function r(s){return s instanceof n?s:new n(function(o){o(s)})}return new(n||(n=Promise))(function(s,o){function a(f){try{d(i.next(f))}catch(u){o(u)}}function l(f){try{d(i.throw(f))}catch(u){o(u)}}function d(f){f.done?s(f.value):r(f.value).then(a,l)}d((i=i.apply(t,e||[])).next())})};class M{static loadFonts(...e){return eT(this,void 0,void 0,function*(){e||(e=Object.keys(ne.FILES));const n=[];for(const i of e)n.push(ne.load(i));yield Promise.all(n)})}static setFonts(...e){lo.fontFamily=e.join(","),W.clear()}static getFonts(){return W.get("fontFamily").split(",")}static get RENDER_PRECISION_PLACES(){return k.RENDER_PRECISION_PLACES}static set RENDER_PRECISION_PLACES(e){k.RENDER_PRECISION_PLACES=e}static get SOFTMAX_FACTOR(){return k.SOFTMAX_FACTOR}static set SOFTMAX_FACTOR(e){k.SOFTMAX_FACTOR=e}static get UNISON(){return k.UNISON}static set UNISON(e){k.UNISON=e}static get NOTATION_FONT_SCALE(){return k.NOTATION_FONT_SCALE}static set NOTATION_FONT_SCALE(e){k.NOTATION_FONT_SCALE=e}static get TABLATURE_FONT_SCALE(){return k.TABLATURE_FONT_SCALE}static set TABLATURE_FONT_SCALE(e){k.TABLATURE_FONT_SCALE=e}static get RESOLUTION(){return k.RESOLUTION}static set RESOLUTION(e){k.RESOLUTION=e}static get SLASH_NOTEHEAD_WIDTH(){return k.SLASH_NOTEHEAD_WIDTH}static set SLASH_NOTEHEAD_WIDTH(e){k.SLASH_NOTEHEAD_WIDTH=e}static get STAVE_LINE_DISTANCE(){return k.STAVE_LINE_DISTANCE}static set STAVE_LINE_DISTANCE(e){k.STAVE_LINE_DISTANCE=e}static get STAVE_LINE_THICKNESS(){return lo.Stave.lineWidth}static set STAVE_LINE_THICKNESS(e){lo.Stave.lineWidth=e,lo.TabStave.lineWidth=e,W.clear("Stave"),W.clear("TabStave")}static get STEM_HEIGHT(){return k.STEM_HEIGHT}static set STEM_HEIGHT(e){k.STEM_HEIGHT=e}static get STEM_WIDTH(){return k.STEM_WIDTH}static set STEM_WIDTH(e){k.STEM_WIDTH=e}static get TIME4_4(){return k.TIME4_4}static get unicode(){return k.unicode}static keySignature(e){return k.keySignature(e)}static hasKeySignature(e){return k.hasKeySignature(e)}static getKeySignatures(){return k.getKeySignatures()}static clefProperties(e){return k.clefProperties(e)}static keyProperties(e,n,i){return k.keyProperties(e,n,i)}static durationToTicks(e){return k.durationToTicks(e)}}M.BUILD={VERSION:GB,ID:_B,DATE:$B,INFO:""};M.Accidental=Or;M.Annotation=Yt;M.Articulation=ui;M.Barline=Xn;M.BarNote=Fl;M.Beam=er;M.Bend=fn;M.BoundingBox=oi;M.CanvasContext=cs;M.ChordSymbol=je;M.Clef=Wt;M.ClefNote=SS;M.Crescendo=Nf;M.Curve=Ml;M.Dot=Hi;M.EasyScore=Ll;M.Element=Q;M.Factory=aa;M.Font=ne;M.Formatter=Pt;M.Fraction=ue;M.FretHandFinger=Pl;M.GhostNote=wS;M.GlyphNote=Of;M.GraceNote=Rl;M.GraceNoteGroup=sa;M.GraceTabNote=ZB;M.KeyManager=KB;M.KeySignature=xs;M.KeySigNote=DS;M.Modifier=q;M.ModifierContext=Ds;M.MultiMeasureRest=xS;M.Music=De;M.Note=st;M.NoteHead=Ol;M.NoteSubGroup=Pf;M.Ornament=jt;M.Parenthesis=Jo;M.Parser=kl;M.PedalMarking=Pe;M.Registry=ls;M.RenderContext=Bf;M.Renderer=ke;M.RepeatNote=BS;M.Repetition=Je;M.Stave=Ki;M.StaveConnector=ae;M.StaveHairpin=ds;M.StaveLine=mn;M.StaveModifier=di;M.StaveNote=Bn;M.StaveTempo=AS;M.StaveText=vS;M.StaveTie=yl;M.Stem=I;M.StringNumber=kf;M.Stroke=ot;M.SVGContext=br;M.System=TS;M.TabNote=oa;M.TabSlide=kn;M.TabStave=NS;M.TabTie=ws;M.TextBracket=Ls;M.TextDynamics=Os;M.TextNote=ks;M.TickContext=qo;M.TimeSignature=ri;M.TimeSigNote=FS;M.Tremolo=QB;M.Tuning=ju;M.Tuplet=$t;M.Vibrato=Lf;M.VibratoBracket=Il;M.Voice=Un;M.Volta=CS;M.RuntimeError=P;M.Test=void 0;M.AnnotationHorizontalJustify=Ft;M.AnnotationVerticalJustify=Mt;M.ChordSymbolHorizontalJustify=Ht;M.ChordSymbolVerticalJustify=zn;M.SymbolModifiers=Ai;M.CurvePosition=On;M.FontWeight=Er;M.FontStyle=Ui;M.Glyphs=C;M.ModifierPosition=Fe;M.RendererBackends=Ru;M.RendererLineEndType=Iu;M.BarlineType=ve;M.StaveModifierPosition=oe;M.VoltaType=mi;M.TextBracketPosition=Rn;M.TextJustification=Sn;M.VoiceMode=yn;const tT="data:font/woff2;charset=utf-8;base64,",nT="data:font/woff2;charset=utf-8;base64,",iT="data:font/woff2;charset=utf-8;base64,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",rT="data:font/woff2;charset=utf-8;base64,",sT="data:font/woff2;charset=utf-8;base64,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",oT="data:font/woff2;charset=utf-8;base64,",yf={display:"block"},MS={display:"swap"},aT={display:"swap",weight:"bold"},uT=ne.load("Bravura",iT,yf),lT=ne.load("Academico",tT,MS),cT=ne.load("Academico",nT,aT),dT=ne.load("Gonville",rT,yf),hT=ne.load("Petaluma",sT,yf),fT=ne.load("Petaluma Script",oT,MS),mT=[uT,lT,cT,dT,hT,fT];M.BUILD.INFO="vexflow";M.setFonts("Bravura","Academico");Promise.allSettled(mT).then(()=>{});const gT=()=>{const{useFlats:t,toggleAccidentals:e}=lf();return v.jsxs("button",{onClick:e,style:{padding:"4px 8px",margin:"0px",backgroundColor:"#F2E4D5",color:"black",border:"none",borderRadius:"4px",cursor:"pointer",fontSize:"18px",fontWeight:"bold"},title:`Switch to ${t?"Sharp":"Flat"} Notation`,children:["Currently Using Notation :  ",t?" ♭":" ♯"]})};const ET=()=>{const{activeNotes:t}=uf(),e=B.useRef(null),n=B.useRef([]),i=B.useRef({context:null,trebleStave:null,bassStave:null}),r=a=>{const l=a.replace(/\d+$/,""),d=a.match(/\d+$/)[0];let f=l;return l.includes("#")?(f=l.replace("#",""),f+="#"):l.includes("s")?(f=l.replace("s",""),f+="#"):l.includes("b")&&(f=l.replace("b",""),f+="b"),f+"/"+d},s=a=>{const l=parseInt(a.match(/\d+$/)[0]);return l>=4?!(l===4&&a.startsWith("C")&&!a.includes("#")&&!a.includes("b")):!1};B.useEffect(()=>{if(e.current){e.current.innerHTML="";const a=new M.Flow.Renderer(e.current,M.Flow.Renderer.Backends.SVG);a.resize(250,220);const l=a.getContext();l.setFont("Arial",10);const d=new M.Flow.Stave(50,0,150);d.addClef("treble"),d.setContext(l).draw();const f=new M.Flow.Stave(50,100,150);f.addClef("bass"),f.setContext(l).draw(),new M.Flow.StaveConnector(d,f).setType(3).setContext(l).draw(),new M.Flow.StaveConnector(d,f).setType(1).setContext(l).draw(),new M.Flow.StaveConnector(d,f).setType(6).setContext(l).draw(),i.current={context:l,trebleStave:d,bassStave:f,renderer:a}}},[]);const o=()=>{if(!i.current.context)return;const{context:a,trebleStave:l,bassStave:d}=i.current;try{e.current.querySelector("svg").querySelectorAll(".vf-stavenote, .vf-stem, .vf-notehead, .vf-accidental").forEach(g=>g.remove());const c=[],h=[];if(t.forEach(g=>{s(g)?c.push(g):h.push(g)}),c.length>0){const g=[];if(c.length>1){const p=c.map(b=>r(b));let m;try{m=new M.Flow.StaveNote({clef:"treble",keys:p,duration:"q"}),p.forEach((b,A)=>{try{b.includes("#")?typeof m.addAccidental=="function"?m.addAccidental(A,new M.Flow.Accidental("#")):typeof m.addModifier=="function"&&m.addModifier(new M.Flow.Accidental("#"),A):b.includes("b")&&(typeof m.addAccidental=="function"?m.addAccidental(A,new M.Flow.Accidental("b")):typeof m.addModifier=="function"&&m.addModifier(new M.Flow.Accidental("b"),A))}catch(S){console.warn("Error adding accidental:",S)}})}catch(b){console.error("Error creating note:",b);return}g.push(m)}else{const p=r(c[0]);let m;try{m=new M.Flow.StaveNote({clef:"treble",keys:[p],duration:"q"});try{p.includes("#")?typeof m.addAccidental=="function"?m.addAccidental(0,new M.Flow.Accidental("#")):typeof m.addModifier=="function"&&m.addModifier(new M.Flow.Accidental("#"),0):p.includes("b")&&(typeof m.addAccidental=="function"?m.addAccidental(0,new M.Flow.Accidental("b")):typeof m.addModifier=="function"&&m.addModifier(new M.Flow.Accidental("b"),0))}catch(b){console.warn("Error adding accidental:",b)}}catch(b){console.error("Error creating note:",b);return}g.push(m)}const E=new M.Flow.Voice({num_beats:1,beat_value:4,resolution:M.Flow.RESOLUTION});E.addTickables(g),new M.Flow.Formatter().joinVoices([E]).format([E],250),E.draw(a,l)}if(h.length>0){const g=[];if(h.length>1){const p=h.map(b=>r(b));let m;try{m=new M.Flow.StaveNote({clef:"bass",keys:p,duration:"q"}),p.forEach((b,A)=>{try{b.includes("#")?typeof m.addAccidental=="function"?m.addAccidental(A,new M.Flow.Accidental("#")):typeof m.addModifier=="function"&&m.addModifier(new M.Flow.Accidental("#"),A):b.includes("b")&&(typeof m.addAccidental=="function"?m.addAccidental(A,new M.Flow.Accidental("b")):typeof m.addModifier=="function"&&m.addModifier(new M.Flow.Accidental("b"),A))}catch(S){console.warn("Error adding accidental:",S)}})}catch(b){console.error("Error creating note:",b);return}g.push(m)}else{const p=r(h[0]);let m;try{m=new M.Flow.StaveNote({clef:"bass",keys:[p],duration:"q"});try{p.includes("#")?typeof m.addAccidental=="function"?m.addAccidental(0,new M.Flow.Accidental("#")):typeof m.addModifier=="function"&&m.addModifier(new M.Flow.Accidental("#"),0):p.includes("b")&&(typeof m.addAccidental=="function"?m.addAccidental(0,new M.Flow.Accidental("b")):typeof m.addModifier=="function"&&m.addModifier(new M.Flow.Accidental("b"),0))}catch(b){console.warn("Error adding accidental:",b)}}catch(b){console.error("Error creating note:",b);return}g.push(m)}const E=new M.Flow.Voice({num_beats:1,beat_value:4,resolution:M.Flow.RESOLUTION});E.addTickables(g),new M.Flow.Formatter().joinVoices([E]).format([E],250),E.draw(a,d)}}catch(f){console.error("Error rendering notes:",f)}};return B.useEffect(()=>{console.log("Active notes changed:",t),(t.length>0||n.current.length>0)&&(n.current=[...t],o())},[t]),console.log("Staff received notes:"),v.jsxs("div",{className:"staff-display-wrapper",children:[v.jsx("div",{className:"staff-controls",children:v.jsx(gT,{})}),v.jsx("div",{ref:e,className:"staff-display"})]})},bT=()=>{const{activeNotes:t}=uf(),e=n=>{const i=n.search(/\d/);return i!==-1?{noteName:n.substring(0,i),octave:n.substring(i)}:{noteName:n,octave:""}};return v.jsx("div",{className:"piano-notes-display",children:v.jsx("div",{className:"notes-list",children:t.map(n=>{const{noteName:i,octave:r}=e(n);return v.jsxs("span",{className:"note-tag",children:[v.jsx("span",{className:"note-name",children:i}),v.jsx("span",{className:"note-octave",children:r}),t.indexOf(n)<t.length-1]},n)})})})};function PS(t){return t!==null&&typeof t=="object"&&"name"in t&&typeof t.name=="string"}function kS(t){return t!==null&&typeof t=="object"&&"step"in t&&typeof t.step=="number"&&"alt"in t&&typeof t.alt=="number"&&!isNaN(t.step)&&!isNaN(t.alt)}var LS=[0,2,4,-1,1,3,5],OS=LS.map(t=>Math.floor(t*7/12));function yS(t){const{step:e,alt:n,oct:i,dir:r=1}=t,s=LS[e]+7*n;if(i===void 0)return[r*s];const o=i-OS[e]-4*n;return[r*s,r*o]}var pT=[3,0,4,1,5,2,6];function RS(t){const[e,n,i]=t,r=pT[ST(e)],s=Math.floor((e+1)/7);if(n===void 0)return{step:r,alt:s,dir:i};const o=n+4*s+OS[r];return{step:r,alt:s,oct:o,dir:i}}function ST(t){const e=(t+1)%7;return e<0?7+e:e}var hE=(t,e)=>Array(Math.abs(e)+1).join(t),_d=Object.freeze({empty:!0,name:"",num:NaN,q:"",type:"",step:NaN,alt:NaN,dir:NaN,simple:NaN,semitones:NaN,chroma:NaN,coord:[],oct:NaN}),AT="([-+]?\\d+)(d{1,4}|m|M|P|A{1,4})",vT="(AA|A|P|M|m|d|dd)([-+]?\\d+)",CT=new RegExp("^"+AT+"|"+vT+"$");function wT(t){const e=CT.exec(`${t}`);return e===null?["",""]:e[1]?[e[1],e[2]]:[e[4],e[3]]}var fE={};function Nr(t){return typeof t=="string"?fE[t]||(fE[t]=DT(t)):kS(t)?Nr(BT(t)):PS(t)?Nr(t.name):_d}var mE=[0,2,4,5,7,9,11],IS="PMMPPMM";function DT(t){const e=wT(t);if(e[0]==="")return _d;const n=+e[0],i=e[1],r=(Math.abs(n)-1)%7,s=IS[r];if(s==="M"&&i==="P")return _d;const o=s==="M"?"majorable":"perfectable",a=""+n+i,l=n<0?-1:1,d=n===8||n===-8?n:l*(r+1),f=xT(o,i),u=Math.floor((Math.abs(n)-1)/7),c=l*(mE[r]+f+12*u),h=(l*(mE[r]+f)%12+12)%12,g=yS({step:r,alt:f,oct:u,dir:l});return{empty:!1,name:a,num:n,q:i,step:r,alt:f,dir:l,type:o,simple:d,semitones:c,chroma:h,coord:g,oct:u}}function jS(t,e){const[n,i=0]=t,r=n*7+i*12<0,s=e||r?[-n,-i,-1]:[n,i,1];return Nr(RS(s))}function xT(t,e){return e==="M"&&t==="majorable"||e==="P"&&t==="perfectable"?0:e==="m"&&t==="majorable"?-1:/^A+$/.test(e)?e.length:/^d+$/.test(e)?-1*(t==="perfectable"?e.length:e.length+1):0}function BT(t){const{step:e,alt:n,oct:i=0,dir:r}=t;if(!r)return"";const s=e+1+7*i,o=s===0?e+1:s,a=r<0?"-":"",l=IS[e]==="M"?"majorable":"perfectable";return a+o+TT(l,n)}function TT(t,e){return e===0?t==="majorable"?"M":"P":e===-1&&t==="majorable"?"m":e>0?hE("A",e):hE("d",t==="perfectable"?e:e+1)}var gE=(t,e)=>Array(Math.abs(e)+1).join(t),US=Object.freeze({empty:!0,name:"",letter:"",acc:"",pc:"",step:NaN,alt:NaN,chroma:NaN,height:NaN,coord:[],midi:null,freq:null}),EE=new Map,NT=t=>"CDEFGAB".charAt(t),FT=t=>t<0?gE("b",-t):gE("#",t),MT=t=>t[0]==="b"?-t.length:t.length;function Lt(t){const e=JSON.stringify(t),n=EE.get(e);if(n)return n;const i=typeof t=="string"?OT(t):kS(t)?Lt(yT(t)):PS(t)?Lt(t.name):US;return EE.set(e,i),i}var PT=/^([a-gA-G]?)(#{1,}|b{1,}|x{1,}|)(-?\d*)\s*(.*)$/;function Rf(t){const e=PT.exec(t);return e?[e[1].toUpperCase(),e[2].replace(/x/g,"##"),e[3],e[4]]:["","","",""]}function kT(t){return Lt(RS(t))}var LT=(t,e)=>(t%e+e)%e,Uc=[0,2,4,5,7,9,11];function OT(t){const e=Rf(t);if(e[0]===""||e[3]!=="")return US;const n=e[0],i=e[1],r=e[2],s=(n.charCodeAt(0)+3)%7,o=MT(i),a=r.length?+r:void 0,l=yS({step:s,alt:o,oct:a}),d=n+i+r,f=n+i,u=(Uc[s]+o+120)%12,c=a===void 0?LT(Uc[s]+o,12)-12*99:Uc[s]+o+12*(a+1),h=c>=0&&c<=127?c:null,g=a===void 0?null:Math.pow(2,(c-69)/12)*440;return{empty:!1,acc:i,alt:o,chroma:u,coord:l,freq:g,height:c,letter:n,midi:h,name:d,oct:a,pc:f,step:s}}function yT(t){const{step:e,alt:n,oct:i}=t,r=NT(e);if(!r)return"";const s=r+FT(n);return i||i===0?s+i:s}function If(t,e){const n=Lt(t),i=Array.isArray(e)?e:Nr(e).coord;if(n.empty||!i||i.length<2)return"";const r=n.coord,s=r.length===1?[r[0]+i[0]]:[r[0]+i[0],r[1]+i[1]];return kT(s).name}function bE(t,e){const n=Lt(t),i=Lt(e);if(n.empty||i.empty)return"";const r=n.coord,s=i.coord,o=s[0]-r[0],a=r.length===2&&s.length===2?s[1]-r[1]:-Math.floor(o*7/12),l=i.height===n.height&&i.midi!==null&&n.oct===i.oct&&n.step>i.step;return jS([o,a],l).name}function jf(t,e){const n=e.length,i=(t%n+n)%n;return e.slice(i,n).concat(e.slice(0,i))}function RT(t){return t.filter(e=>e===0||e)}var Fr={empty:!0,name:"",setNum:0,chroma:"000000000000",normalized:"000000000000",intervals:[]},HS=t=>Number(t).toString(2).padStart(12,"0"),pE=t=>parseInt(t,2),IT=/^[01]{12}$/;function WS(t){return IT.test(t)}var jT=t=>typeof t=="number"&&t>=0&&t<=4095,UT=t=>t&&WS(t.chroma),SE={[Fr.chroma]:Fr};function Uf(t){const e=WS(t)?t:jT(t)?HS(t):Array.isArray(t)?VT(t):UT(t)?t.chroma:Fr.chroma;return SE[e]=SE[e]||YT(e)}var HT=["1P","2m","2M","3m","3M","4P","5d","5P","6m","6M","7m","7M"];function WT(t){const e=[];for(let n=0;n<12;n++)t.charAt(n)==="1"&&e.push(HT[n]);return e}function XT(t,e=!0){const i=Uf(t).chroma.split("");return RT(i.map((r,s)=>{const o=jf(s,i);return e&&o[0]==="0"?null:o.join("")}))}function zT(t){const e=t.split("");return e.map((n,i)=>jf(i,e).join(""))}function YT(t){const e=pE(t),n=zT(t).map(pE).filter(s=>s>=2048).sort()[0],i=HS(n),r=WT(t);return{empty:!1,name:"",setNum:e,chroma:t,normalized:i,intervals:r}}function VT(t){if(t.length===0)return Fr.chroma;let e;const n=[0,0,0,0,0,0,0,0,0,0,0,0];for(let i=0;i<t.length;i++)e=Lt(t[i]),e.empty&&(e=Nr(t[i])),e.empty||(n[e.chroma]=1);return n.join("")}var qT=[["1P 3M 5P","major","M ^  maj"],["1P 3M 5P 7M","major seventh","maj7 Δ ma7 M7 Maj7 ^7"],["1P 3M 5P 7M 9M","major ninth","maj9 Δ9 ^9"],["1P 3M 5P 7M 9M 13M","major thirteenth","maj13 Maj13 ^13"],["1P 3M 5P 6M","sixth","6 add6 add13 M6"],["1P 3M 5P 6M 9M","sixth added ninth","6add9 6/9 69 M69"],["1P 3M 6m 7M","major seventh flat sixth","M7b6 ^7b6"],["1P 3M 5P 7M 11A","major seventh sharp eleventh","maj#4 Δ#4 Δ#11 M7#11 ^7#11 maj7#11"],["1P 3m 5P","minor","m min -"],["1P 3m 5P 7m","minor seventh","m7 min7 mi7 -7"],["1P 3m 5P 7M","minor/major seventh","m/ma7 m/maj7 mM7 mMaj7 m/M7 -Δ7 mΔ -^7 -maj7"],["1P 3m 5P 6M","minor sixth","m6 -6"],["1P 3m 5P 7m 9M","minor ninth","m9 -9"],["1P 3m 5P 7M 9M","minor/major ninth","mM9 mMaj9 -^9"],["1P 3m 5P 7m 9M 11P","minor eleventh","m11 -11"],["1P 3m 5P 7m 9M 13M","minor thirteenth","m13 -13"],["1P 3m 5d","diminished","dim ° o"],["1P 3m 5d 7d","diminished seventh","dim7 °7 o7"],["1P 3m 5d 7m","half-diminished","m7b5 ø -7b5 h7 h"],["1P 3M 5P 7m","dominant seventh","7 dom"],["1P 3M 5P 7m 9M","dominant ninth","9"],["1P 3M 5P 7m 9M 13M","dominant thirteenth","13"],["1P 3M 5P 7m 11A","lydian dominant seventh","7#11 7#4"],["1P 3M 5P 7m 9m","dominant flat ninth","7b9"],["1P 3M 5P 7m 9A","dominant sharp ninth","7#9"],["1P 3M 7m 9m","altered","alt7"],["1P 4P 5P","suspended fourth","sus4 sus"],["1P 2M 5P","suspended second","sus2"],["1P 4P 5P 7m","suspended fourth seventh","7sus4 7sus"],["1P 5P 7m 9M 11P","eleventh","11"],["1P 4P 5P 7m 9m","suspended fourth flat ninth","b9sus phryg 7b9sus 7b9sus4"],["1P 5P","fifth","5"],["1P 3M 5A","augmented","aug + +5 ^#5"],["1P 3m 5A","minor augmented","m#5 -#5 m+"],["1P 3M 5A 7M","augmented seventh","maj7#5 maj7+5 +maj7 ^7#5"],["1P 3M 5P 7M 9M 11A","major sharp eleventh (lydian)","maj9#11 Δ9#11 ^9#11"],["1P 2M 4P 5P","","sus24 sus4add9"],["1P 3M 5A 7M 9M","","maj9#5 Maj9#5"],["1P 3M 5A 7m","","7#5 +7 7+ 7aug aug7"],["1P 3M 5A 7m 9A","","7#5#9 7#9#5 7alt"],["1P 3M 5A 7m 9M","","9#5 9+"],["1P 3M 5A 7m 9M 11A","","9#5#11"],["1P 3M 5A 7m 9m","","7#5b9 7b9#5"],["1P 3M 5A 7m 9m 11A","","7#5b9#11"],["1P 3M 5A 9A","","+add#9"],["1P 3M 5A 9M","","M#5add9 +add9"],["1P 3M 5P 6M 11A","","M6#11 M6b5 6#11 6b5"],["1P 3M 5P 6M 7M 9M","","M7add13"],["1P 3M 5P 6M 9M 11A","","69#11"],["1P 3m 5P 6M 9M","","m69 -69"],["1P 3M 5P 6m 7m","","7b6"],["1P 3M 5P 7M 9A 11A","","maj7#9#11"],["1P 3M 5P 7M 9M 11A 13M","","M13#11 maj13#11 M13+4 M13#4"],["1P 3M 5P 7M 9m","","M7b9"],["1P 3M 5P 7m 11A 13m","","7#11b13 7b5b13"],["1P 3M 5P 7m 13M","","7add6 67 7add13"],["1P 3M 5P 7m 9A 11A","","7#9#11 7b5#9 7#9b5"],["1P 3M 5P 7m 9A 11A 13M","","13#9#11"],["1P 3M 5P 7m 9A 11A 13m","","7#9#11b13"],["1P 3M 5P 7m 9A 13M","","13#9"],["1P 3M 5P 7m 9A 13m","","7#9b13"],["1P 3M 5P 7m 9M 11A","","9#11 9+4 9#4"],["1P 3M 5P 7m 9M 11A 13M","","13#11 13+4 13#4"],["1P 3M 5P 7m 9M 11A 13m","","9#11b13 9b5b13"],["1P 3M 5P 7m 9m 11A","","7b9#11 7b5b9 7b9b5"],["1P 3M 5P 7m 9m 11A 13M","","13b9#11"],["1P 3M 5P 7m 9m 11A 13m","","7b9b13#11 7b9#11b13 7b5b9b13"],["1P 3M 5P 7m 9m 13M","","13b9"],["1P 3M 5P 7m 9m 13m","","7b9b13"],["1P 3M 5P 7m 9m 9A","","7b9#9"],["1P 3M 5P 9M","","Madd9 2 add9 add2"],["1P 3M 5P 9m","","Maddb9"],["1P 3M 5d","","Mb5"],["1P 3M 5d 6M 7m 9M","","13b5"],["1P 3M 5d 7M","","M7b5"],["1P 3M 5d 7M 9M","","M9b5"],["1P 3M 5d 7m","","7b5"],["1P 3M 5d 7m 9M","","9b5"],["1P 3M 7m","","7no5"],["1P 3M 7m 13m","","7b13"],["1P 3M 7m 9M","","9no5"],["1P 3M 7m 9M 13M","","13no5"],["1P 3M 7m 9M 13m","","9b13"],["1P 3m 4P 5P","","madd4"],["1P 3m 5P 6m 7M","","mMaj7b6"],["1P 3m 5P 6m 7M 9M","","mMaj9b6"],["1P 3m 5P 7m 11P","","m7add11 m7add4"],["1P 3m 5P 9M","","madd9"],["1P 3m 5d 6M 7M","","o7M7"],["1P 3m 5d 7M","","oM7"],["1P 3m 6m 7M","","mb6M7"],["1P 3m 6m 7m","","m7#5"],["1P 3m 6m 7m 9M","","m9#5"],["1P 3m 5A 7m 9M 11P","","m11A"],["1P 3m 6m 9m","","mb6b9"],["1P 2M 3m 5d 7m","","m9b5"],["1P 4P 5A 7M","","M7#5sus4"],["1P 4P 5A 7M 9M","","M9#5sus4"],["1P 4P 5A 7m","","7#5sus4"],["1P 4P 5P 7M","","M7sus4"],["1P 4P 5P 7M 9M","","M9sus4"],["1P 4P 5P 7m 9M","","9sus4 9sus"],["1P 4P 5P 7m 9M 13M","","13sus4 13sus"],["1P 4P 5P 7m 9m 13m","","7sus4b9b13 7b9b13sus4"],["1P 4P 7m 10m","","4 quartal"],["1P 5P 7m 9m 11P","","11b9"]],JT=qT,ZT={...Fr,name:"",quality:"Unknown",intervals:[],aliases:[]},Hf=[],Do={};function KT(t){return Do[t]||ZT}function QT(){return Hf.slice()}function GT(t,e,n){const i=$T(t),r={...Uf(t),name:n||"",quality:i,intervals:t,aliases:e};Hf.push(r),r.name&&(Do[r.name]=r),Do[r.setNum]=r,Do[r.chroma]=r,r.aliases.forEach(s=>_T(r,s))}function _T(t,e){Do[e]=t}function $T(t){const e=n=>t.indexOf(n)!==-1;return e("5A")?"Augmented":e("3M")?"Major":e("5d")?"Diminished":e("3m")?"Minor":"Unknown"}JT.forEach(([t,e,n])=>GT(t.split(" "),n.split(" "),e));Hf.sort((t,e)=>t.setNum-e.setNum);var eN=t=>{const e=t.reduce((n,i)=>{const r=Lt(i).chroma;return r!==void 0&&(n[r]=n[r]||Lt(i).name),n},{});return n=>e[n]};function tN(t,e={}){const n=t.map(r=>Lt(r).pc).filter(r=>r);return Lt.length===0?[]:uN(n,1,e).filter(r=>r.weight).sort((r,s)=>s.weight-r.weight).map(r=>r.name)}var jl={anyThirds:384,perfectFifth:16,nonPerfectFifths:40,anySeventh:3},Ul=t=>e=>!!(e&t),nN=Ul(jl.anyThirds),iN=Ul(jl.perfectFifth),rN=Ul(jl.anySeventh),sN=Ul(jl.nonPerfectFifths);function oN(t){const e=parseInt(t.chroma,2);return nN(e)&&iN(e)&&rN(e)}function aN(t){const e=parseInt(t,2);return sN(e)?t:(e|16).toString(2)}function uN(t,e,n){const i=t[0],r=Lt(i).chroma,s=eN(t),o=XT(t,!1),a=[];return o.forEach((l,d)=>{const f=n.assumePerfectFifth&&aN(l);QT().filter(c=>n.assumePerfectFifth&&oN(c)?c.chroma===f:c.chroma===l).forEach(c=>{const h=c.aliases[0],g=s(d);d!==r?a.push({weight:.5*e,name:`${g}${h}/${i}`}):a.push({weight:1*e,name:`${g}${h}`})})}),a}var lN=cN((t,e)=>[t[0]-e[0],t[1]-e[1]]);function cN(t){return(e,n)=>{const i=Nr(e).coord,r=Nr(n).coord;if(i&&r){const s=t(i,r);return jS(s).name}}}var dN=[["1P 2M 3M 5P 6M","major pentatonic","pentatonic"],["1P 2M 3M 4P 5P 6M 7M","major","ionian"],["1P 2M 3m 4P 5P 6m 7m","minor","aeolian"],["1P 2M 3m 3M 5P 6M","major blues"],["1P 3m 4P 5d 5P 7m","minor blues","blues"],["1P 2M 3m 4P 5P 6M 7M","melodic minor"],["1P 2M 3m 4P 5P 6m 7M","harmonic minor"],["1P 2M 3M 4P 5P 6M 7m 7M","bebop"],["1P 2M 3m 4P 5d 6m 6M 7M","diminished","whole-half diminished"],["1P 2M 3m 4P 5P 6M 7m","dorian"],["1P 2M 3M 4A 5P 6M 7M","lydian"],["1P 2M 3M 4P 5P 6M 7m","mixolydian","dominant"],["1P 2m 3m 4P 5P 6m 7m","phrygian"],["1P 2m 3m 4P 5d 6m 7m","locrian"],["1P 3M 4P 5P 7M","ionian pentatonic"],["1P 3M 4P 5P 7m","mixolydian pentatonic","indian"],["1P 2M 4P 5P 6M","ritusen"],["1P 2M 4P 5P 7m","egyptian"],["1P 3M 4P 5d 7m","neopolitan major pentatonic"],["1P 3m 4P 5P 6m","vietnamese 1"],["1P 2m 3m 5P 6m","pelog"],["1P 2m 4P 5P 6m","kumoijoshi"],["1P 2M 3m 5P 6m","hirajoshi"],["1P 2m 4P 5d 7m","iwato"],["1P 2m 4P 5P 7m","in-sen"],["1P 3M 4A 5P 7M","lydian pentatonic","chinese"],["1P 3m 4P 6m 7m","malkos raga"],["1P 3m 4P 5d 7m","locrian pentatonic","minor seven flat five pentatonic"],["1P 3m 4P 5P 7m","minor pentatonic","vietnamese 2"],["1P 3m 4P 5P 6M","minor six pentatonic"],["1P 2M 3m 5P 6M","flat three pentatonic","kumoi"],["1P 2M 3M 5P 6m","flat six pentatonic"],["1P 2m 3M 5P 6M","scriabin"],["1P 3M 5d 6m 7m","whole tone pentatonic"],["1P 3M 4A 5A 7M","lydian #5P pentatonic"],["1P 3M 4A 5P 7m","lydian dominant pentatonic"],["1P 3m 4P 5P 7M","minor #7M pentatonic"],["1P 3m 4d 5d 7m","super locrian pentatonic"],["1P 2M 3m 4P 5P 7M","minor hexatonic"],["1P 2A 3M 5P 5A 7M","augmented"],["1P 2M 4P 5P 6M 7m","piongio"],["1P 2m 3M 4A 6M 7m","prometheus neopolitan"],["1P 2M 3M 4A 6M 7m","prometheus"],["1P 2m 3M 5d 6m 7m","mystery #1"],["1P 2m 3M 4P 5A 6M","six tone symmetric"],["1P 2M 3M 4A 5A 6A","whole tone","messiaen's mode #1"],["1P 2m 4P 4A 5P 7M","messiaen's mode #5"],["1P 2M 3M 4P 5d 6m 7m","locrian major","arabian"],["1P 2m 3M 4A 5P 6m 7M","double harmonic lydian"],["1P 2m 2A 3M 4A 6m 7m","altered","super locrian","diminished whole tone","pomeroy"],["1P 2M 3m 4P 5d 6m 7m","locrian #2","half-diminished","aeolian b5"],["1P 2M 3M 4P 5P 6m 7m","mixolydian b6","melodic minor fifth mode","hindu"],["1P 2M 3M 4A 5P 6M 7m","lydian dominant","lydian b7","overtone"],["1P 2M 3M 4A 5A 6M 7M","lydian augmented"],["1P 2m 3m 4P 5P 6M 7m","dorian b2","phrygian #6","melodic minor second mode"],["1P 2m 3m 4d 5d 6m 7d","ultralocrian","superlocrian bb7","superlocrian diminished"],["1P 2m 3m 4P 5d 6M 7m","locrian 6","locrian natural 6","locrian sharp 6"],["1P 2A 3M 4P 5P 5A 7M","augmented heptatonic"],["1P 2M 3m 4A 5P 6M 7m","dorian #4","ukrainian dorian","romanian minor","altered dorian"],["1P 2M 3m 4A 5P 6M 7M","lydian diminished"],["1P 2M 3M 4A 5A 7m 7M","leading whole tone"],["1P 2M 3M 4A 5P 6m 7m","lydian minor"],["1P 2m 3M 4P 5P 6m 7m","phrygian dominant","spanish","phrygian major"],["1P 2m 3m 4P 5P 6m 7M","balinese"],["1P 2m 3m 4P 5P 6M 7M","neopolitan major"],["1P 2M 3M 4P 5P 6m 7M","harmonic major"],["1P 2m 3M 4P 5P 6m 7M","double harmonic major","gypsy"],["1P 2M 3m 4A 5P 6m 7M","hungarian minor"],["1P 2A 3M 4A 5P 6M 7m","hungarian major"],["1P 2m 3M 4P 5d 6M 7m","oriental"],["1P 2m 3m 3M 4A 5P 7m","flamenco"],["1P 2m 3m 4A 5P 6m 7M","todi raga"],["1P 2m 3M 4P 5d 6m 7M","persian"],["1P 2m 3M 5d 6m 7m 7M","enigmatic"],["1P 2M 3M 4P 5A 6M 7M","major augmented","major #5","ionian augmented","ionian #5"],["1P 2A 3M 4A 5P 6M 7M","lydian #9"],["1P 2m 2M 4P 4A 5P 6m 7M","messiaen's mode #4"],["1P 2m 3M 4P 4A 5P 6m 7M","purvi raga"],["1P 2m 3m 3M 4P 5P 6m 7m","spanish heptatonic"],["1P 2M 3m 3M 4P 5P 6M 7m","bebop minor"],["1P 2M 3M 4P 5P 5A 6M 7M","bebop major"],["1P 2m 3m 4P 5d 5P 6m 7m","bebop locrian"],["1P 2M 3m 4P 5P 6m 7m 7M","minor bebop"],["1P 2M 3M 4P 5d 5P 6M 7M","ichikosucho"],["1P 2M 3m 4P 5P 6m 6M 7M","minor six diminished"],["1P 2m 3m 3M 4A 5P 6M 7m","half-whole diminished","dominant diminished","messiaen's mode #2"],["1P 3m 3M 4P 5P 6M 7m 7M","kafi raga"],["1P 2M 3M 4P 4A 5A 6A 7M","messiaen's mode #6"],["1P 2M 3m 3M 4P 5d 5P 6M 7m","composite blues"],["1P 2M 3m 3M 4A 5P 6m 7m 7M","messiaen's mode #3"],["1P 2m 2M 3m 4P 4A 5P 6m 6M 7M","messiaen's mode #7"],["1P 2m 2M 3m 3M 4P 5d 5P 6m 6M 7m 7M","chromatic"]],hN=dN,fN={...Fr,intervals:[],aliases:[]},xo={};function mN(t){return xo[t]||fN}function gN(t,e,n=[]){const i={...Uf(t),name:e,intervals:t,aliases:n};return xo[i.name]=i,xo[i.setNum]=i,xo[i.chroma]=i,i.aliases.forEach(r=>EN(i,r)),i}function EN(t,e){xo[e]=t}hN.forEach(([t,e,...n])=>gN(t.split(" "),e,n));var XS={empty:!0,name:"",symbol:"",root:"",bass:"",rootDegree:0,type:"",tonic:null,setNum:NaN,quality:"Unknown",chroma:"",normalized:"",aliases:[],notes:[],intervals:[]};function bN(t){const[e,n,i,r]=Rf(t);return e===""?Hc("",t):e==="A"&&r==="ug"?Hc("","aug"):Hc(e+n,i+r)}function Hc(t,e){const n=e.split("/");if(n.length===1)return[t,n[0],""];const[i,r,s,o]=Rf(n[1]);return i!==""&&s===""&&o===""?[t,n[0],i+r]:[t,e,""]}function pN(t){if(Array.isArray(t))return Wc(t[1]||"",t[0],t[2]);if(t==="")return XS;{const[e,n,i]=bN(t),r=Wc(n,e,i);return r.empty?Wc(t):r}}function Wc(t,e,n){const i=KT(t),r=Lt(e||""),s=Lt(n||"");if(i.empty||e&&r.empty||n&&s.empty)return XS;const o=bE(r.pc,s.pc),a=i.intervals.indexOf(o),l=a>=0,d=l?s:Lt(""),f=a===-1?NaN:a+1,u=s.pc&&s.pc!==r.pc,c=Array.from(i.intervals);if(l)for(let p=1;p<f;p++){const m=c[0][0],b=c[0][1],A=parseInt(m,10)+7;c.push(`${A}${b}`),c.shift()}else if(u){const p=lN(bE(r.pc,s.pc),"8P");p&&c.unshift(p)}const h=r.empty?[]:c.map(p=>If(r.pc,p));t=i.aliases.indexOf(t)!==-1?t:i.aliases[0];const g=`${r.empty?"":r.pc}${t}${l&&f>1?"/"+d.pc:u?"/"+s.pc:""}`,E=`${e?r.pc+" ":""}${i.name}${l&&f>1?" over "+d.pc:u?" over "+s.pc:""}`;return{...i,name:E,symbol:g,tonic:r.pc,type:i.name,root:d.pc,bass:u?s.pc:"",intervals:c,rootDegree:f,notes:h}}function SN(t,e){const n=pN(t),i=e||n.tonic;return!i||n.empty?[]:n.intervals.map(r=>If(i,r))}var Wf=[[0,2773,0,"ionian","","Maj7","major"],[1,2902,2,"dorian","m","m7"],[2,3418,4,"phrygian","m","m7"],[3,2741,-1,"lydian","","Maj7"],[4,2774,1,"mixolydian","","7"],[5,2906,3,"aeolian","m","m7","minor"],[6,3434,5,"locrian","dim","m7b5"]],AE={...Fr,name:"",alt:0,modeNum:NaN,triad:"",seventh:"",aliases:[]},AN=Wf.map(vN),$d={};AN.forEach(t=>{$d[t.name]=t,t.aliases.forEach(e=>{$d[e]=t})});function zS(t){return typeof t=="string"?$d[t.toLowerCase()]||AE:t&&t.name?zS(t.name):AE}function vN(t){const[e,n,i,r,s,o,a]=t,l=a?[a]:[],d=Number(n).toString(2);return{empty:!1,intervals:mN(r).intervals,modeNum:e,chroma:d,normalized:d,name:r,setNum:n,alt:i,triad:s,seventh:o,aliases:l}}function YS(t){return(e,n)=>{const i=zS(e);if(i.empty)return[];const r=jf(i.modeNum,t),s=i.intervals.map(o=>If(n,o));return r.map((o,a)=>s[a]+o)}}YS(Wf.map(t=>t[4]));YS(Wf.map(t=>t[5]));const CN=()=>{const{activeNotes:t}=uf(),n=(i=>{if(i.length<2)return null;const r=i.map(o=>o.replace(/\d+$/,"")),s=tN(r);return s.length>0?s[0]:null})(t);return v.jsx("div",{className:"piano-chords-display",children:n?v.jsx("div",{className:"chord-name",children:n}):v.jsx("div",{className:"no-chord",children:"No chord detected"})})};class wN{constructor(){cn(this,"getEveryChord",()=>{let e={};console.log("BEFORE",e);let n=["A","B","C","D","E","F","G","A#","C#","D#","F#","G#","Ab","Bb","Db","Eb","Gb"],i=["5","M7#5sus4","7#5sus4","sus4","M7sus4","7sus4","7no5","aug","M7b6","maj7#5","7#5","7b13","M","maj7","7","6","7add6","7b6","Mb5","M7b5","7b5","maj#4","7#11","M6#11","7#11b13","m#5","mb6M7","m7#5","m","m/ma7","m7","m6","mMaj7b6","dim","oM7","m7b5","dim7","o7M7","4","madd4","m7add11","+add#9","7#5#9","7#9","13#9","7#9b13","maj7#9#11","7#9#11","13#9#11","7#9#11b13","sus2","M9#5sus4","sus24","M9sus4","11","9sus4","13sus4","9no5","13no5","M#5add9","maj9#5","9#5","9b13","Madd9","maj9","9","6add9","maj13","M7add13","13","M9b5","9b5","13b5","9#5#11","maj9#11","9#11","69#11","M13#11","13#11","9#11b13","m9#5","madd9","mM9","m9","m69","m13","mMaj9b6","m9b5","m11A","m11","b9sus","11b9","7sus4b9b13","alt7","7#5b9","Maddb9","M7b9","7b9","13b9","7b9b13"];return n.forEach(r=>{i.forEach(s=>{try{let o=`${r}${s}`,a=SN(s,r);if(!a||a.length===0){console.log(`Skipping ${o} - no notes returned`);return}let l=a.join(",");e[l]=o}catch(o){console.log(`Error processing ${r}${s}: ${o.message}`)}})}),console.log("Chord definitions object created with",Object.keys(e).length,"entries"),e});cn(this,"identifyChord",e=>{const n=this.getEveryChord(),i=[...e].sort().join(",");return n[i]||null});cn(this,"rasterizeChord",e=>{})}}const DN=new wN;const xN=()=>(console.log(DN.getEveryChord()),B.useEffect(()=>{xr.setupMidi()},[]),v.jsx(v.Fragment,{children:v.jsxs("div",{id:"main-page-container",children:[v.jsx("div",{id:"piano-display-container",children:v.jsx(Vx,{})}),v.jsxs("div",{id:"feedback-display-container",children:[v.jsx("div",{className:"staff-display-container",children:v.jsx(ET,{})}),v.jsxs("div",{className:"chord-note-container",children:[v.jsx(bT,{}),v.jsx(CN,{})]}),v.jsx("div",{})]})]})})),BN=()=>Zn(e=>e.session.user)?v.jsx("div",{className:"authenticated-landing",children:v.jsx(xN,{})}):v.jsxs("div",{className:"landing-logo",children:[v.jsx("img",{className:"keyboard-logo",src:"/images/landing_keyboard.png",alt:"KBuddy logo"}),v.jsx("img",{className:"title",src:"/images/key-buddy-title-font.png",alt:"KBuddy logo"}),v.jsx("img",{className:"scales",src:"/images/background-scales-lighter.png",alt:"KBuddy logo"})]}),TN=[{"A,E":"A5","A,D,E#,G#":"AM7#5sus4","A,D,E#,G":"A7#5sus4","A,D,E":"Asus4","A,D,E,G#":"AM7sus4","A,D,E,G":"A7sus4","A,C#,G":"A7no5","A,C#,E#":"Aaug","A,C#,F,G#":"AM7b6","A,C#,E#,G#":"Amaj7#5","A,C#,E#,G":"A7#5","A,C#,G,F":"A7b13","A,C#,E":"AM","A,C#,E,G#":"Amaj7","A,C#,E,G":"A7","A,C#,E,F#":"A6","A,C#,E,G,F#":"A7add6","A,C#,E,F,G":"A7b6","A,C#,Eb":"AMb5","A,C#,Eb,G#":"AM7b5","A,C#,Eb,G":"A7b5","A,C#,E,G#,D#":"Amaj#4","A,C#,E,G,D#":"A7#11","A,C#,E,F#,D#":"AM6#11","A,C#,E,G,D#,F":"A7#11b13","A,C,E#":"Am#5","A,C,F,G#":"Amb6M7","A,C,F,G":"Am7#5","A,C,E":"Am","A,C,E,G#":"Am/ma7","A,C,E,G":"Am7","A,C,E,F#":"Am6","A,C,E,F,G#":"AmMaj7b6","A,C,Eb":"Adim","A,C,Eb,G#":"AoM7","A,C,Eb,G":"Am7b5","A,C,Eb,Gb":"Adim7","A,C,Eb,F#,G#":"Ao7M7","A,D,G,C":"A4","A,C,D,E":"Amadd4","A,C,E,G,D":"Am7add11","A,C#,E#,B#":"A+add#9","A,C#,E#,G,B#":"A7#5#9","A,C#,E,G,B#":"A7#9","A,C#,E,G,B#,F#":"A13#9","A,C#,E,G,B#,F":"A7#9b13","A,C#,E,G#,B#,D#":"Amaj7#9#11","A,C#,E,G,B#,D#":"A7#9#11","A,C#,E,G,B#,D#,F#":"A13#9#11","A,C#,E,G,B#,D#,F":"A7#9#11b13","A,B,E":"Asus2","A,D,E#,G#,B":"AM9#5sus4","A,B,D,E":"Asus24","A,D,E,G#,B":"AM9sus4","A,E,G,B,D":"A11","A,D,E,G,B":"Ab9sus","A,D,E,G,B,F#":"A13sus4","A,C#,G,B":"A9no5","A,C#,G,B,F#":"A13no5","A,C#,E#,B":"AM#5add9","A,C#,E#,G#,B":"Amaj9#5","A,C#,E#,G,B":"A9#5","A,C#,G,B,F":"A9b13","A,C#,E,B":"AMadd9","A,C#,E,G#,B":"Amaj9","A,C#,E,G,B":"A9","A,C#,E,F#,B":"A6add9","A,C#,E,G#,B,F#":"Amaj13","A,C#,E,F#,G#,B":"AM7add13","A,C#,E,G,B,F#":"A13","A,C#,Eb,G#,B":"AM9b5","A,C#,Eb,G,B":"A9b5","A,C#,Eb,F#,G,B":"A13b5","A,C#,E#,G,B,D#":"A9#5#11","A,C#,E,G#,B,D#":"Amaj9#11","A,C#,E,G,B,D#":"A9#11","A,C#,E,F#,B,D#":"A69#11","A,C#,E,G#,B,D#,F#":"AM13#11","A,C#,E,G,B,D#,F#":"A13#11","A,C#,E,G,B,D#,F":"A9#11b13","A,C,F,G,B":"Am9#5","A,C,E,B":"Amadd9","A,C,E,G#,B":"AmM9","A,C,E,G,B":"Am9","A,C,E,F#,B":"Am69","A,C,E,G,B,F#":"Am13","A,C,E,F,G#,B":"AmMaj9b6","A,B,C,Eb,G":"Am9b5","A,C,E#,G,B,D":"Am11A","A,C,E,G,B,D":"Am11","A,E,G,Bb,D":"A11b9","A,D,E,G,Bb,F":"A7sus4b9b13","A,C#,G,Bb":"Aalt7","A,C#,E#,G,Bb":"A7#5b9","A,C#,E,Bb":"AMaddb9","A,C#,E,G#,Bb":"AM7b9","A,C#,E,G,Bb":"A7b9","A,C#,E,G,Bb,F#":"A13b9","A,C#,E,G,Bb,F":"A7b9b13"},{"A#,E#":"A#5","A#,D#,E##,G##":"A#M7#5sus4","A#,D#,E##,G#":"A#7#5sus4","A#,D#,E#":"A#sus4","A#,D#,E#,G##":"A#M7sus4","A#,D#,E#,G#":"A#7sus4","A#,C##,G#":"A#7no5","A#,C##,E##":"A#aug","A#,C##,F#,G##":"A#M7b6","A#,C##,E##,G##":"A#maj7#5","A#,C##,E##,G#":"A#7#5","A#,C##,G#,F#":"A#7b13","A#,C##,E#":"A#M","A#,C##,E#,G##":"A#maj7","A#,C##,E#,G#":"A#7","A#,C##,E#,F##":"A#6","A#,C##,E#,G#,F##":"A#7add6","A#,C##,E#,F#,G#":"A#7b6","A#,C##,E":"A#Mb5","A#,C##,E,G##":"A#M7b5","A#,C##,E,G#":"A#7b5","A#,C##,E#,G##,D##":"A#maj#4","A#,C##,E#,G#,D##":"A#7#11","A#,C##,E#,F##,D##":"A#M6#11","A#,C##,E#,G#,D##,F#":"A#7#11b13","A#,C#,E##":"A#m#5","A#,C#,F#,G##":"A#mb6M7","A#,C#,F#,G#":"A#m7#5","A#,C#,E#":"A#m","A#,C#,E#,G##":"A#m/ma7","A#,C#,E#,G#":"A#m7","A#,C#,E#,F##":"A#m6","A#,C#,E#,F#,G##":"A#mMaj7b6","A#,C#,E":"A#dim","A#,C#,E,G##":"A#oM7","A#,C#,E,G#":"A#m7b5","A#,C#,E,G":"A#dim7","A#,C#,E,F##,G##":"A#o7M7","A#,D#,G#,C#":"A#4","A#,C#,D#,E#":"A#madd4","A#,C#,E#,G#,D#":"A#m7add11","A#,C##,E##,B##":"A#+add#9","A#,C##,E##,G#,B##":"A#7#5#9","A#,C##,E#,G#,B##":"A#7#9","A#,C##,E#,G#,B##,F##":"A#13#9","A#,C##,E#,G#,B##,F#":"A#7#9b13","A#,C##,E#,G##,B##,D##":"A#maj7#9#11","A#,C##,E#,G#,B##,D##":"A#7#9#11","A#,C##,E#,G#,B##,D##,F##":"A#13#9#11","A#,C##,E#,G#,B##,D##,F#":"A#7#9#11b13","A#,B#,E#":"A#sus2","A#,D#,E##,G##,B#":"A#M9#5sus4","A#,B#,D#,E#":"A#sus24","A#,D#,E#,G##,B#":"A#M9sus4","A#,E#,G#,B#,D#":"A#11","A#,D#,E#,G#,B#":"A#b9sus","A#,D#,E#,G#,B#,F##":"A#13sus4","A#,C##,G#,B#":"A#9no5","A#,C##,G#,B#,F##":"A#13no5","A#,C##,E##,B#":"A#M#5add9","A#,C##,E##,G##,B#":"A#maj9#5","A#,C##,E##,G#,B#":"A#9#5","A#,C##,G#,B#,F#":"A#9b13","A#,C##,E#,B#":"A#Madd9","A#,C##,E#,G##,B#":"A#maj9","A#,C##,E#,G#,B#":"A#9","A#,C##,E#,F##,B#":"A#6add9","A#,C##,E#,G##,B#,F##":"A#maj13","A#,C##,E#,F##,G##,B#":"A#M7add13","A#,C##,E#,G#,B#,F##":"A#13","A#,C##,E,G##,B#":"A#M9b5","A#,C##,E,G#,B#":"A#9b5","A#,C##,E,F##,G#,B#":"A#13b5","A#,C##,E##,G#,B#,D##":"A#9#5#11","A#,C##,E#,G##,B#,D##":"A#maj9#11","A#,C##,E#,G#,B#,D##":"A#9#11","A#,C##,E#,F##,B#,D##":"A#69#11","A#,C##,E#,G##,B#,D##,F##":"A#M13#11","A#,C##,E#,G#,B#,D##,F##":"A#13#11","A#,C##,E#,G#,B#,D##,F#":"A#9#11b13","A#,C#,F#,G#,B#":"A#m9#5","A#,C#,E#,B#":"A#madd9","A#,C#,E#,G##,B#":"A#mM9","A#,C#,E#,G#,B#":"A#m9","A#,C#,E#,F##,B#":"A#m69","A#,C#,E#,G#,B#,F##":"A#m13","A#,C#,E#,F#,G##,B#":"A#mMaj9b6","A#,B#,C#,E,G#":"A#m9b5","A#,C#,E##,G#,B#,D#":"A#m11A","A#,C#,E#,G#,B#,D#":"A#m11","A#,E#,G#,B,D#":"A#11b9","A#,D#,E#,G#,B,F#":"A#7sus4b9b13","A#,C##,G#,B":"A#alt7","A#,C##,E##,G#,B":"A#7#5b9","A#,C##,E#,B":"A#Maddb9","A#,C##,E#,G##,B":"A#M7b9","A#,C##,E#,G#,B":"A#7b9","A#,C##,E#,G#,B,F##":"A#13b9","A#,C##,E#,G#,B,F#":"A#7b9b13"},{"Ab,Eb":"Ab5","Ab,Db,E,G":"AbM7#5sus4","Ab,Db,E,Gb":"Ab7#5sus4","Ab,Db,Eb":"Absus4","Ab,Db,Eb,G":"AbM7sus4","Ab,Db,Eb,Gb":"Ab7sus4","Ab,C,Gb":"Ab7no5","Ab,C,E":"Abaug","Ab,C,Fb,G":"AbM7b6","Ab,C,E,G":"Abmaj7#5","Ab,C,E,Gb":"Ab7#5","Ab,C,Gb,Fb":"Ab7b13","Ab,C,Eb":"AbM","Ab,C,Eb,G":"Abmaj7","Ab,C,Eb,Gb":"Ab7","Ab,C,Eb,F":"Ab6","Ab,C,Eb,Gb,F":"Ab7add6","Ab,C,Eb,Fb,Gb":"Ab7b6","Ab,C,Ebb":"AbMb5","Ab,C,Ebb,G":"AbM7b5","Ab,C,Ebb,Gb":"Ab7b5","Ab,C,Eb,G,D":"Abmaj#4","Ab,C,Eb,Gb,D":"Ab7#11","Ab,C,Eb,F,D":"AbM6#11","Ab,C,Eb,Gb,D,Fb":"Ab7#11b13","Ab,Cb,E":"Abm#5","Ab,Cb,Fb,G":"Abmb6M7","Ab,Cb,Fb,Gb":"Abm7#5","Ab,Cb,Eb":"Abm","Ab,Cb,Eb,G":"Abm/ma7","Ab,Cb,Eb,Gb":"Abm7","Ab,Cb,Eb,F":"Abm6","Ab,Cb,Eb,Fb,G":"AbmMaj7b6","Ab,Cb,Ebb":"Abdim","Ab,Cb,Ebb,G":"AboM7","Ab,Cb,Ebb,Gb":"Abm7b5","Ab,Cb,Ebb,Gbb":"Abdim7","Ab,Cb,Ebb,F,G":"Abo7M7","Ab,Db,Gb,Cb":"Ab4","Ab,Cb,Db,Eb":"Abmadd4","Ab,Cb,Eb,Gb,Db":"Abm7add11","Ab,C,E,B":"Ab+add#9","Ab,C,E,Gb,B":"Ab7#5#9","Ab,C,Eb,Gb,B":"Ab7#9","Ab,C,Eb,Gb,B,F":"Ab13#9","Ab,C,Eb,Gb,B,Fb":"Ab7#9b13","Ab,C,Eb,G,B,D":"Abmaj7#9#11","Ab,C,Eb,Gb,B,D":"Ab7#9#11","Ab,C,Eb,Gb,B,D,F":"Ab13#9#11","Ab,C,Eb,Gb,B,D,Fb":"Ab7#9#11b13","Ab,Bb,Eb":"Absus2","Ab,Db,E,G,Bb":"AbM9#5sus4","Ab,Bb,Db,Eb":"Absus24","Ab,Db,Eb,G,Bb":"AbM9sus4","Ab,Eb,Gb,Bb,Db":"Ab11","Ab,Db,Eb,Gb,Bb":"Abb9sus","Ab,Db,Eb,Gb,Bb,F":"Ab13sus4","Ab,C,Gb,Bb":"Ab9no5","Ab,C,Gb,Bb,F":"Ab13no5","Ab,C,E,Bb":"AbM#5add9","Ab,C,E,G,Bb":"Abmaj9#5","Ab,C,E,Gb,Bb":"Ab9#5","Ab,C,Gb,Bb,Fb":"Ab9b13","Ab,C,Eb,Bb":"AbMadd9","Ab,C,Eb,G,Bb":"Abmaj9","Ab,C,Eb,Gb,Bb":"Ab9","Ab,C,Eb,F,Bb":"Ab6add9","Ab,C,Eb,G,Bb,F":"Abmaj13","Ab,C,Eb,F,G,Bb":"AbM7add13","Ab,C,Eb,Gb,Bb,F":"Ab13","Ab,C,Ebb,G,Bb":"AbM9b5","Ab,C,Ebb,Gb,Bb":"Ab9b5","Ab,C,Ebb,F,Gb,Bb":"Ab13b5","Ab,C,E,Gb,Bb,D":"Ab9#5#11","Ab,C,Eb,G,Bb,D":"Abmaj9#11","Ab,C,Eb,Gb,Bb,D":"Ab9#11","Ab,C,Eb,F,Bb,D":"Ab69#11","Ab,C,Eb,G,Bb,D,F":"AbM13#11","Ab,C,Eb,Gb,Bb,D,F":"Ab13#11","Ab,C,Eb,Gb,Bb,D,Fb":"Ab9#11b13","Ab,Cb,Fb,Gb,Bb":"Abm9#5","Ab,Cb,Eb,Bb":"Abmadd9","Ab,Cb,Eb,G,Bb":"AbmM9","Ab,Cb,Eb,Gb,Bb":"Abm9","Ab,Cb,Eb,F,Bb":"Abm69","Ab,Cb,Eb,Gb,Bb,F":"Abm13","Ab,Cb,Eb,Fb,G,Bb":"AbmMaj9b6","Ab,Bb,Cb,Ebb,Gb":"Abm9b5","Ab,Cb,E,Gb,Bb,Db":"Abm11A","Ab,Cb,Eb,Gb,Bb,Db":"Abm11","Ab,Eb,Gb,Bbb,Db":"Ab11b9","Ab,Db,Eb,Gb,Bbb,Fb":"Ab7sus4b9b13","Ab,C,Gb,Bbb":"Abalt7","Ab,C,E,Gb,Bbb":"Ab7#5b9","Ab,C,Eb,Bbb":"AbMaddb9","Ab,C,Eb,G,Bbb":"AbM7b9","Ab,C,Eb,Gb,Bbb":"Ab7b9","Ab,C,Eb,Gb,Bbb,F":"Ab13b9","Ab,C,Eb,Gb,Bbb,Fb":"Ab7b9b13"}],NN=[{"B,F#":"B5","B,E,F##,A#":"BM7#5sus4","B,E,F##,A":"B7#5sus4","B,E,F#":"Bsus4","B,E,F#,A#":"BM7sus4","B,E,F#,A":"B7sus4","B,D#,A":"B7no5","B,D#,F##":"Baug","B,D#,G,A#":"BM7b6","B,D#,F##,A#":"Bmaj7#5","B,D#,F##,A":"B7#5","B,D#,A,G":"B7b13","B,D#,F#":"BM","B,D#,F#,A#":"Bmaj7","B,D#,F#,A":"B7","B,D#,F#,G#":"B6","B,D#,F#,A,G#":"B7add6","B,D#,F#,G,A":"B7b6","B,D#,F":"BMb5","B,D#,F,A#":"BM7b5","B,D#,F,A":"B7b5","B,D#,F#,A#,E#":"Bmaj#4","B,D#,F#,A,E#":"B7#11","B,D#,F#,G#,E#":"BM6#11","B,D#,F#,A,E#,G":"B7#11b13","B,D,F##":"Bm#5","B,D,G,A#":"Bmb6M7","B,D,G,A":"Bm7#5","B,D,F#":"Bm","B,D,F#,A#":"Bm/ma7","B,D,F#,A":"Bm7","B,D,F#,G#":"Bm6","B,D,F#,G,A#":"BmMaj7b6","B,D,F":"Bdim","B,D,F,A#":"BoM7","B,D,F,A":"Bm7b5","B,D,F,Ab":"Bdim7","B,D,F,G#,A#":"Bo7M7","B,E,A,D":"B4","B,D,E,F#":"Bmadd4","B,D,F#,A,E":"Bm7add11","B,D#,F##,C##":"B+add#9","B,D#,F##,A,C##":"B7#5#9","B,D#,F#,A,C##":"B7#9","B,D#,F#,A,C##,G#":"B13#9","B,D#,F#,A,C##,G":"B7#9b13","B,D#,F#,A#,C##,E#":"Bmaj7#9#11","B,D#,F#,A,C##,E#":"B7#9#11","B,D#,F#,A,C##,E#,G#":"B13#9#11","B,D#,F#,A,C##,E#,G":"B7#9#11b13","B,C#,F#":"Bsus2","B,E,F##,A#,C#":"BM9#5sus4","B,C#,E,F#":"Bsus24","B,E,F#,A#,C#":"BM9sus4","B,F#,A,C#,E":"B11","B,E,F#,A,C#":"Bb9sus","B,E,F#,A,C#,G#":"B13sus4","B,D#,A,C#":"B9no5","B,D#,A,C#,G#":"B13no5","B,D#,F##,C#":"BM#5add9","B,D#,F##,A#,C#":"Bmaj9#5","B,D#,F##,A,C#":"B9#5","B,D#,A,C#,G":"B9b13","B,D#,F#,C#":"BMadd9","B,D#,F#,A#,C#":"Bmaj9","B,D#,F#,A,C#":"B9","B,D#,F#,G#,C#":"B6add9","B,D#,F#,A#,C#,G#":"Bmaj13","B,D#,F#,G#,A#,C#":"BM7add13","B,D#,F#,A,C#,G#":"B13","B,D#,F,A#,C#":"BM9b5","B,D#,F,A,C#":"B9b5","B,D#,F,G#,A,C#":"B13b5","B,D#,F##,A,C#,E#":"B9#5#11","B,D#,F#,A#,C#,E#":"Bmaj9#11","B,D#,F#,A,C#,E#":"B9#11","B,D#,F#,G#,C#,E#":"B69#11","B,D#,F#,A#,C#,E#,G#":"BM13#11","B,D#,F#,A,C#,E#,G#":"B13#11","B,D#,F#,A,C#,E#,G":"B9#11b13","B,D,G,A,C#":"Bm9#5","B,D,F#,C#":"Bmadd9","B,D,F#,A#,C#":"BmM9","B,D,F#,A,C#":"Bm9","B,D,F#,G#,C#":"Bm69","B,D,F#,A,C#,G#":"Bm13","B,D,F#,G,A#,C#":"BmMaj9b6","B,C#,D,F,A":"Bm9b5","B,D,F##,A,C#,E":"Bm11A","B,D,F#,A,C#,E":"Bm11","B,F#,A,C,E":"B11b9","B,E,F#,A,C,G":"B7sus4b9b13","B,D#,A,C":"Balt7","B,D#,F##,A,C":"B7#5b9","B,D#,F#,C":"BMaddb9","B,D#,F#,A#,C":"BM7b9","B,D#,F#,A,C":"B7b9","B,D#,F#,A,C,G#":"B13b9","B,D#,F#,A,C,G":"B7b9b13"},{"Bb,F":"Bb5","Bb,Eb,F#,A":"BbM7#5sus4","Bb,Eb,F#,Ab":"Bb7#5sus4","Bb,Eb,F":"Bbsus4","Bb,Eb,F,A":"BbM7sus4","Bb,Eb,F,Ab":"Bb7sus4","Bb,D,Ab":"Bb7no5","Bb,D,F#":"Bbaug","Bb,D,Gb,A":"BbM7b6","Bb,D,F#,A":"Bbmaj7#5","Bb,D,F#,Ab":"Bb7#5","Bb,D,Ab,Gb":"Bb7b13","Bb,D,F":"BbM","Bb,D,F,A":"Bbmaj7","Bb,D,F,Ab":"Bb7","Bb,D,F,G":"Bb6","Bb,D,F,Ab,G":"Bb7add6","Bb,D,F,Gb,Ab":"Bb7b6","Bb,D,Fb":"BbMb5","Bb,D,Fb,A":"BbM7b5","Bb,D,Fb,Ab":"Bb7b5","Bb,D,F,A,E":"Bbmaj#4","Bb,D,F,Ab,E":"Bb7#11","Bb,D,F,G,E":"BbM6#11","Bb,D,F,Ab,E,Gb":"Bb7#11b13","Bb,Db,F#":"Bbm#5","Bb,Db,Gb,A":"Bbmb6M7","Bb,Db,Gb,Ab":"Bbm7#5","Bb,Db,F":"Bbm","Bb,Db,F,A":"Bbm/ma7","Bb,Db,F,Ab":"Bbm7","Bb,Db,F,G":"Bbm6","Bb,Db,F,Gb,A":"BbmMaj7b6","Bb,Db,Fb":"Bbdim","Bb,Db,Fb,A":"BboM7","Bb,Db,Fb,Ab":"Bbm7b5","Bb,Db,Fb,Abb":"Bbdim7","Bb,Db,Fb,G,A":"Bbo7M7","Bb,Eb,Ab,Db":"Bb4","Bb,Db,Eb,F":"Bbmadd4","Bb,Db,F,Ab,Eb":"Bbm7add11","Bb,D,F#,C#":"Bb+add#9","Bb,D,F#,Ab,C#":"Bb7#5#9","Bb,D,F,Ab,C#":"Bb7#9","Bb,D,F,Ab,C#,G":"Bb13#9","Bb,D,F,Ab,C#,Gb":"Bb7#9b13","Bb,D,F,A,C#,E":"Bbmaj7#9#11","Bb,D,F,Ab,C#,E":"Bb7#9#11","Bb,D,F,Ab,C#,E,G":"Bb13#9#11","Bb,D,F,Ab,C#,E,Gb":"Bb7#9#11b13","Bb,C,F":"Bbsus2","Bb,Eb,F#,A,C":"BbM9#5sus4","Bb,C,Eb,F":"Bbsus24","Bb,Eb,F,A,C":"BbM9sus4","Bb,F,Ab,C,Eb":"Bb11","Bb,Eb,F,Ab,C":"Bbb9sus","Bb,Eb,F,Ab,C,G":"Bb13sus4","Bb,D,Ab,C":"Bb9no5","Bb,D,Ab,C,G":"Bb13no5","Bb,D,F#,C":"BbM#5add9","Bb,D,F#,A,C":"Bbmaj9#5","Bb,D,F#,Ab,C":"Bb9#5","Bb,D,Ab,C,Gb":"Bb9b13","Bb,D,F,C":"BbMadd9","Bb,D,F,A,C":"Bbmaj9","Bb,D,F,Ab,C":"Bb9","Bb,D,F,G,C":"Bb6add9","Bb,D,F,A,C,G":"Bbmaj13","Bb,D,F,G,A,C":"BbM7add13","Bb,D,F,Ab,C,G":"Bb13","Bb,D,Fb,A,C":"BbM9b5","Bb,D,Fb,Ab,C":"Bb9b5","Bb,D,Fb,G,Ab,C":"Bb13b5","Bb,D,F#,Ab,C,E":"Bb9#5#11","Bb,D,F,A,C,E":"Bbmaj9#11","Bb,D,F,Ab,C,E":"Bb9#11","Bb,D,F,G,C,E":"Bb69#11","Bb,D,F,A,C,E,G":"BbM13#11","Bb,D,F,Ab,C,E,G":"Bb13#11","Bb,D,F,Ab,C,E,Gb":"Bb9#11b13","Bb,Db,Gb,Ab,C":"Bbm9#5","Bb,Db,F,C":"Bbmadd9","Bb,Db,F,A,C":"BbmM9","Bb,Db,F,Ab,C":"Bbm9","Bb,Db,F,G,C":"Bbm69","Bb,Db,F,Ab,C,G":"Bbm13","Bb,Db,F,Gb,A,C":"BbmMaj9b6","Bb,C,Db,Fb,Ab":"Bbm9b5","Bb,Db,F#,Ab,C,Eb":"Bbm11A","Bb,Db,F,Ab,C,Eb":"Bbm11","Bb,F,Ab,Cb,Eb":"Bb11b9","Bb,Eb,F,Ab,Cb,Gb":"Bb7sus4b9b13","Bb,D,Ab,Cb":"Bbalt7","Bb,D,F#,Ab,Cb":"Bb7#5b9","Bb,D,F,Cb":"BbMaddb9","Bb,D,F,A,Cb":"BbM7b9","Bb,D,F,Ab,Cb":"Bb7b9","Bb,D,F,Ab,Cb,G":"Bb13b9","Bb,D,F,Ab,Cb,Gb":"Bb7b9b13"}],FN=[{"C,G":"C5","C,F,G#,B":"CM7#5sus4","C,F,G#,Bb":"C7#5sus4","C,F,G":"Csus4","C,F,G,B":"CM7sus4","C,F,G,Bb":"C7sus4","C,E,Bb":"C7no5","C,E,G#":"Caug","C,E,Ab,B":"CM7b6","C,E,G#,B":"Cmaj7#5","C,E,G#,Bb":"C7#5","C,E,Bb,Ab":"C7b13","C,E,G":"CM","C,E,G,B":"Cmaj7","C,E,G,Bb":"C7","C,E,G,A":"C6","C,E,G,Bb,A":"C7add6","C,E,G,Ab,Bb":"C7b6","C,E,Gb":"CMb5","C,E,Gb,B":"CM7b5","C,E,Gb,Bb":"C7b5","C,E,G,B,F#":"Cmaj#4","C,E,G,Bb,F#":"C7#11","C,E,G,A,F#":"CM6#11","C,E,G,Bb,F#,Ab":"C7#11b13","C,Eb,G#":"Cm#5","C,Eb,Ab,B":"Cmb6M7","C,Eb,Ab,Bb":"Cm7#5","C,Eb,G":"Cm","C,Eb,G,B":"Cm/ma7","C,Eb,G,Bb":"Cm7","C,Eb,G,A":"Cm6","C,Eb,G,Ab,B":"CmMaj7b6","C,Eb,Gb":"Cdim","C,Eb,Gb,B":"CoM7","C,Eb,Gb,Bb":"Cm7b5","C,Eb,Gb,Bbb":"Cdim7","C,Eb,Gb,A,B":"Co7M7","C,F,Bb,Eb":"C4","C,Eb,F,G":"Cmadd4","C,Eb,G,Bb,F":"Cm7add11","C,E,G#,D#":"C+add#9","C,E,G#,Bb,D#":"C7#5#9","C,E,G,Bb,D#":"C7#9","C,E,G,Bb,D#,A":"C13#9","C,E,G,Bb,D#,Ab":"C7#9b13","C,E,G,B,D#,F#":"Cmaj7#9#11","C,E,G,Bb,D#,F#":"C7#9#11","C,E,G,Bb,D#,F#,A":"C13#9#11","C,E,G,Bb,D#,F#,Ab":"C7#9#11b13","C,D,G":"Csus2","C,F,G#,B,D":"CM9#5sus4","C,D,F,G":"Csus24","C,F,G,B,D":"CM9sus4","C,G,Bb,D,F":"C11","C,F,G,Bb,D":"Cb9sus","C,F,G,Bb,D,A":"C13sus4","C,E,Bb,D":"C9no5","C,E,Bb,D,A":"C13no5","C,E,G#,D":"CM#5add9","C,E,G#,B,D":"Cmaj9#5","C,E,G#,Bb,D":"C9#5","C,E,Bb,D,Ab":"C9b13","C,E,G,D":"CMadd9","C,E,G,B,D":"Cmaj9","C,E,G,Bb,D":"C9","C,E,G,A,D":"C6add9","C,E,G,B,D,A":"Cmaj13","C,E,G,A,B,D":"CM7add13","C,E,G,Bb,D,A":"C13","C,E,Gb,B,D":"CM9b5","C,E,Gb,Bb,D":"C9b5","C,E,Gb,A,Bb,D":"C13b5","C,E,G#,Bb,D,F#":"C9#5#11","C,E,G,B,D,F#":"Cmaj9#11","C,E,G,Bb,D,F#":"C9#11","C,E,G,A,D,F#":"C69#11","C,E,G,B,D,F#,A":"CM13#11","C,E,G,Bb,D,F#,A":"C13#11","C,E,G,Bb,D,F#,Ab":"C9#11b13","C,Eb,Ab,Bb,D":"Cm9#5","C,Eb,G,D":"Cmadd9","C,Eb,G,B,D":"CmM9","C,Eb,G,Bb,D":"Cm9","C,Eb,G,A,D":"Cm69","C,Eb,G,Bb,D,A":"Cm13","C,Eb,G,Ab,B,D":"CmMaj9b6","C,D,Eb,Gb,Bb":"Cm9b5","C,Eb,G#,Bb,D,F":"Cm11A","C,Eb,G,Bb,D,F":"Cm11","C,G,Bb,Db,F":"C11b9","C,F,G,Bb,Db,Ab":"C7sus4b9b13","C,E,Bb,Db":"Calt7","C,E,G#,Bb,Db":"C7#5b9","C,E,G,Db":"CMaddb9","C,E,G,B,Db":"CM7b9","C,E,G,Bb,Db":"C7b9","C,E,G,Bb,Db,A":"C13b9","C,E,G,Bb,Db,Ab":"C7b9b13"},{"C#,G#":"C#5","C#,F#,G##,B#":"C#M7#5sus4","C#,F#,G##,B":"C#7#5sus4","C#,F#,G#":"C#sus4","C#,F#,G#,B#":"C#M7sus4","C#,F#,G#,B":"C#7sus4","C#,E#,B":"C#7no5","C#,E#,G##":"C#aug","C#,E#,A,B#":"C#M7b6","C#,E#,G##,B#":"C#maj7#5","C#,E#,G##,B":"C#7#5","C#,E#,B,A":"C#7b13","C#,E#,G#":"C#M","C#,E#,G#,B#":"C#maj7","C#,E#,G#,B":"C#7","C#,E#,G#,A#":"C#6","C#,E#,G#,B,A#":"C#7add6","C#,E#,G#,A,B":"C#7b6","C#,E#,G":"C#Mb5","C#,E#,G,B#":"C#M7b5","C#,E#,G,B":"C#7b5","C#,E#,G#,B#,F##":"C#maj#4","C#,E#,G#,B,F##":"C#7#11","C#,E#,G#,A#,F##":"C#M6#11","C#,E#,G#,B,F##,A":"C#7#11b13","C#,E,G##":"C#m#5","C#,E,A,B#":"C#mb6M7","C#,E,A,B":"C#m7#5","C#,E,G#":"C#m","C#,E,G#,B#":"C#m/ma7","C#,E,G#,B":"C#m7","C#,E,G#,A#":"C#m6","C#,E,G#,A,B#":"C#mMaj7b6","C#,E,G":"C#dim","C#,E,G,B#":"C#oM7","C#,E,G,B":"C#m7b5","C#,E,G,Bb":"C#dim7","C#,E,G,A#,B#":"C#o7M7","C#,F#,B,E":"C#4","C#,E,F#,G#":"C#madd4","C#,E,G#,B,F#":"C#m7add11","C#,E#,G##,D##":"C#+add#9","C#,E#,G##,B,D##":"C#7#5#9","C#,E#,G#,B,D##":"C#7#9","C#,E#,G#,B,D##,A#":"C#13#9","C#,E#,G#,B,D##,A":"C#7#9b13","C#,E#,G#,B#,D##,F##":"C#maj7#9#11","C#,E#,G#,B,D##,F##":"C#7#9#11","C#,E#,G#,B,D##,F##,A#":"C#13#9#11","C#,E#,G#,B,D##,F##,A":"C#7#9#11b13","C#,D#,G#":"C#sus2","C#,F#,G##,B#,D#":"C#M9#5sus4","C#,D#,F#,G#":"C#sus24","C#,F#,G#,B#,D#":"C#M9sus4","C#,G#,B,D#,F#":"C#11","C#,F#,G#,B,D#":"C#b9sus","C#,F#,G#,B,D#,A#":"C#13sus4","C#,E#,B,D#":"C#9no5","C#,E#,B,D#,A#":"C#13no5","C#,E#,G##,D#":"C#M#5add9","C#,E#,G##,B#,D#":"C#maj9#5","C#,E#,G##,B,D#":"C#9#5","C#,E#,B,D#,A":"C#9b13","C#,E#,G#,D#":"C#Madd9","C#,E#,G#,B#,D#":"C#maj9","C#,E#,G#,B,D#":"C#9","C#,E#,G#,A#,D#":"C#6add9","C#,E#,G#,B#,D#,A#":"C#maj13","C#,E#,G#,A#,B#,D#":"C#M7add13","C#,E#,G#,B,D#,A#":"C#13","C#,E#,G,B#,D#":"C#M9b5","C#,E#,G,B,D#":"C#9b5","C#,E#,G,A#,B,D#":"C#13b5","C#,E#,G##,B,D#,F##":"C#9#5#11","C#,E#,G#,B#,D#,F##":"C#maj9#11","C#,E#,G#,B,D#,F##":"C#9#11","C#,E#,G#,A#,D#,F##":"C#69#11","C#,E#,G#,B#,D#,F##,A#":"C#M13#11","C#,E#,G#,B,D#,F##,A#":"C#13#11","C#,E#,G#,B,D#,F##,A":"C#9#11b13","C#,E,A,B,D#":"C#m9#5","C#,E,G#,D#":"C#madd9","C#,E,G#,B#,D#":"C#mM9","C#,E,G#,B,D#":"C#m9","C#,E,G#,A#,D#":"C#m69","C#,E,G#,B,D#,A#":"C#m13","C#,E,G#,A,B#,D#":"C#mMaj9b6","C#,D#,E,G,B":"C#m9b5","C#,E,G##,B,D#,F#":"C#m11A","C#,E,G#,B,D#,F#":"C#m11","C#,G#,B,D,F#":"C#11b9","C#,F#,G#,B,D,A":"C#7sus4b9b13","C#,E#,B,D":"C#alt7","C#,E#,G##,B,D":"C#7#5b9","C#,E#,G#,D":"C#Maddb9","C#,E#,G#,B#,D":"C#M7b9","C#,E#,G#,B,D":"C#7b9","C#,E#,G#,B,D,A#":"C#13b9","C#,E#,G#,B,D,A":"C#7b9b13"}],MN=[{"D,A":"D5","D,G,A#,C#":"DM7#5sus4","D,G,A#,C":"D7#5sus4","D,G,A":"Dsus4","D,G,A,C#":"DM7sus4","D,G,A,C":"D7sus4","D,F#,C":"D7no5","D,F#,A#":"Daug","D,F#,Bb,C#":"DM7b6","D,F#,A#,C#":"Dmaj7#5","D,F#,A#,C":"D7#5","D,F#,C,Bb":"D7b13","D,F#,A":"DM","D,F#,A,C#":"Dmaj7","D,F#,A,C":"D7","D,F#,A,B":"D6","D,F#,A,C,B":"D7add6","D,F#,A,Bb,C":"D7b6","D,F#,Ab":"DMb5","D,F#,Ab,C#":"DM7b5","D,F#,Ab,C":"D7b5","D,F#,A,C#,G#":"Dmaj#4","D,F#,A,C,G#":"D7#11","D,F#,A,B,G#":"DM6#11","D,F#,A,C,G#,Bb":"D7#11b13","D,F,A#":"Dm#5","D,F,Bb,C#":"Dmb6M7","D,F,Bb,C":"Dm7#5","D,F,A":"Dm","D,F,A,C#":"Dm/ma7","D,F,A,C":"Dm7","D,F,A,B":"Dm6","D,F,A,Bb,C#":"DmMaj7b6","D,F,Ab":"Ddim","D,F,Ab,C#":"DoM7","D,F,Ab,C":"Dm7b5","D,F,Ab,Cb":"Ddim7","D,F,Ab,B,C#":"Do7M7","D,G,C,F":"D4","D,F,G,A":"Dmadd4","D,F,A,C,G":"Dm7add11","D,F#,A#,E#":"D+add#9","D,F#,A#,C,E#":"D7#5#9","D,F#,A,C,E#":"D7#9","D,F#,A,C,E#,B":"D13#9","D,F#,A,C,E#,Bb":"D7#9b13","D,F#,A,C#,E#,G#":"Dmaj7#9#11","D,F#,A,C,E#,G#":"D7#9#11","D,F#,A,C,E#,G#,B":"D13#9#11","D,F#,A,C,E#,G#,Bb":"D7#9#11b13","D,E,A":"Dsus2","D,G,A#,C#,E":"DM9#5sus4","D,E,G,A":"Dsus24","D,G,A,C#,E":"DM9sus4","D,A,C,E,G":"D11","D,G,A,C,E":"Db9sus","D,G,A,C,E,B":"D13sus4","D,F#,C,E":"D9no5","D,F#,C,E,B":"D13no5","D,F#,A#,E":"DM#5add9","D,F#,A#,C#,E":"Dmaj9#5","D,F#,A#,C,E":"D9#5","D,F#,C,E,Bb":"D9b13","D,F#,A,E":"DMadd9","D,F#,A,C#,E":"Dmaj9","D,F#,A,C,E":"D9","D,F#,A,B,E":"D6add9","D,F#,A,C#,E,B":"Dmaj13","D,F#,A,B,C#,E":"DM7add13","D,F#,A,C,E,B":"D13","D,F#,Ab,C#,E":"DM9b5","D,F#,Ab,C,E":"D9b5","D,F#,Ab,B,C,E":"D13b5","D,F#,A#,C,E,G#":"D9#5#11","D,F#,A,C#,E,G#":"Dmaj9#11","D,F#,A,C,E,G#":"D9#11","D,F#,A,B,E,G#":"D69#11","D,F#,A,C#,E,G#,B":"DM13#11","D,F#,A,C,E,G#,B":"D13#11","D,F#,A,C,E,G#,Bb":"D9#11b13","D,F,Bb,C,E":"Dm9#5","D,F,A,E":"Dmadd9","D,F,A,C#,E":"DmM9","D,F,A,C,E":"Dm9","D,F,A,B,E":"Dm69","D,F,A,C,E,B":"Dm13","D,F,A,Bb,C#,E":"DmMaj9b6","D,E,F,Ab,C":"Dm9b5","D,F,A#,C,E,G":"Dm11A","D,F,A,C,E,G":"Dm11","D,A,C,Eb,G":"D11b9","D,G,A,C,Eb,Bb":"D7sus4b9b13","D,F#,C,Eb":"Dalt7","D,F#,A#,C,Eb":"D7#5b9","D,F#,A,Eb":"DMaddb9","D,F#,A,C#,Eb":"DM7b9","D,F#,A,C,Eb":"D7b9","D,F#,A,C,Eb,B":"D13b9","D,F#,A,C,Eb,Bb":"D7b9b13"},{"D#,A#":"D#5","D#,G#,A##,C##":"D#M7#5sus4","D#,G#,A##,C#":"D#7#5sus4","D#,G#,A#":"D#sus4","D#,G#,A#,C##":"D#M7sus4","D#,G#,A#,C#":"D#7sus4","D#,F##,C#":"D#7no5","D#,F##,A##":"D#aug","D#,F##,B,C##":"D#M7b6","D#,F##,A##,C##":"D#maj7#5","D#,F##,A##,C#":"D#7#5","D#,F##,C#,B":"D#7b13","D#,F##,A#":"D#M","D#,F##,A#,C##":"D#maj7","D#,F##,A#,C#":"D#7","D#,F##,A#,B#":"D#6","D#,F##,A#,C#,B#":"D#7add6","D#,F##,A#,B,C#":"D#7b6","D#,F##,A":"D#Mb5","D#,F##,A,C##":"D#M7b5","D#,F##,A,C#":"D#7b5","D#,F##,A#,C##,G##":"D#maj#4","D#,F##,A#,C#,G##":"D#7#11","D#,F##,A#,B#,G##":"D#M6#11","D#,F##,A#,C#,G##,B":"D#7#11b13","D#,F#,A##":"D#m#5","D#,F#,B,C##":"D#mb6M7","D#,F#,B,C#":"D#m7#5","D#,F#,A#":"D#m","D#,F#,A#,C##":"D#m/ma7","D#,F#,A#,C#":"D#m7","D#,F#,A#,B#":"D#m6","D#,F#,A#,B,C##":"D#mMaj7b6","D#,F#,A":"D#dim","D#,F#,A,C##":"D#oM7","D#,F#,A,C#":"D#m7b5","D#,F#,A,C":"D#dim7","D#,F#,A,B#,C##":"D#o7M7","D#,G#,C#,F#":"D#4","D#,F#,G#,A#":"D#madd4","D#,F#,A#,C#,G#":"D#m7add11","D#,F##,A##,E##":"D#+add#9","D#,F##,A##,C#,E##":"D#7#5#9","D#,F##,A#,C#,E##":"D#7#9","D#,F##,A#,C#,E##,B#":"D#13#9","D#,F##,A#,C#,E##,B":"D#7#9b13","D#,F##,A#,C##,E##,G##":"D#maj7#9#11","D#,F##,A#,C#,E##,G##":"D#7#9#11","D#,F##,A#,C#,E##,G##,B#":"D#13#9#11","D#,F##,A#,C#,E##,G##,B":"D#7#9#11b13","D#,E#,A#":"D#sus2","D#,G#,A##,C##,E#":"D#M9#5sus4","D#,E#,G#,A#":"D#sus24","D#,G#,A#,C##,E#":"D#M9sus4","D#,A#,C#,E#,G#":"D#11","D#,G#,A#,C#,E#":"D#b9sus","D#,G#,A#,C#,E#,B#":"D#13sus4","D#,F##,C#,E#":"D#9no5","D#,F##,C#,E#,B#":"D#13no5","D#,F##,A##,E#":"D#M#5add9","D#,F##,A##,C##,E#":"D#maj9#5","D#,F##,A##,C#,E#":"D#9#5","D#,F##,C#,E#,B":"D#9b13","D#,F##,A#,E#":"D#Madd9","D#,F##,A#,C##,E#":"D#maj9","D#,F##,A#,C#,E#":"D#9","D#,F##,A#,B#,E#":"D#6add9","D#,F##,A#,C##,E#,B#":"D#maj13","D#,F##,A#,B#,C##,E#":"D#M7add13","D#,F##,A#,C#,E#,B#":"D#13","D#,F##,A,C##,E#":"D#M9b5","D#,F##,A,C#,E#":"D#9b5","D#,F##,A,B#,C#,E#":"D#13b5","D#,F##,A##,C#,E#,G##":"D#9#5#11","D#,F##,A#,C##,E#,G##":"D#maj9#11","D#,F##,A#,C#,E#,G##":"D#9#11","D#,F##,A#,B#,E#,G##":"D#69#11","D#,F##,A#,C##,E#,G##,B#":"D#M13#11","D#,F##,A#,C#,E#,G##,B#":"D#13#11","D#,F##,A#,C#,E#,G##,B":"D#9#11b13","D#,F#,B,C#,E#":"D#m9#5","D#,F#,A#,E#":"D#madd9","D#,F#,A#,C##,E#":"D#mM9","D#,F#,A#,C#,E#":"D#m9","D#,F#,A#,B#,E#":"D#m69","D#,F#,A#,C#,E#,B#":"D#m13","D#,F#,A#,B,C##,E#":"D#mMaj9b6","D#,E#,F#,A,C#":"D#m9b5","D#,F#,A##,C#,E#,G#":"D#m11A","D#,F#,A#,C#,E#,G#":"D#m11","D#,A#,C#,E,G#":"D#11b9","D#,G#,A#,C#,E,B":"D#7sus4b9b13","D#,F##,C#,E":"D#alt7","D#,F##,A##,C#,E":"D#7#5b9","D#,F##,A#,E":"D#Maddb9","D#,F##,A#,C##,E":"D#M7b9","D#,F##,A#,C#,E":"D#7b9","D#,F##,A#,C#,E,B#":"D#13b9","D#,F##,A#,C#,E,B":"D#7b9b13"},{"Db,Ab":"Db5","Db,Gb,A,C":"DbM7#5sus4","Db,Gb,A,Cb":"Db7#5sus4","Db,Gb,Ab":"Dbsus4","Db,Gb,Ab,C":"DbM7sus4","Db,Gb,Ab,Cb":"Db7sus4","Db,F,Cb":"Db7no5","Db,F,A":"Dbaug","Db,F,Bbb,C":"DbM7b6","Db,F,A,C":"Dbmaj7#5","Db,F,A,Cb":"Db7#5","Db,F,Cb,Bbb":"Db7b13","Db,F,Ab":"DbM","Db,F,Ab,C":"Dbmaj7","Db,F,Ab,Cb":"Db7","Db,F,Ab,Bb":"Db6","Db,F,Ab,Cb,Bb":"Db7add6","Db,F,Ab,Bbb,Cb":"Db7b6","Db,F,Abb":"DbMb5","Db,F,Abb,C":"DbM7b5","Db,F,Abb,Cb":"Db7b5","Db,F,Ab,C,G":"Dbmaj#4","Db,F,Ab,Cb,G":"Db7#11","Db,F,Ab,Bb,G":"DbM6#11","Db,F,Ab,Cb,G,Bbb":"Db7#11b13","Db,Fb,A":"Dbm#5","Db,Fb,Bbb,C":"Dbmb6M7","Db,Fb,Bbb,Cb":"Dbm7#5","Db,Fb,Ab":"Dbm","Db,Fb,Ab,C":"Dbm/ma7","Db,Fb,Ab,Cb":"Dbm7","Db,Fb,Ab,Bb":"Dbm6","Db,Fb,Ab,Bbb,C":"DbmMaj7b6","Db,Fb,Abb":"Dbdim","Db,Fb,Abb,C":"DboM7","Db,Fb,Abb,Cb":"Dbm7b5","Db,Fb,Abb,Cbb":"Dbdim7","Db,Fb,Abb,Bb,C":"Dbo7M7","Db,Gb,Cb,Fb":"Db4","Db,Fb,Gb,Ab":"Dbmadd4","Db,Fb,Ab,Cb,Gb":"Dbm7add11","Db,F,A,E":"Db+add#9","Db,F,A,Cb,E":"Db7#5#9","Db,F,Ab,Cb,E":"Db7#9","Db,F,Ab,Cb,E,Bb":"Db13#9","Db,F,Ab,Cb,E,Bbb":"Db7#9b13","Db,F,Ab,C,E,G":"Dbmaj7#9#11","Db,F,Ab,Cb,E,G":"Db7#9#11","Db,F,Ab,Cb,E,G,Bb":"Db13#9#11","Db,F,Ab,Cb,E,G,Bbb":"Db7#9#11b13","Db,Eb,Ab":"Dbsus2","Db,Gb,A,C,Eb":"DbM9#5sus4","Db,Eb,Gb,Ab":"Dbsus24","Db,Gb,Ab,C,Eb":"DbM9sus4","Db,Ab,Cb,Eb,Gb":"Db11","Db,Gb,Ab,Cb,Eb":"Dbb9sus","Db,Gb,Ab,Cb,Eb,Bb":"Db13sus4","Db,F,Cb,Eb":"Db9no5","Db,F,Cb,Eb,Bb":"Db13no5","Db,F,A,Eb":"DbM#5add9","Db,F,A,C,Eb":"Dbmaj9#5","Db,F,A,Cb,Eb":"Db9#5","Db,F,Cb,Eb,Bbb":"Db9b13","Db,F,Ab,Eb":"DbMadd9","Db,F,Ab,C,Eb":"Dbmaj9","Db,F,Ab,Cb,Eb":"Db9","Db,F,Ab,Bb,Eb":"Db6add9","Db,F,Ab,C,Eb,Bb":"Dbmaj13","Db,F,Ab,Bb,C,Eb":"DbM7add13","Db,F,Ab,Cb,Eb,Bb":"Db13","Db,F,Abb,C,Eb":"DbM9b5","Db,F,Abb,Cb,Eb":"Db9b5","Db,F,Abb,Bb,Cb,Eb":"Db13b5","Db,F,A,Cb,Eb,G":"Db9#5#11","Db,F,Ab,C,Eb,G":"Dbmaj9#11","Db,F,Ab,Cb,Eb,G":"Db9#11","Db,F,Ab,Bb,Eb,G":"Db69#11","Db,F,Ab,C,Eb,G,Bb":"DbM13#11","Db,F,Ab,Cb,Eb,G,Bb":"Db13#11","Db,F,Ab,Cb,Eb,G,Bbb":"Db9#11b13","Db,Fb,Bbb,Cb,Eb":"Dbm9#5","Db,Fb,Ab,Eb":"Dbmadd9","Db,Fb,Ab,C,Eb":"DbmM9","Db,Fb,Ab,Cb,Eb":"Dbm9","Db,Fb,Ab,Bb,Eb":"Dbm69","Db,Fb,Ab,Cb,Eb,Bb":"Dbm13","Db,Fb,Ab,Bbb,C,Eb":"DbmMaj9b6","Db,Eb,Fb,Abb,Cb":"Dbm9b5","Db,Fb,A,Cb,Eb,Gb":"Dbm11A","Db,Fb,Ab,Cb,Eb,Gb":"Dbm11","Db,Ab,Cb,Ebb,Gb":"Db11b9","Db,Gb,Ab,Cb,Ebb,Bbb":"Db7sus4b9b13","Db,F,Cb,Ebb":"Dbalt7","Db,F,A,Cb,Ebb":"Db7#5b9","Db,F,Ab,Ebb":"DbMaddb9","Db,F,Ab,C,Ebb":"DbM7b9","Db,F,Ab,Cb,Ebb":"Db7b9","Db,F,Ab,Cb,Ebb,Bb":"Db13b9","Db,F,Ab,Cb,Ebb,Bbb":"Db7b9b13"}],PN=[{"E,B":"E5","E,A,B#,D#":"EM7#5sus4","E,A,B#,D":"E7#5sus4","E,A,B":"Esus4","E,A,B,D#":"EM7sus4","E,A,B,D":"E7sus4","E,G#,D":"E7no5","E,G#,B#":"Eaug","E,G#,C,D#":"EM7b6","E,G#,B#,D#":"Emaj7#5","E,G#,B#,D":"E7#5","E,G#,D,C":"E7b13","E,G#,B":"EM","E,G#,B,D#":"Emaj7","E,G#,B,D":"E7","E,G#,B,C#":"E6","E,G#,B,D,C#":"E7add6","E,G#,B,C,D":"E7b6","E,G#,Bb":"EMb5","E,G#,Bb,D#":"EM7b5","E,G#,Bb,D":"E7b5","E,G#,B,D#,A#":"Emaj#4","E,G#,B,D,A#":"E7#11","E,G#,B,C#,A#":"EM6#11","E,G#,B,D,A#,C":"E7#11b13","E,G,B#":"Em#5","E,G,C,D#":"Emb6M7","E,G,C,D":"Em7#5","E,G,B":"Em","E,G,B,D#":"Em/ma7","E,G,B,D":"Em7","E,G,B,C#":"Em6","E,G,B,C,D#":"EmMaj7b6","E,G,Bb":"Edim","E,G,Bb,D#":"EoM7","E,G,Bb,D":"Em7b5","E,G,Bb,Db":"Edim7","E,G,Bb,C#,D#":"Eo7M7","E,A,D,G":"E4","E,G,A,B":"Emadd4","E,G,B,D,A":"Em7add11","E,G#,B#,F##":"E+add#9","E,G#,B#,D,F##":"E7#5#9","E,G#,B,D,F##":"E7#9","E,G#,B,D,F##,C#":"E13#9","E,G#,B,D,F##,C":"E7#9b13","E,G#,B,D#,F##,A#":"Emaj7#9#11","E,G#,B,D,F##,A#":"E7#9#11","E,G#,B,D,F##,A#,C#":"E13#9#11","E,G#,B,D,F##,A#,C":"E7#9#11b13","E,F#,B":"Esus2","E,A,B#,D#,F#":"EM9#5sus4","E,F#,A,B":"Esus24","E,A,B,D#,F#":"EM9sus4","E,B,D,F#,A":"E11","E,A,B,D,F#":"Eb9sus","E,A,B,D,F#,C#":"E13sus4","E,G#,D,F#":"E9no5","E,G#,D,F#,C#":"E13no5","E,G#,B#,F#":"EM#5add9","E,G#,B#,D#,F#":"Emaj9#5","E,G#,B#,D,F#":"E9#5","E,G#,D,F#,C":"E9b13","E,G#,B,F#":"EMadd9","E,G#,B,D#,F#":"Emaj9","E,G#,B,D,F#":"E9","E,G#,B,C#,F#":"E6add9","E,G#,B,D#,F#,C#":"Emaj13","E,G#,B,C#,D#,F#":"EM7add13","E,G#,B,D,F#,C#":"E13","E,G#,Bb,D#,F#":"EM9b5","E,G#,Bb,D,F#":"E9b5","E,G#,Bb,C#,D,F#":"E13b5","E,G#,B#,D,F#,A#":"E9#5#11","E,G#,B,D#,F#,A#":"Emaj9#11","E,G#,B,D,F#,A#":"E9#11","E,G#,B,C#,F#,A#":"E69#11","E,G#,B,D#,F#,A#,C#":"EM13#11","E,G#,B,D,F#,A#,C#":"E13#11","E,G#,B,D,F#,A#,C":"E9#11b13","E,G,C,D,F#":"Em9#5","E,G,B,F#":"Emadd9","E,G,B,D#,F#":"EmM9","E,G,B,D,F#":"Em9","E,G,B,C#,F#":"Em69","E,G,B,D,F#,C#":"Em13","E,G,B,C,D#,F#":"EmMaj9b6","E,F#,G,Bb,D":"Em9b5","E,G,B#,D,F#,A":"Em11A","E,G,B,D,F#,A":"Em11","E,B,D,F,A":"E11b9","E,A,B,D,F,C":"E7sus4b9b13","E,G#,D,F":"Ealt7","E,G#,B#,D,F":"E7#5b9","E,G#,B,F":"EMaddb9","E,G#,B,D#,F":"EM7b9","E,G#,B,D,F":"E7b9","E,G#,B,D,F,C#":"E13b9","E,G#,B,D,F,C":"E7b9b13"},{"Eb,Bb":"Eb5","Eb,Ab,B,D":"EbM7#5sus4","Eb,Ab,B,Db":"Eb7#5sus4","Eb,Ab,Bb":"Ebsus4","Eb,Ab,Bb,D":"EbM7sus4","Eb,Ab,Bb,Db":"Eb7sus4","Eb,G,Db":"Eb7no5","Eb,G,B":"Ebaug","Eb,G,Cb,D":"EbM7b6","Eb,G,B,D":"Ebmaj7#5","Eb,G,B,Db":"Eb7#5","Eb,G,Db,Cb":"Eb7b13","Eb,G,Bb":"EbM","Eb,G,Bb,D":"Ebmaj7","Eb,G,Bb,Db":"Eb7","Eb,G,Bb,C":"Eb6","Eb,G,Bb,Db,C":"Eb7add6","Eb,G,Bb,Cb,Db":"Eb7b6","Eb,G,Bbb":"EbMb5","Eb,G,Bbb,D":"EbM7b5","Eb,G,Bbb,Db":"Eb7b5","Eb,G,Bb,D,A":"Ebmaj#4","Eb,G,Bb,Db,A":"Eb7#11","Eb,G,Bb,C,A":"EbM6#11","Eb,G,Bb,Db,A,Cb":"Eb7#11b13","Eb,Gb,B":"Ebm#5","Eb,Gb,Cb,D":"Ebmb6M7","Eb,Gb,Cb,Db":"Ebm7#5","Eb,Gb,Bb":"Ebm","Eb,Gb,Bb,D":"Ebm/ma7","Eb,Gb,Bb,Db":"Ebm7","Eb,Gb,Bb,C":"Ebm6","Eb,Gb,Bb,Cb,D":"EbmMaj7b6","Eb,Gb,Bbb":"Ebdim","Eb,Gb,Bbb,D":"EboM7","Eb,Gb,Bbb,Db":"Ebm7b5","Eb,Gb,Bbb,Dbb":"Ebdim7","Eb,Gb,Bbb,C,D":"Ebo7M7","Eb,Ab,Db,Gb":"Eb4","Eb,Gb,Ab,Bb":"Ebmadd4","Eb,Gb,Bb,Db,Ab":"Ebm7add11","Eb,G,B,F#":"Eb+add#9","Eb,G,B,Db,F#":"Eb7#5#9","Eb,G,Bb,Db,F#":"Eb7#9","Eb,G,Bb,Db,F#,C":"Eb13#9","Eb,G,Bb,Db,F#,Cb":"Eb7#9b13","Eb,G,Bb,D,F#,A":"Ebmaj7#9#11","Eb,G,Bb,Db,F#,A":"Eb7#9#11","Eb,G,Bb,Db,F#,A,C":"Eb13#9#11","Eb,G,Bb,Db,F#,A,Cb":"Eb7#9#11b13","Eb,F,Bb":"Ebsus2","Eb,Ab,B,D,F":"EbM9#5sus4","Eb,F,Ab,Bb":"Ebsus24","Eb,Ab,Bb,D,F":"EbM9sus4","Eb,Bb,Db,F,Ab":"Eb11","Eb,Ab,Bb,Db,F":"Ebb9sus","Eb,Ab,Bb,Db,F,C":"Eb13sus4","Eb,G,Db,F":"Eb9no5","Eb,G,Db,F,C":"Eb13no5","Eb,G,B,F":"EbM#5add9","Eb,G,B,D,F":"Ebmaj9#5","Eb,G,B,Db,F":"Eb9#5","Eb,G,Db,F,Cb":"Eb9b13","Eb,G,Bb,F":"EbMadd9","Eb,G,Bb,D,F":"Ebmaj9","Eb,G,Bb,Db,F":"Eb9","Eb,G,Bb,C,F":"Eb6add9","Eb,G,Bb,D,F,C":"Ebmaj13","Eb,G,Bb,C,D,F":"EbM7add13","Eb,G,Bb,Db,F,C":"Eb13","Eb,G,Bbb,D,F":"EbM9b5","Eb,G,Bbb,Db,F":"Eb9b5","Eb,G,Bbb,C,Db,F":"Eb13b5","Eb,G,B,Db,F,A":"Eb9#5#11","Eb,G,Bb,D,F,A":"Ebmaj9#11","Eb,G,Bb,Db,F,A":"Eb9#11","Eb,G,Bb,C,F,A":"Eb69#11","Eb,G,Bb,D,F,A,C":"EbM13#11","Eb,G,Bb,Db,F,A,C":"Eb13#11","Eb,G,Bb,Db,F,A,Cb":"Eb9#11b13","Eb,Gb,Cb,Db,F":"Ebm9#5","Eb,Gb,Bb,F":"Ebmadd9","Eb,Gb,Bb,D,F":"EbmM9","Eb,Gb,Bb,Db,F":"Ebm9","Eb,Gb,Bb,C,F":"Ebm69","Eb,Gb,Bb,Db,F,C":"Ebm13","Eb,Gb,Bb,Cb,D,F":"EbmMaj9b6","Eb,F,Gb,Bbb,Db":"Ebm9b5","Eb,Gb,B,Db,F,Ab":"Ebm11A","Eb,Gb,Bb,Db,F,Ab":"Ebm11","Eb,Bb,Db,Fb,Ab":"Eb11b9","Eb,Ab,Bb,Db,Fb,Cb":"Eb7sus4b9b13","Eb,G,Db,Fb":"Ebalt7","Eb,G,B,Db,Fb":"Eb7#5b9","Eb,G,Bb,Fb":"EbMaddb9","Eb,G,Bb,D,Fb":"EbM7b9","Eb,G,Bb,Db,Fb":"Eb7b9","Eb,G,Bb,Db,Fb,C":"Eb13b9","Eb,G,Bb,Db,Fb,Cb":"Eb7b9b13"}],kN=[{"F,C":"F5","F,Bb,C#,E":"FM7#5sus4","F,Bb,C#,Eb":"F7#5sus4","F,Bb,C":"Fsus4","F,Bb,C,E":"FM7sus4","F,Bb,C,Eb":"F7sus4","F,A,Eb":"F7no5","F,A,C#":"Faug","F,A,Db,E":"FM7b6","F,A,C#,E":"Fmaj7#5","F,A,C#,Eb":"F7#5","F,A,Eb,Db":"F7b13","F,A,C":"FM","F,A,C,E":"Fmaj7","F,A,C,Eb":"F7","F,A,C,D":"F6","F,A,C,Eb,D":"F7add6","F,A,C,Db,Eb":"F7b6","F,A,Cb":"FMb5","F,A,Cb,E":"FM7b5","F,A,Cb,Eb":"F7b5","F,A,C,E,B":"Fmaj#4","F,A,C,Eb,B":"F7#11","F,A,C,D,B":"FM6#11","F,A,C,Eb,B,Db":"F7#11b13","F,Ab,C#":"Fm#5","F,Ab,Db,E":"Fmb6M7","F,Ab,Db,Eb":"Fm7#5","F,Ab,C":"Fm","F,Ab,C,E":"Fm/ma7","F,Ab,C,Eb":"Fm7","F,Ab,C,D":"Fm6","F,Ab,C,Db,E":"FmMaj7b6","F,Ab,Cb":"Fdim","F,Ab,Cb,E":"FoM7","F,Ab,Cb,Eb":"Fm7b5","F,Ab,Cb,Ebb":"Fdim7","F,Ab,Cb,D,E":"Fo7M7","F,Bb,Eb,Ab":"F4","F,Ab,Bb,C":"Fmadd4","F,Ab,C,Eb,Bb":"Fm7add11","F,A,C#,G#":"F+add#9","F,A,C#,Eb,G#":"F7#5#9","F,A,C,Eb,G#":"F7#9","F,A,C,Eb,G#,D":"F13#9","F,A,C,Eb,G#,Db":"F7#9b13","F,A,C,E,G#,B":"Fmaj7#9#11","F,A,C,Eb,G#,B":"F7#9#11","F,A,C,Eb,G#,B,D":"F13#9#11","F,A,C,Eb,G#,B,Db":"F7#9#11b13","F,G,C":"Fsus2","F,Bb,C#,E,G":"FM9#5sus4","F,G,Bb,C":"Fsus24","F,Bb,C,E,G":"FM9sus4","F,C,Eb,G,Bb":"F11","F,Bb,C,Eb,G":"Fb9sus","F,Bb,C,Eb,G,D":"F13sus4","F,A,Eb,G":"F9no5","F,A,Eb,G,D":"F13no5","F,A,C#,G":"FM#5add9","F,A,C#,E,G":"Fmaj9#5","F,A,C#,Eb,G":"F9#5","F,A,Eb,G,Db":"F9b13","F,A,C,G":"FMadd9","F,A,C,E,G":"Fmaj9","F,A,C,Eb,G":"F9","F,A,C,D,G":"F6add9","F,A,C,E,G,D":"Fmaj13","F,A,C,D,E,G":"FM7add13","F,A,C,Eb,G,D":"F13","F,A,Cb,E,G":"FM9b5","F,A,Cb,Eb,G":"F9b5","F,A,Cb,D,Eb,G":"F13b5","F,A,C#,Eb,G,B":"F9#5#11","F,A,C,E,G,B":"Fmaj9#11","F,A,C,Eb,G,B":"F9#11","F,A,C,D,G,B":"F69#11","F,A,C,E,G,B,D":"FM13#11","F,A,C,Eb,G,B,D":"F13#11","F,A,C,Eb,G,B,Db":"F9#11b13","F,Ab,Db,Eb,G":"Fm9#5","F,Ab,C,G":"Fmadd9","F,Ab,C,E,G":"FmM9","F,Ab,C,Eb,G":"Fm9","F,Ab,C,D,G":"Fm69","F,Ab,C,Eb,G,D":"Fm13","F,Ab,C,Db,E,G":"FmMaj9b6","F,G,Ab,Cb,Eb":"Fm9b5","F,Ab,C#,Eb,G,Bb":"Fm11A","F,Ab,C,Eb,G,Bb":"Fm11","F,C,Eb,Gb,Bb":"F11b9","F,Bb,C,Eb,Gb,Db":"F7sus4b9b13","F,A,Eb,Gb":"Falt7","F,A,C#,Eb,Gb":"F7#5b9","F,A,C,Gb":"FMaddb9","F,A,C,E,Gb":"FM7b9","F,A,C,Eb,Gb":"F7b9","F,A,C,Eb,Gb,D":"F13b9","F,A,C,Eb,Gb,Db":"F7b9b13"},{"F#,C#":"F#5","F#,B,C##,E#":"F#M7#5sus4","F#,B,C##,E":"F#7#5sus4","F#,B,C#":"F#sus4","F#,B,C#,E#":"F#M7sus4","F#,B,C#,E":"F#7sus4","F#,A#,E":"F#7no5","F#,A#,C##":"F#aug","F#,A#,D,E#":"F#M7b6","F#,A#,C##,E#":"F#maj7#5","F#,A#,C##,E":"F#7#5","F#,A#,E,D":"F#7b13","F#,A#,C#":"F#M","F#,A#,C#,E#":"F#maj7","F#,A#,C#,E":"F#7","F#,A#,C#,D#":"F#6","F#,A#,C#,E,D#":"F#7add6","F#,A#,C#,D,E":"F#7b6","F#,A#,C":"F#Mb5","F#,A#,C,E#":"F#M7b5","F#,A#,C,E":"F#7b5","F#,A#,C#,E#,B#":"F#maj#4","F#,A#,C#,E,B#":"F#7#11","F#,A#,C#,D#,B#":"F#M6#11","F#,A#,C#,E,B#,D":"F#7#11b13","F#,A,C##":"F#m#5","F#,A,D,E#":"F#mb6M7","F#,A,D,E":"F#m7#5","F#,A,C#":"F#m","F#,A,C#,E#":"F#m/ma7","F#,A,C#,E":"F#m7","F#,A,C#,D#":"F#m6","F#,A,C#,D,E#":"F#mMaj7b6","F#,A,C":"F#dim","F#,A,C,E#":"F#oM7","F#,A,C,E":"F#m7b5","F#,A,C,Eb":"F#dim7","F#,A,C,D#,E#":"F#o7M7","F#,B,E,A":"F#4","F#,A,B,C#":"F#madd4","F#,A,C#,E,B":"F#m7add11","F#,A#,C##,G##":"F#+add#9","F#,A#,C##,E,G##":"F#7#5#9","F#,A#,C#,E,G##":"F#7#9","F#,A#,C#,E,G##,D#":"F#13#9","F#,A#,C#,E,G##,D":"F#7#9b13","F#,A#,C#,E#,G##,B#":"F#maj7#9#11","F#,A#,C#,E,G##,B#":"F#7#9#11","F#,A#,C#,E,G##,B#,D#":"F#13#9#11","F#,A#,C#,E,G##,B#,D":"F#7#9#11b13","F#,G#,C#":"F#sus2","F#,B,C##,E#,G#":"F#M9#5sus4","F#,G#,B,C#":"F#sus24","F#,B,C#,E#,G#":"F#M9sus4","F#,C#,E,G#,B":"F#11","F#,B,C#,E,G#":"F#b9sus","F#,B,C#,E,G#,D#":"F#13sus4","F#,A#,E,G#":"F#9no5","F#,A#,E,G#,D#":"F#13no5","F#,A#,C##,G#":"F#M#5add9","F#,A#,C##,E#,G#":"F#maj9#5","F#,A#,C##,E,G#":"F#9#5","F#,A#,E,G#,D":"F#9b13","F#,A#,C#,G#":"F#Madd9","F#,A#,C#,E#,G#":"F#maj9","F#,A#,C#,E,G#":"F#9","F#,A#,C#,D#,G#":"F#6add9","F#,A#,C#,E#,G#,D#":"F#maj13","F#,A#,C#,D#,E#,G#":"F#M7add13","F#,A#,C#,E,G#,D#":"F#13","F#,A#,C,E#,G#":"F#M9b5","F#,A#,C,E,G#":"F#9b5","F#,A#,C,D#,E,G#":"F#13b5","F#,A#,C##,E,G#,B#":"F#9#5#11","F#,A#,C#,E#,G#,B#":"F#maj9#11","F#,A#,C#,E,G#,B#":"F#9#11","F#,A#,C#,D#,G#,B#":"F#69#11","F#,A#,C#,E#,G#,B#,D#":"F#M13#11","F#,A#,C#,E,G#,B#,D#":"F#13#11","F#,A#,C#,E,G#,B#,D":"F#9#11b13","F#,A,D,E,G#":"F#m9#5","F#,A,C#,G#":"F#madd9","F#,A,C#,E#,G#":"F#mM9","F#,A,C#,E,G#":"F#m9","F#,A,C#,D#,G#":"F#m69","F#,A,C#,E,G#,D#":"F#m13","F#,A,C#,D,E#,G#":"F#mMaj9b6","F#,G#,A,C,E":"F#m9b5","F#,A,C##,E,G#,B":"F#m11A","F#,A,C#,E,G#,B":"F#m11","F#,C#,E,G,B":"F#11b9","F#,B,C#,E,G,D":"F#7sus4b9b13","F#,A#,E,G":"F#alt7","F#,A#,C##,E,G":"F#7#5b9","F#,A#,C#,G":"F#Maddb9","F#,A#,C#,E#,G":"F#M7b9","F#,A#,C#,E,G":"F#7b9","F#,A#,C#,E,G,D#":"F#13b9","F#,A#,C#,E,G,D":"F#7b9b13"}],LN=[{"G,D":"G5","G,C,D#,F#":"GM7#5sus4","G,C,D#,F":"G7#5sus4","G,C,D":"Gsus4","G,C,D,F#":"GM7sus4","G,C,D,F":"G7sus4","G,B,F":"G7no5","G,B,D#":"Gaug","G,B,Eb,F#":"GM7b6","G,B,D#,F#":"Gmaj7#5","G,B,D#,F":"G7#5","G,B,F,Eb":"G7b13","G,B,D":"GM","G,B,D,F#":"Gmaj7","G,B,D,F":"G7","G,B,D,E":"G6","G,B,D,F,E":"G7add6","G,B,D,Eb,F":"G7b6","G,B,Db":"GMb5","G,B,Db,F#":"GM7b5","G,B,Db,F":"G7b5","G,B,D,F#,C#":"Gmaj#4","G,B,D,F,C#":"G7#11","G,B,D,E,C#":"GM6#11","G,B,D,F,C#,Eb":"G7#11b13","G,Bb,D#":"Gm#5","G,Bb,Eb,F#":"Gmb6M7","G,Bb,Eb,F":"Gm7#5","G,Bb,D":"Gm","G,Bb,D,F#":"Gm/ma7","G,Bb,D,F":"Gm7","G,Bb,D,E":"Gm6","G,Bb,D,Eb,F#":"GmMaj7b6","G,Bb,Db":"Gdim","G,Bb,Db,F#":"GoM7","G,Bb,Db,F":"Gm7b5","G,Bb,Db,Fb":"Gdim7","G,Bb,Db,E,F#":"Go7M7","G,C,F,Bb":"G4","G,Bb,C,D":"Gmadd4","G,Bb,D,F,C":"Gm7add11","G,B,D#,A#":"G+add#9","G,B,D#,F,A#":"G7#5#9","G,B,D,F,A#":"G7#9","G,B,D,F,A#,E":"G13#9","G,B,D,F,A#,Eb":"G7#9b13","G,B,D,F#,A#,C#":"Gmaj7#9#11","G,B,D,F,A#,C#":"G7#9#11","G,B,D,F,A#,C#,E":"G13#9#11","G,B,D,F,A#,C#,Eb":"G7#9#11b13","G,A,D":"Gsus2","G,C,D#,F#,A":"GM9#5sus4","G,A,C,D":"Gsus24","G,C,D,F#,A":"GM9sus4","G,D,F,A,C":"G11","G,C,D,F,A":"Gb9sus","G,C,D,F,A,E":"G13sus4","G,B,F,A":"G9no5","G,B,F,A,E":"G13no5","G,B,D#,A":"GM#5add9","G,B,D#,F#,A":"Gmaj9#5","G,B,D#,F,A":"G9#5","G,B,F,A,Eb":"G9b13","G,B,D,A":"GMadd9","G,B,D,F#,A":"Gmaj9","G,B,D,F,A":"G9","G,B,D,E,A":"G6add9","G,B,D,F#,A,E":"Gmaj13","G,B,D,E,F#,A":"GM7add13","G,B,D,F,A,E":"G13","G,B,Db,F#,A":"GM9b5","G,B,Db,F,A":"G9b5","G,B,Db,E,F,A":"G13b5","G,B,D#,F,A,C#":"G9#5#11","G,B,D,F#,A,C#":"Gmaj9#11","G,B,D,F,A,C#":"G9#11","G,B,D,E,A,C#":"G69#11","G,B,D,F#,A,C#,E":"GM13#11","G,B,D,F,A,C#,E":"G13#11","G,B,D,F,A,C#,Eb":"G9#11b13","G,Bb,Eb,F,A":"Gm9#5","G,Bb,D,A":"Gmadd9","G,Bb,D,F#,A":"GmM9","G,Bb,D,F,A":"Gm9","G,Bb,D,E,A":"Gm69","G,Bb,D,F,A,E":"Gm13","G,Bb,D,Eb,F#,A":"GmMaj9b6","G,A,Bb,Db,F":"Gm9b5","G,Bb,D#,F,A,C":"Gm11A","G,Bb,D,F,A,C":"Gm11","G,D,F,Ab,C":"G11b9","G,C,D,F,Ab,Eb":"G7sus4b9b13","G,B,F,Ab":"Galt7","G,B,D#,F,Ab":"G7#5b9","G,B,D,Ab":"GMaddb9","G,B,D,F#,Ab":"GM7b9","G,B,D,F,Ab":"G7b9","G,B,D,F,Ab,E":"G13b9","G,B,D,F,Ab,Eb":"G7b9b13"},{"G#,D#":"G#5","G#,C#,D##,F##":"G#M7#5sus4","G#,C#,D##,F#":"G#7#5sus4","G#,C#,D#":"G#sus4","G#,C#,D#,F##":"G#M7sus4","G#,C#,D#,F#":"G#7sus4","G#,B#,F#":"G#7no5","G#,B#,D##":"G#aug","G#,B#,E,F##":"G#M7b6","G#,B#,D##,F##":"G#maj7#5","G#,B#,D##,F#":"G#7#5","G#,B#,F#,E":"G#7b13","G#,B#,D#":"G#M","G#,B#,D#,F##":"G#maj7","G#,B#,D#,F#":"G#7","G#,B#,D#,E#":"G#6","G#,B#,D#,F#,E#":"G#7add6","G#,B#,D#,E,F#":"G#7b6","G#,B#,D":"G#Mb5","G#,B#,D,F##":"G#M7b5","G#,B#,D,F#":"G#7b5","G#,B#,D#,F##,C##":"G#maj#4","G#,B#,D#,F#,C##":"G#7#11","G#,B#,D#,E#,C##":"G#M6#11","G#,B#,D#,F#,C##,E":"G#7#11b13","G#,B,D##":"G#m#5","G#,B,E,F##":"G#mb6M7","G#,B,E,F#":"G#m7#5","G#,B,D#":"G#m","G#,B,D#,F##":"G#m/ma7","G#,B,D#,F#":"G#m7","G#,B,D#,E#":"G#m6","G#,B,D#,E,F##":"G#mMaj7b6","G#,B,D":"G#dim","G#,B,D,F##":"G#oM7","G#,B,D,F#":"G#m7b5","G#,B,D,F":"G#dim7","G#,B,D,E#,F##":"G#o7M7","G#,C#,F#,B":"G#4","G#,B,C#,D#":"G#madd4","G#,B,D#,F#,C#":"G#m7add11","G#,B#,D##,A##":"G#+add#9","G#,B#,D##,F#,A##":"G#7#5#9","G#,B#,D#,F#,A##":"G#7#9","G#,B#,D#,F#,A##,E#":"G#13#9","G#,B#,D#,F#,A##,E":"G#7#9b13","G#,B#,D#,F##,A##,C##":"G#maj7#9#11","G#,B#,D#,F#,A##,C##":"G#7#9#11","G#,B#,D#,F#,A##,C##,E#":"G#13#9#11","G#,B#,D#,F#,A##,C##,E":"G#7#9#11b13","G#,A#,D#":"G#sus2","G#,C#,D##,F##,A#":"G#M9#5sus4","G#,A#,C#,D#":"G#sus24","G#,C#,D#,F##,A#":"G#M9sus4","G#,D#,F#,A#,C#":"G#11","G#,C#,D#,F#,A#":"G#b9sus","G#,C#,D#,F#,A#,E#":"G#13sus4","G#,B#,F#,A#":"G#9no5","G#,B#,F#,A#,E#":"G#13no5","G#,B#,D##,A#":"G#M#5add9","G#,B#,D##,F##,A#":"G#maj9#5","G#,B#,D##,F#,A#":"G#9#5","G#,B#,F#,A#,E":"G#9b13","G#,B#,D#,A#":"G#Madd9","G#,B#,D#,F##,A#":"G#maj9","G#,B#,D#,F#,A#":"G#9","G#,B#,D#,E#,A#":"G#6add9","G#,B#,D#,F##,A#,E#":"G#maj13","G#,B#,D#,E#,F##,A#":"G#M7add13","G#,B#,D#,F#,A#,E#":"G#13","G#,B#,D,F##,A#":"G#M9b5","G#,B#,D,F#,A#":"G#9b5","G#,B#,D,E#,F#,A#":"G#13b5","G#,B#,D##,F#,A#,C##":"G#9#5#11","G#,B#,D#,F##,A#,C##":"G#maj9#11","G#,B#,D#,F#,A#,C##":"G#9#11","G#,B#,D#,E#,A#,C##":"G#69#11","G#,B#,D#,F##,A#,C##,E#":"G#M13#11","G#,B#,D#,F#,A#,C##,E#":"G#13#11","G#,B#,D#,F#,A#,C##,E":"G#9#11b13","G#,B,E,F#,A#":"G#m9#5","G#,B,D#,A#":"G#madd9","G#,B,D#,F##,A#":"G#mM9","G#,B,D#,F#,A#":"G#m9","G#,B,D#,E#,A#":"G#m69","G#,B,D#,F#,A#,E#":"G#m13","G#,B,D#,E,F##,A#":"G#mMaj9b6","G#,A#,B,D,F#":"G#m9b5","G#,B,D##,F#,A#,C#":"G#m11A","G#,B,D#,F#,A#,C#":"G#m11","G#,D#,F#,A,C#":"G#11b9","G#,C#,D#,F#,A,E":"G#7sus4b9b13","G#,B#,F#,A":"G#alt7","G#,B#,D##,F#,A":"G#7#5b9","G#,B#,D#,A":"G#Maddb9","G#,B#,D#,F##,A":"G#M7b9","G#,B#,D#,F#,A":"G#7b9","G#,B#,D#,F#,A,E#":"G#13b9","G#,B#,D#,F#,A,E":"G#7b9b13"},{"Gb,Db":"Gb5","Gb,Cb,D,F":"GbM7#5sus4","Gb,Cb,D,Fb":"Gb7#5sus4","Gb,Cb,Db":"Gbsus4","Gb,Cb,Db,F":"GbM7sus4","Gb,Cb,Db,Fb":"Gb7sus4","Gb,Bb,Fb":"Gb7no5","Gb,Bb,D":"Gbaug","Gb,Bb,Ebb,F":"GbM7b6","Gb,Bb,D,F":"Gbmaj7#5","Gb,Bb,D,Fb":"Gb7#5","Gb,Bb,Fb,Ebb":"Gb7b13","Gb,Bb,Db":"GbM","Gb,Bb,Db,F":"Gbmaj7","Gb,Bb,Db,Fb":"Gb7","Gb,Bb,Db,Eb":"Gb6","Gb,Bb,Db,Fb,Eb":"Gb7add6","Gb,Bb,Db,Ebb,Fb":"Gb7b6","Gb,Bb,Dbb":"GbMb5","Gb,Bb,Dbb,F":"GbM7b5","Gb,Bb,Dbb,Fb":"Gb7b5","Gb,Bb,Db,F,C":"Gbmaj#4","Gb,Bb,Db,Fb,C":"Gb7#11","Gb,Bb,Db,Eb,C":"GbM6#11","Gb,Bb,Db,Fb,C,Ebb":"Gb7#11b13","Gb,Bbb,D":"Gbm#5","Gb,Bbb,Ebb,F":"Gbmb6M7","Gb,Bbb,Ebb,Fb":"Gbm7#5","Gb,Bbb,Db":"Gbm","Gb,Bbb,Db,F":"Gbm/ma7","Gb,Bbb,Db,Fb":"Gbm7","Gb,Bbb,Db,Eb":"Gbm6","Gb,Bbb,Db,Ebb,F":"GbmMaj7b6","Gb,Bbb,Dbb":"Gbdim","Gb,Bbb,Dbb,F":"GboM7","Gb,Bbb,Dbb,Fb":"Gbm7b5","Gb,Bbb,Dbb,Fbb":"Gbdim7","Gb,Bbb,Dbb,Eb,F":"Gbo7M7","Gb,Cb,Fb,Bbb":"Gb4","Gb,Bbb,Cb,Db":"Gbmadd4","Gb,Bbb,Db,Fb,Cb":"Gbm7add11","Gb,Bb,D,A":"Gb+add#9","Gb,Bb,D,Fb,A":"Gb7#5#9","Gb,Bb,Db,Fb,A":"Gb7#9","Gb,Bb,Db,Fb,A,Eb":"Gb13#9","Gb,Bb,Db,Fb,A,Ebb":"Gb7#9b13","Gb,Bb,Db,F,A,C":"Gbmaj7#9#11","Gb,Bb,Db,Fb,A,C":"Gb7#9#11","Gb,Bb,Db,Fb,A,C,Eb":"Gb13#9#11","Gb,Bb,Db,Fb,A,C,Ebb":"Gb7#9#11b13","Gb,Ab,Db":"Gbsus2","Gb,Cb,D,F,Ab":"GbM9#5sus4","Gb,Ab,Cb,Db":"Gbsus24","Gb,Cb,Db,F,Ab":"GbM9sus4","Gb,Db,Fb,Ab,Cb":"Gb11","Gb,Cb,Db,Fb,Ab":"Gbb9sus","Gb,Cb,Db,Fb,Ab,Eb":"Gb13sus4","Gb,Bb,Fb,Ab":"Gb9no5","Gb,Bb,Fb,Ab,Eb":"Gb13no5","Gb,Bb,D,Ab":"GbM#5add9","Gb,Bb,D,F,Ab":"Gbmaj9#5","Gb,Bb,D,Fb,Ab":"Gb9#5","Gb,Bb,Fb,Ab,Ebb":"Gb9b13","Gb,Bb,Db,Ab":"GbMadd9","Gb,Bb,Db,F,Ab":"Gbmaj9","Gb,Bb,Db,Fb,Ab":"Gb9","Gb,Bb,Db,Eb,Ab":"Gb6add9","Gb,Bb,Db,F,Ab,Eb":"Gbmaj13","Gb,Bb,Db,Eb,F,Ab":"GbM7add13","Gb,Bb,Db,Fb,Ab,Eb":"Gb13","Gb,Bb,Dbb,F,Ab":"GbM9b5","Gb,Bb,Dbb,Fb,Ab":"Gb9b5","Gb,Bb,Dbb,Eb,Fb,Ab":"Gb13b5","Gb,Bb,D,Fb,Ab,C":"Gb9#5#11","Gb,Bb,Db,F,Ab,C":"Gbmaj9#11","Gb,Bb,Db,Fb,Ab,C":"Gb9#11","Gb,Bb,Db,Eb,Ab,C":"Gb69#11","Gb,Bb,Db,F,Ab,C,Eb":"GbM13#11","Gb,Bb,Db,Fb,Ab,C,Eb":"Gb13#11","Gb,Bb,Db,Fb,Ab,C,Ebb":"Gb9#11b13","Gb,Bbb,Ebb,Fb,Ab":"Gbm9#5","Gb,Bbb,Db,Ab":"Gbmadd9","Gb,Bbb,Db,F,Ab":"GbmM9","Gb,Bbb,Db,Fb,Ab":"Gbm9","Gb,Bbb,Db,Eb,Ab":"Gbm69","Gb,Bbb,Db,Fb,Ab,Eb":"Gbm13","Gb,Bbb,Db,Ebb,F,Ab":"GbmMaj9b6","Gb,Ab,Bbb,Dbb,Fb":"Gbm9b5","Gb,Bbb,D,Fb,Ab,Cb":"Gbm11A","Gb,Bbb,Db,Fb,Ab,Cb":"Gbm11","Gb,Db,Fb,Abb,Cb":"Gb11b9","Gb,Cb,Db,Fb,Abb,Ebb":"Gb7sus4b9b13","Gb,Bb,Fb,Abb":"Gbalt7","Gb,Bb,D,Fb,Abb":"Gb7#5b9","Gb,Bb,Db,Abb":"GbMaddb9","Gb,Bb,Db,F,Abb":"GbM7b9","Gb,Bb,Db,Fb,Abb":"Gb7b9","Gb,Bb,Db,Fb,Abb,Eb":"Gb13b9","Gb,Bb,Db,Fb,Abb,Ebb":"Gb7b9b13"}],VS=[...TN,...NN,...FN,...MN,...PN,...kN,...LN];console.log("ALL CHORDS OBJ",VS);const Xf=()=>{let t=[],e=1;return VS.forEach(n=>{for(let i in n){let r={},s=n[i],o=i,a=`${s[0]}${s[1]}`;r.id=e++,s[1]==="#"||s[1]==="b"?r.key=a:r.key=`${s[0]}`,r.name=s,r.notes=o,t.push(r)}}),t};console.log("REFORMAT",Xf);const Hl=Xf(),ON=[...new Set(Hl.map(t=>t.key))].sort();ON.reduce((t,e)=>(t[e]=Hl.filter(n=>n.key===e),t),{});Hl.reduce((t,e)=>(t[e.id]=e,t),{});Hl.reduce((t,e)=>{const n=e.name.toLowerCase();return t[n]||(t[n]=[]),t[n].push(e),t},{});const yN=({name:t,image:e,notes:n,id:i})=>v.jsxs("div",{className:"card-container",children:[v.jsxs("div",{className:"card-chord-sec1",children:[v.jsx("div",{className:"card-chord-chord-name",children:t}),v.jsx("div",{className:"card-chord-visual-piano",children:e})]}),v.jsxs("div",{className:"card-chord-sec2",children:[v.jsx("div",{className:"card-chord-notes",children:n}),v.jsxs("div",{className:"card-chord-chord-id",children:["Id: ",i]})]})]});const RN=()=>{const t=Xf(),e=[...new Set(t.map(h=>h.key))].sort(),[n,i]=B.useState(e[0]||""),r=n?t.filter(h=>h.key===n):t,[s,o]=B.useState({}),a=B.useRef(!0);B.useEffect(()=>{o({})},[n]);const l=(h,g,E)=>{if(s[h])return;const p=document.getElementById(`piano-container-${h}`);if(!p)return;p.style.width="500px",p.style.height="180px",p.style.margin="0 auto";const m=new cS(p,{startOctave:3,endOctave:6,showOctaveNumbers:!0,whiteKeyWidth:40,blackKeyWidth:20,blackKeyHeight:100,keyPressStyle:"vivid"});m.create();const b=d(E),A=g.split(",").map(w=>w.trim()),S=f(A,b);S.forEach(w=>{try{m.keyDown(w)}catch(D){console.warn(`Failed to press key ${w}:`,D)}}),setTimeout(()=>{m.rasterize(w=>{a.current&&o(D=>({...D,[h]:w})),S.forEach(D=>{try{m.keyUp(D)}catch(x){console.warn(`Failed to release key ${D}:`,x)}})},`${g} - ${h}`)},200)},d=h=>{const g=h.match(/^([A-G][#b]?)/);return g?g[1]:null},f=(h,g)=>{if(!g)return h.map(b=>`${b}4`);const E=h.map(u),p=E.findIndex(b=>u(b)===u(g));if(p===-1)return E.map(b=>`${b}4`);const m=[...E.slice(p),...E.slice(0,p)];return c(m,g)},u=h=>{const g=h.replace(/\d+$/,"");return{"B#":"C","E#":"F",Cb:"B",Fb:"E"}[g]||g},c=(h,g)=>{const E={C:0,"C#":1,Db:1,D:2,"D#":3,Eb:3,E:4,F:5,"F#":6,Gb:6,G:7,"G#":8,Ab:8,A:9,"A#":10,Bb:10,B:11},p=E[u(g)];if(p===void 0)return h.map(A=>`${A}4`);const m=h[0].includes("b13")||h[0].includes("13")?"13":h[0].includes("11")?"11":h[0].includes("9")?"9":h[0].includes("7")?"7":h[0].includes("6")?"6":h[0].includes("dim")?"dim":h[0].includes("aug")?"aug":h[0].includes("m")||h[0].includes("-")?"m":"",b=[`${g}3`];for(let A=1;A<h.length;A++){const S=h[A],w=u(S),D=E[w];if(D===void 0){b.push(`${S}4`);continue}let x=(D-p+12)%12,F="";x===0?F="root":x===3||x===4?F="third":x===7?F="fifth":x===10||x===11?F="seventh":x===1||x===2?F="ninth":x===5||x===6?F="eleventh":(x===8||x===9)&&(F="thirteenth");let y;x===8&&m.includes("7")&&(h[0].includes("b13")||h.length>=4)||F==="ninth"||F==="eleventh"||F==="thirteenth"?y=5:y=4,b.push(`${w}${y}`)}return b};return B.useEffect(()=>{const h=(g,E)=>{const p=Math.min(g+E,r.length);for(let m=g;m<p;m++){const b=r[m];l(b.id,b.notes,b.name)}p<r.length&&a.current&&setTimeout(()=>{h(p,E)},100)};h(0,5)},[r]),v.jsxs("div",{className:"piano-chord-detail",children:[v.jsxs("div",{className:"key-filter-container",children:[v.jsx("label",{htmlFor:"key-select",children:"Select Key: "}),v.jsx("select",{id:"key-select",value:n,onChange:h=>i(h.target.value),className:"key-select",children:e.map(h=>v.jsx("option",{value:h,children:h},h))}),v.jsxs("span",{className:"results-count",children:["Showing ",r.length," chords in key ",n]})]}),v.jsx("div",{className:"chord-list",children:r.map(h=>v.jsx(yN,{name:h.name,image:s[h.id]?v.jsx("img",{src:s[h.id],alt:`Piano visualization for ${h.name}`,className:"piano-image",width:"250",height:"90"}):v.jsx("div",{id:`piano-container-${h.id}`,className:"piano-container"}),notes:h.notes,id:h.id},h.id))})]})};const IN=()=>{const t=Rt(),e=Zt(),n=Zn(h=>h.session.user),i=Zn(h=>h.course?Object.values(h.course):[]),[r,s]=B.useState(!1),[o,a]=B.useState(null),[l,d]=B.useState({course_name:"",details_of_course:""});if(B.useEffect(()=>{n&&(console.log("Current user state:",n),t(x1()))},[t,n]),!n)return v.jsx(rf,{to:"/login"});const f=n.full_name.trim()==="Admin User";console.log("Is admin?",f),console.log("User full name:",n.full_name);const u=h=>{a(h),d({course_name:h.course_name,details_of_course:h.details_of_course}),s(!0)},c=async h=>{h.preventDefault(),await t(uD(o.id,l.course_name,l.details_of_course)),s(!1)};return v.jsxs("div",{className:"courses-container",children:[f&&v.jsx("p",{className:"create-course-button-container",children:v.jsx(f1,{to:"/createCourse",className:"create-course-button",children:"Create Course"})}),v.jsxs("div",{className:"courses-grid",children:[v.jsx(RN,{}),i.map(h=>v.jsxs("div",{className:"course-card",children:[v.jsx("h2",{className:"course-name",children:h.course_name}),v.jsx("p",{className:"course-detail",children:h.details_of_course}),v.jsxs("div",{children:[v.jsx("button",{children:v.jsx(sf,{to:`/songs/${h.course_name[0]}`,children:"Songs"})}),v.jsx("button",{onClick:()=>alert("Feature to be implemented soon"),children:"Scales"}),v.jsx("button",{onClick:()=>alert("Feature to be implemented soon"),children:"Chords"}),v.jsx("button",{onClick:()=>alert("Feature to be implemented soon"),children:"Keys"}),f&&v.jsxs(v.Fragment,{children:[v.jsx("button",{onClick:()=>u(h),children:"Update"}),v.jsx("button",{onClick:()=>e(`/course/admin/delete/${h.id}`),children:"Delete"})]})]})]},h.id))]}),r&&o&&v.jsx("div",{className:"update-form-modal",children:v.jsxs("form",{onSubmit:c,children:[v.jsx("input",{type:"text",value:l.course_name,onChange:h=>d({...l,course_name:h.target.value}),placeholder:"Course Name",required:!0}),v.jsx("textarea",{value:l.details_of_course,onChange:h=>d({...l,details_of_course:h.target.value}),placeholder:"Course Details",required:!0}),v.jsx("button",{type:"submit",children:"Update Course"}),v.jsx("button",{type:"button",onClick:()=>s(!1),children:"Cancel"})]})}),v.jsx("img",{className:"scales",src:"/images/background-scales-lighter.png",alt:"KBuddy logo"})]})},jN=()=>{const t=Rt(),e=Zt(),n=Zn(o=>o.session.user),[i,r]=B.useState({course_name:"",details_of_course:null});B.useEffect(()=>{(!n||n.full_name!=="Admin User")&&e("/course")},[n,e]);const s=async o=>{o.preventDefault(),await t(oD(i.course_name,i.details_of_course)),e("/course")};return!n||n.full_name!=="Admin User"?null:v.jsxs("div",{children:[v.jsx("h1",{className:"create-course-title",children:"Create Course"}),v.jsxs("form",{className:"create-course",onSubmit:s,children:[v.jsxs("label",{children:["CourseName",v.jsxs("select",{value:i.course_name,onChange:o=>r({...i,course_name:o.target.value}),required:!0,children:[v.jsx("option",{value:"",disabled:!0,children:"Select Key"}),v.jsx("option",{value:"A",children:"A"}),v.jsx("option",{value:"B",children:"B"}),v.jsx("option",{value:"C",children:"C"}),v.jsx("option",{value:"D",children:"D"}),v.jsx("option",{value:"E",children:"E"}),v.jsx("option",{value:"F",children:"F"}),v.jsx("option",{value:"G",children:"G"}),v.jsx("option",{value:"min",children:"min"}),v.jsx("option",{value:"maj",children:"maj"}),v.jsx("option",{value:"dim",children:"dim"}),v.jsx("option",{value:"aug",children:"aug"}),v.jsx("option",{value:"sus",children:"sus"})]})]}),v.jsxs("label",{children:["Details of Course",v.jsx("input",{type:"text",value:i.details_of_course,onChange:o=>r({...i,details_of_course:o.target.value}),required:!0})]}),v.jsx("button",{type:"submit",children:"create"})]}),v.jsx("img",{className:"scales",src:"/images/background-scales-lighter.png",alt:"KBuddy logo"})]})};function UN({song:t}){const e=Rt(),[n,i]=B.useState(!1),[r,s]=B.useState({song_key:(t==null?void 0:t.song_key)||"",song:(t==null?void 0:t.song)||"",artist:(t==null?void 0:t.artist)||"",chords_used:(t==null?void 0:t.chords_used)||"",progression_used:(t==null?void 0:t.progression_used)||"",description:(t==null?void 0:t.description)||""}),o=async a=>{a.preventDefault(),await e(LD(t.id,r))&&(e(af()),i(!1))};return v.jsxs("div",{children:[v.jsx("button",{className:"update-button",onClick:()=>i(!0),children:"Update Song"}),n&&v.jsx("div",{className:"modal-overlay",children:v.jsxs("div",{className:"modal-content-update-song",children:[v.jsx("h2",{children:"Update Song"}),v.jsxs("form",{className:"update-form",onSubmit:o,children:[v.jsxs("div",{className:"form-group",children:[v.jsx("label",{children:"Song Key:"}),v.jsx("input",{type:"text",value:r.song_key,onChange:a=>s({...r,song_key:a.target.value}),required:!0})]}),v.jsxs("div",{className:"form-group",children:[v.jsx("label",{children:"Song Name:"}),v.jsx("input",{type:"text",value:r.song,onChange:a=>s({...r,song:a.target.value}),required:!0})]}),v.jsxs("div",{className:"form-group",children:[v.jsx("label",{children:"Artist:"}),v.jsx("input",{type:"text",value:r.artist,onChange:a=>s({...r,artist:a.target.value}),required:!0})]}),v.jsxs("div",{className:"form-group",children:[v.jsx("label",{children:"Chords Used:"}),v.jsx("input",{type:"text",value:r.chords_used,onChange:a=>s({...r,chords_used:a.target.value}),required:!0})]}),v.jsxs("div",{className:"form-group",children:[v.jsx("label",{children:"Progression Used:"}),v.jsx("input",{type:"text",value:r.progression_used,onChange:a=>s({...r,progression_used:a.target.value}),required:!0})]}),v.jsxs("div",{className:"form-group",children:[v.jsx("label",{children:"Description:"}),v.jsx("textarea",{value:r.description,onChange:a=>s({...r,description:a.target.value}),required:!0})]}),v.jsxs("div",{className:"button-group",children:[v.jsx("button",{type:"submit",children:"Save Changes"}),v.jsx("button",{type:"button",onClick:()=>i(!1),children:"Cancel"})]})]})]})}),v.jsx("img",{className:"scales",src:"/images/background-scales-lighter.png",alt:"KBuddy logo"})]})}const HN=()=>{const t=Rt(),{song_key:e}=u1(),n=Zn(a=>a.song),i=Zn(a=>a.session.user),r=e[0],s=i&&i.full_name.trim()==="Admin User";B.useEffect(()=>(t(af(r)),()=>{t({type:"song/CLEAR_SONGS"})}),[t,r]);const o=async a=>{await t(kD(a))};return v.jsxs("div",{className:"song-details-grid",children:[v.jsx("div",{className:"song-details-title",children:v.jsxs("h2",{children:["Songs in Key of ",r]})}),s&&v.jsx("div",{className:"create-button-container",children:v.jsx("button",{className:"create-song-button",children:v.jsx(sf,{to:"/create-song",children:"Add Song"})})}),Object.values(n).length>0?Object.values(n).map(a=>v.jsxs("div",{className:"song-key-details",children:[v.jsxs("div",{className:"song-general-details",children:[v.jsx("h3",{children:a.song}),v.jsx("p",{children:a.artist}),v.jsx("p",{children:a.song_key}),v.jsx("p",{children:a.chords_used}),v.jsx("p",{children:a.progression_used})]}),v.jsx("div",{className:"song-description",children:v.jsxs("p",{children:[" ",a.description]})}),s&&v.jsxs("div",{className:"song-button",children:[v.jsx(UN,{song:a}),v.jsx("button",{onClick:()=>o(a.id),children:"Delete Song"})]})]},a.id)):v.jsxs("h3",{children:["Currently no songs in the key of ",r," available in this database"]}),v.jsx("img",{className:"scales",src:"/images/background-scales-lighter.png",alt:"KBuddy logo"})]})},WN=()=>{const t=Rt(),e=Zt(),[n,i]=B.useState({song:"",artist:"",chords_used:"",progression_used:"",song_key:"",description:""}),r=["C","C#","D","D#","E","F","F#","G","G#","A","A#","B"],s=async o=>{o.preventDefault();try{const a=await t(PD(null,n.song,n.artist,n.chords_used,n.progression_used,n.song_key,n.description));a&&(console.log("Song created:",a),await t(af(n.song_key)),e(`/songs/${n.song_key}`))}catch(a){console.error("Failed to create song:",a)}};return v.jsxs("div",{className:"create-song-container",children:[v.jsx("h1",{className:"create-song-title",children:"Add New Song"}),v.jsxs("form",{className:"create-song-form",onSubmit:s,children:[v.jsxs("div",{children:[v.jsx("label",{children:"Song Name:"}),v.jsx("input",{type:"text",value:n.song,onChange:o=>i({...n,song:o.target.value}),required:!0})]}),v.jsxs("div",{children:[v.jsx("label",{children:"Artist:"}),v.jsx("input",{type:"text",value:n.artist,onChange:o=>i({...n,artist:o.target.value}),required:!0})]}),v.jsxs("div",{children:[v.jsx("label",{children:"Song Key:"}),v.jsxs("select",{value:n.song_key,onChange:o=>i({...n,song_key:o.target.value}),required:!0,children:[v.jsx("option",{value:"",children:"Select a key"}),r.map(o=>v.jsx("option",{value:o,children:o},o))]})]}),v.jsxs("div",{children:[v.jsx("label",{children:"Chords Used:"}),v.jsx("input",{type:"text",value:n.chords_used,onChange:o=>i({...n,chords_used:o.target.value}),required:!0})]}),v.jsxs("div",{children:[v.jsx("label",{children:"Progression Used:"}),v.jsx("input",{type:"text",value:n.progression_used,onChange:o=>i({...n,progression_used:o.target.value}),required:!0})]}),v.jsxs("div",{children:[v.jsx("label",{children:"Description:"}),v.jsx("textarea",{value:n.description,onChange:o=>i({...n,description:o.target.value}),placeholder:"Add song details, tips, or notes here",rows:"4",required:!0})]}),v.jsx("button",{type:"submit",children:"Add Song"})]}),v.jsx("img",{className:"scales",src:"/images/background-scales-lighter.png",alt:"KBuddy logo"})]})},XN=()=>{const t=Zt(),e=()=>{t("/review/create")};return v.jsx("div",{children:v.jsx("button",{onClick:e,className:"create-review-button",children:v.jsx("p",{className:"create-review-word",children:"Create Review"})})})},zN=()=>{const t=Rt(),e=Zn(n=>Object.values(n.review));return B.useEffect(()=>{t(ED())},[t]),v.jsxs("div",{className:"reviews-container",children:[v.jsxs("div",{className:"reviews-header",children:[v.jsx("h1",{children:"Community Reviews"}),v.jsx(XN,{})]}),v.jsx("div",{className:"reviews-list",children:e.map(n=>v.jsxs("div",{className:"review-card",children:[v.jsx("h3",{children:n.reviewer_name}),v.jsx("p",{children:n.review_content})]},n.id))}),v.jsx("img",{className:"scales",src:"/images/background-scales-lighter.png",alt:"KBuddy logo"})]})};const YN=()=>{const t=Rt(),e=Zt(),[n,i]=B.useState(""),r=async s=>{s.preventDefault(),await t(bD(n))&&(i(""),e("/review",{replace:!0}))};return v.jsxs("div",{className:"create-review-container",children:[v.jsx("h1",{className:"review-title",children:"Create a Review"}),v.jsxs("form",{className:"create-review-form",onSubmit:r,children:[v.jsx("textarea",{value:n,onChange:s=>i(s.target.value),placeholder:"Write your review here...",required:!0}),v.jsx("button",{type:"submit",children:"Post Review"})]}),v.jsx("img",{className:"scales",src:"/images/background-scales-lighter.png",alt:"KBuddy logo"})]})},VN=()=>{const t=Zt(),e=Rt(),{courseId:n}=u1(),[i,r]=B.useState(null),s=async()=>{try{console.log("Deleting course:",n),await e(aD(n)),console.log("Delete completed"),setTimeout(()=>t("/course"),100)}catch{r("Failed to delete course")}};return v.jsxs("div",{children:[v.jsx("h2",{children:"Delete Course"}),i&&v.jsx("p",{className:"error",children:i}),v.jsx("p",{children:"Are you sure you want to delete this course?"}),v.jsx("button",{onClick:s,children:"Yes, Delete Course"}),v.jsx("button",{onClick:()=>t("/course"),children:"Cancel"})]})},qN=Nw([{element:v.jsx(hx,{}),children:[{path:"/",element:v.jsx(BN,{})},{path:"course",element:v.jsx(IN,{})},{path:"createCourse",element:v.jsx(jN,{})},{path:"course/admin/delete/:courseId",element:v.jsx(VN,{})},{path:"/create-song",element:v.jsx(WN,{})},{path:":songs/:song_key",element:v.jsx(HN,{})},{path:"/review",element:v.jsx(zN,{})},{path:"/review/create",element:v.jsx(YN,{})},{path:"login",element:v.jsx(ID,{})},{path:"signup",element:v.jsx(jD,{})}]}]);const JN=RD();Xc.createRoot(document.getElementById("root")).render(v.jsx(bi.StrictMode,{children:v.jsx(f0,{store:JN,children:v.jsx(Rw,{router:qN})})}));
