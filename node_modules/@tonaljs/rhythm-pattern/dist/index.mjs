// index.ts
function binary(...numbers) {
  return numbers.reduce((pattern, number) => {
    number.toString(2).split("").forEach((digit) => {
      pattern.push(parseInt(digit));
    });
    return pattern;
  }, []);
}
function hex(hexNumber) {
  const pattern = [];
  for (let i = 0; i < hexNumber.length; i++) {
    const digit = parseInt("0x" + hexNumber[i]);
    const binary2 = isNaN(digit) ? "0000" : digit.toString(2).padStart(4, "0");
    binary2.split("").forEach((digit2) => {
      pattern.push(digit2 === "1" ? 1 : 0);
    });
  }
  return pattern;
}
function onsets(...numbers) {
  return numbers.reduce((pattern, number) => {
    pattern.push(1);
    for (let i = 0; i < number; i++) {
      pattern.push(0);
    }
    return pattern;
  }, []);
}
function random(length, probability2 = 0.5, rnd = Math.random) {
  const pattern = [];
  for (let i = 0; i < length; i++) {
    pattern.push(rnd() >= probability2 ? 1 : 0);
  }
  return pattern;
}
function probability(probabilities, rnd = Math.random) {
  return probabilities.map((probability2) => rnd() <= probability2 ? 1 : 0);
}
function rotate(pattern, rotations) {
  const len = pattern.length;
  const rotated = [];
  for (let i = 0; i < len; i++) {
    const pos = ((i - rotations) % len + len) % len;
    rotated[i] = pattern[pos];
  }
  return rotated;
}
function euclid(steps, beats) {
  const pattern = [];
  let d = -1;
  for (let i = 0; i < steps; i++) {
    const v = Math.floor(i * (beats / steps));
    pattern[i] = v !== d ? 1 : 0;
    d = v;
  }
  return pattern;
}
export {
  binary,
  euclid,
  hex,
  onsets,
  probability,
  random,
  rotate
};
//# sourceMappingURL=index.mjs.map